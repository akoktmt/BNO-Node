
BNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800b9e8  0800b9e8  0001b9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be40  0800be40  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800be40  0800be40  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be40  0800be40  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be40  0800be40  0001be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800be48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  200001d4  0800c01c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800c01c  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016396  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340c  00000000  00000000  000365d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1f  00000000  00000000  0003ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044b5  00000000  00000000  0003bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186ff  00000000  00000000  00040114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000938fa  00000000  00000000  00058813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000671c  00000000  00000000  000ec110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9d0 	.word	0x0800b9d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800b9d0 	.word	0x0800b9d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <bno055_init>:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */


error_bno bno055_init(bno055_t* imu) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0af      	sub	sp, #188	; 0xbc
 80011c4:	af2a      	add	r7, sp, #168	; 0xa8
 80011c6:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	799b      	ldrb	r3, [r3, #6]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80011d8:	687c      	ldr	r4, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80011de:	f107 030e 	add.w	r3, r7, #14
 80011e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80011e4:	2300      	movs	r3, #0
 80011e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80011e8:	4668      	mov	r0, sp
 80011ea:	f104 0310 	add.w	r3, r4, #16
 80011ee:	229c      	movs	r2, #156	; 0x9c
 80011f0:	4619      	mov	r1, r3
 80011f2:	f007 f91c 	bl	800842e <memcpy>
 80011f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011fa:	f001 fbe4 	bl	80029c6 <bno055_read_regs>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <bno055_init+0x4c>
        return err;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	e0b6      	b.n	800137a <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	2ba0      	cmp	r3, #160	; 0xa0
 8001210:	d001      	beq.n	8001216 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8001212:	2306      	movs	r3, #6
 8001214:	e0b1      	b.n	800137a <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 faa2 	bl	8002762 <bno055_set_opmode>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <bno055_init+0x6c>
        return err;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	e0a6      	b.n	800137a <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 800122c:	2002      	movs	r0, #2
 800122e:	f002 fdcf 	bl	8003dd0 <HAL_Delay>
    bno055_reset(imu);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 fb81 	bl	800293a <bno055_reset>
    HAL_Delay(5000);
 8001238:	f241 3088 	movw	r0, #5000	; 0x1388
 800123c:	f002 fdc8 	bl	8003dd0 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f001 fb1c 	bl	8002880 <bno055_set_pwr_mode>
 8001248:	4603      	mov	r3, r0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <bno055_init+0x96>
        return err;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	e091      	b.n	800137a <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f002 fdba 	bl	8003dd0 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800125c:	2100      	movs	r1, #0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 fc14 	bl	8002a8c <bno055_set_page>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <bno055_init+0xb2>
        return err;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	e083      	b.n	800137a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001272:	200c      	movs	r0, #12
 8001274:	f002 fdac 	bl	8003dd0 <HAL_Delay>
    bno055_on(imu);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f001 fb81 	bl	8002980 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	791b      	ldrb	r3, [r3, #4]
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f001 fa6c 	bl	8002762 <bno055_set_opmode>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <bno055_init+0xd8>
        return err;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	e070      	b.n	800137a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001298:	2018      	movs	r0, #24
 800129a:	f002 fd99 	bl	8003dd0 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <bno055_init+0x1c4>)
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <bno055_init+0x1c8>)
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <bno055_init+0x1cc>)
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <bno055_init+0x1d0>)
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a36      	ldr	r2, [pc, #216]	; (8001394 <bno055_init+0x1d4>)
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a36      	ldr	r2, [pc, #216]	; (8001398 <bno055_init+0x1d8>)
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a35      	ldr	r2, [pc, #212]	; (800139c <bno055_init+0x1dc>)
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a35      	ldr	r2, [pc, #212]	; (80013a0 <bno055_init+0x1e0>)
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <bno055_init+0x1e4>)
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <bno055_init+0x1e8>)
 80012d8:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a33      	ldr	r2, [pc, #204]	; (80013ac <bno055_init+0x1ec>)
 80012de:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <bno055_init+0x1f0>)
 80012e4:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <bno055_init+0x1f4>)
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <bno055_init+0x1f8>)
 80012f0:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a31      	ldr	r2, [pc, #196]	; (80013bc <bno055_init+0x1fc>)
 80012f6:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <bno055_init+0x200>)
 80012fc:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <bno055_init+0x204>)
 8001302:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <bno055_init+0x208>)
 8001308:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <bno055_init+0x20c>)
 800130e:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <bno055_init+0x210>)
 8001314:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <bno055_init+0x214>)
 800131a:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <bno055_init+0x218>)
 8001320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <bno055_init+0x21c>)
 8001328:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <bno055_init+0x220>)
 800132e:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <bno055_init+0x224>)
 8001334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <bno055_init+0x228>)
 800133c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <bno055_init+0x22c>)
 8001344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <bno055_init+0x230>)
 800134c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <bno055_init+0x234>)
 8001354:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <bno055_init+0x238>)
 800135c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <bno055_init+0x23c>)
 8001364:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <bno055_init+0x240>)
 800136c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <bno055_init+0x244>)
 8001374:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	08001409 	.word	0x08001409
 8001388:	08001471 	.word	0x08001471
 800138c:	080014f5 	.word	0x080014f5
 8001390:	08001579 	.word	0x08001579
 8001394:	080015fd 	.word	0x080015fd
 8001398:	080016cd 	.word	0x080016cd
 800139c:	08001751 	.word	0x08001751
 80013a0:	080017d5 	.word	0x080017d5
 80013a4:	08001859 	.word	0x08001859
 80013a8:	08001929 	.word	0x08001929
 80013ac:	080019ad 	.word	0x080019ad
 80013b0:	08001a31 	.word	0x08001a31
 80013b4:	08001ab5 	.word	0x08001ab5
 80013b8:	08001b85 	.word	0x08001b85
 80013bc:	08001bf5 	.word	0x08001bf5
 80013c0:	08001c65 	.word	0x08001c65
 80013c4:	08001cd5 	.word	0x08001cd5
 80013c8:	08001d95 	.word	0x08001d95
 80013cc:	08001e19 	.word	0x08001e19
 80013d0:	08001e9d 	.word	0x08001e9d
 80013d4:	08001f21 	.word	0x08001f21
 80013d8:	08001ff1 	.word	0x08001ff1
 80013dc:	08002075 	.word	0x08002075
 80013e0:	080020f9 	.word	0x080020f9
 80013e4:	0800217d 	.word	0x0800217d
 80013e8:	0800224d 	.word	0x0800224d
 80013ec:	080022bd 	.word	0x080022bd
 80013f0:	0800232d 	.word	0x0800232d
 80013f4:	0800239d 	.word	0x0800239d
 80013f8:	0800240d 	.word	0x0800240d
 80013fc:	080024f5 	.word	0x080024f5
 8001400:	080025c5 	.word	0x080025c5
 8001404:	08002693 	.word	0x08002693

08001408 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b0af      	sub	sp, #188	; 0xbc
 800140c:	af2a      	add	r7, sp, #168	; 0xa8
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2301      	movs	r3, #1
 800141a:	9329      	str	r3, [sp, #164]	; 0xa4
 800141c:	f107 030e 	add.w	r3, r7, #14
 8001420:	9328      	str	r3, [sp, #160]	; 0xa0
 8001422:	2334      	movs	r3, #52	; 0x34
 8001424:	9327      	str	r3, [sp, #156]	; 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f006 fffd 	bl	800842e <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f001 fac5 	bl	80029c6 <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_temperature+0x42>
        return err;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	e00d      	b.n	8001466 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7bdb      	ldrb	r3, [r3, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <bno055_temperature+0x54>
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	b25b      	sxtb	r3, r3
 800145a:	e001      	b.n	8001460 <bno055_temperature+0x58>
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
	...

08001470 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b0af      	sub	sp, #188	; 0xbc
 8001474:	af2a      	add	r7, sp, #168	; 0xa8
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800147a:	687c      	ldr	r4, [r7, #4]
 800147c:	2302      	movs	r3, #2
 800147e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	9328      	str	r3, [sp, #160]	; 0xa0
 8001486:	2308      	movs	r3, #8
 8001488:	9327      	str	r3, [sp, #156]	; 0x9c
 800148a:	4668      	mov	r0, sp
 800148c:	f104 0310 	add.w	r3, r4, #16
 8001490:	229c      	movs	r2, #156	; 0x9c
 8001492:	4619      	mov	r1, r3
 8001494:	f006 ffcb 	bl	800842e <memcpy>
 8001498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800149c:	f001 fa93 	bl	80029c6 <bno055_read_regs>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <bno055_acc_x+0x3e>
        return err;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	e01b      	b.n	80014e6 <bno055_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	7b3b      	ldrb	r3, [r7, #12]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc0d 	bl	8000cdc <__aeabi_i2f>
 80014c2:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <bno055_acc_x+0x60>
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <bno055_acc_x+0x80>)
 80014ce:	e001      	b.n	80014d4 <bno055_acc_x+0x64>
 80014d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fd08 	bl	8000eec <__aeabi_fdiv>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80014e4:	2300      	movs	r3, #0
};
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b0af      	sub	sp, #188	; 0xbc
 80014f8:	af2a      	add	r7, sp, #168	; 0xa8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80014fe:	687c      	ldr	r4, [r7, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9329      	str	r3, [sp, #164]	; 0xa4
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	9328      	str	r3, [sp, #160]	; 0xa0
 800150a:	230a      	movs	r3, #10
 800150c:	9327      	str	r3, [sp, #156]	; 0x9c
 800150e:	4668      	mov	r0, sp
 8001510:	f104 0310 	add.w	r3, r4, #16
 8001514:	229c      	movs	r2, #156	; 0x9c
 8001516:	4619      	mov	r1, r3
 8001518:	f006 ff89 	bl	800842e <memcpy>
 800151c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001520:	f001 fa51 	bl	80029c6 <bno055_read_regs>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <bno055_acc_y+0x3e>
        return err;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	e01b      	b.n	800156a <bno055_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fbcb 	bl	8000cdc <__aeabi_i2f>
 8001546:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <bno055_acc_y+0x60>
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <bno055_acc_y+0x80>)
 8001552:	e001      	b.n	8001558 <bno055_acc_y+0x64>
 8001554:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7ff fcc6 	bl	8000eec <__aeabi_fdiv>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001568:	2300      	movs	r3, #0
};
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	42c80000 	.word	0x42c80000

08001578 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b0af      	sub	sp, #188	; 0xbc
 800157c:	af2a      	add	r7, sp, #168	; 0xa8
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001582:	687c      	ldr	r4, [r7, #4]
 8001584:	2302      	movs	r3, #2
 8001586:	9329      	str	r3, [sp, #164]	; 0xa4
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	9328      	str	r3, [sp, #160]	; 0xa0
 800158e:	230c      	movs	r3, #12
 8001590:	9327      	str	r3, [sp, #156]	; 0x9c
 8001592:	4668      	mov	r0, sp
 8001594:	f104 0310 	add.w	r3, r4, #16
 8001598:	229c      	movs	r2, #156	; 0x9c
 800159a:	4619      	mov	r1, r3
 800159c:	f006 ff47 	bl	800842e <memcpy>
 80015a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015a4:	f001 fa0f 	bl	80029c6 <bno055_read_regs>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <bno055_acc_z+0x3e>
        return err;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	e01b      	b.n	80015ee <bno055_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb89 	bl	8000cdc <__aeabi_i2f>
 80015ca:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <bno055_acc_z+0x60>
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <bno055_acc_z+0x80>)
 80015d6:	e001      	b.n	80015dc <bno055_acc_z+0x64>
 80015d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f7ff fc84 	bl	8000eec <__aeabi_fdiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80015ec:	2300      	movs	r3, #0
};
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	42c80000 	.word	0x42c80000

080015fc <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b0b1      	sub	sp, #196	; 0xc4
 8001600:	af2a      	add	r7, sp, #168	; 0xa8
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001606:	687c      	ldr	r4, [r7, #4]
 8001608:	2306      	movs	r3, #6
 800160a:	9329      	str	r3, [sp, #164]	; 0xa4
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	9328      	str	r3, [sp, #160]	; 0xa0
 8001612:	2308      	movs	r3, #8
 8001614:	9327      	str	r3, [sp, #156]	; 0x9c
 8001616:	4668      	mov	r0, sp
 8001618:	f104 0310 	add.w	r3, r4, #16
 800161c:	229c      	movs	r2, #156	; 0x9c
 800161e:	4619      	mov	r1, r3
 8001620:	f006 ff05 	bl	800842e <memcpy>
 8001624:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001628:	f001 f9cd 	bl	80029c6 <bno055_read_regs>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <bno055_acc+0x3e>
        return err;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	e042      	b.n	80016c0 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <bno055_acc+0x4a>
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <bno055_acc+0xcc>)
 8001644:	e001      	b.n	800164a <bno055_acc+0x4e>
 8001646:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800164a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800164c:	7a7b      	ldrb	r3, [r7, #9]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7a3b      	ldrb	r3, [r7, #8]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb3e 	bl	8000cdc <__aeabi_i2f>
 8001660:	4603      	mov	r3, r0
 8001662:	6939      	ldr	r1, [r7, #16]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc41 	bl	8000eec <__aeabi_fdiv>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	7abb      	ldrb	r3, [r7, #10]
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21b      	sxth	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb2b 	bl	8000cdc <__aeabi_i2f>
 8001686:	4603      	mov	r3, r0
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fc2e 	bl	8000eec <__aeabi_fdiv>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fb18 	bl	8000cdc <__aeabi_i2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	6939      	ldr	r1, [r7, #16]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc1b 	bl	8000eec <__aeabi_fdiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80016be:	2300      	movs	r3, #0
};
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	42c80000 	.word	0x42c80000

080016cc <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b0af      	sub	sp, #188	; 0xbc
 80016d0:	af2a      	add	r7, sp, #168	; 0xa8
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80016d6:	687c      	ldr	r4, [r7, #4]
 80016d8:	2302      	movs	r3, #2
 80016da:	9329      	str	r3, [sp, #164]	; 0xa4
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80016e2:	2328      	movs	r3, #40	; 0x28
 80016e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80016e6:	4668      	mov	r0, sp
 80016e8:	f104 0310 	add.w	r3, r4, #16
 80016ec:	229c      	movs	r2, #156	; 0x9c
 80016ee:	4619      	mov	r1, r3
 80016f0:	f006 fe9d 	bl	800842e <memcpy>
 80016f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f8:	f001 f965 	bl	80029c6 <bno055_read_regs>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <bno055_linear_acc_x+0x3e>
        return err;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	e01b      	b.n	8001742 <bno055_linear_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800170a:	7b7b      	ldrb	r3, [r7, #13]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fadf 	bl	8000cdc <__aeabi_i2f>
 800171e:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <bno055_linear_acc_x+0x60>
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <bno055_linear_acc_x+0x80>)
 800172a:	e001      	b.n	8001730 <bno055_linear_acc_x+0x64>
 800172c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7ff fbda 	bl	8000eec <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001740:	2300      	movs	r3, #0
};
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	42c80000 	.word	0x42c80000

08001750 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b0af      	sub	sp, #188	; 0xbc
 8001754:	af2a      	add	r7, sp, #168	; 0xa8
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800175a:	687c      	ldr	r4, [r7, #4]
 800175c:	2302      	movs	r3, #2
 800175e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	9328      	str	r3, [sp, #160]	; 0xa0
 8001766:	232a      	movs	r3, #42	; 0x2a
 8001768:	9327      	str	r3, [sp, #156]	; 0x9c
 800176a:	4668      	mov	r0, sp
 800176c:	f104 0310 	add.w	r3, r4, #16
 8001770:	229c      	movs	r2, #156	; 0x9c
 8001772:	4619      	mov	r1, r3
 8001774:	f006 fe5b 	bl	800842e <memcpy>
 8001778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177c:	f001 f923 	bl	80029c6 <bno055_read_regs>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <bno055_linear_acc_y+0x3e>
        return err;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	e01b      	b.n	80017c6 <bno055_linear_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7b3b      	ldrb	r3, [r7, #12]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa9d 	bl	8000cdc <__aeabi_i2f>
 80017a2:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <bno055_linear_acc_y+0x60>
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <bno055_linear_acc_y+0x80>)
 80017ae:	e001      	b.n	80017b4 <bno055_linear_acc_y+0x64>
 80017b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fb98 	bl	8000eec <__aeabi_fdiv>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80017c4:	2300      	movs	r3, #0
};
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	42c80000 	.word	0x42c80000

080017d4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b0af      	sub	sp, #188	; 0xbc
 80017d8:	af2a      	add	r7, sp, #168	; 0xa8
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80017de:	687c      	ldr	r4, [r7, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80017ea:	232c      	movs	r3, #44	; 0x2c
 80017ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ee:	4668      	mov	r0, sp
 80017f0:	f104 0310 	add.w	r3, r4, #16
 80017f4:	229c      	movs	r2, #156	; 0x9c
 80017f6:	4619      	mov	r1, r3
 80017f8:	f006 fe19 	bl	800842e <memcpy>
 80017fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001800:	f001 f8e1 	bl	80029c6 <bno055_read_regs>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <bno055_linear_acc_z+0x3e>
        return err;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	e01b      	b.n	800184a <bno055_linear_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001812:	7b7b      	ldrb	r3, [r7, #13]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7b3b      	ldrb	r3, [r7, #12]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa5b 	bl	8000cdc <__aeabi_i2f>
 8001826:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <bno055_linear_acc_z+0x60>
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <bno055_linear_acc_z+0x80>)
 8001832:	e001      	b.n	8001838 <bno055_linear_acc_z+0x64>
 8001834:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f7ff fb56 	bl	8000eec <__aeabi_fdiv>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001848:	2300      	movs	r3, #0
};
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	42c80000 	.word	0x42c80000

08001858 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b0b1      	sub	sp, #196	; 0xc4
 800185c:	af2a      	add	r7, sp, #168	; 0xa8
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001862:	687c      	ldr	r4, [r7, #4]
 8001864:	2306      	movs	r3, #6
 8001866:	9329      	str	r3, [sp, #164]	; 0xa4
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	9328      	str	r3, [sp, #160]	; 0xa0
 800186e:	2328      	movs	r3, #40	; 0x28
 8001870:	9327      	str	r3, [sp, #156]	; 0x9c
 8001872:	4668      	mov	r0, sp
 8001874:	f104 0310 	add.w	r3, r4, #16
 8001878:	229c      	movs	r2, #156	; 0x9c
 800187a:	4619      	mov	r1, r3
 800187c:	f006 fdd7 	bl	800842e <memcpy>
 8001880:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001884:	f001 f89f 	bl	80029c6 <bno055_read_regs>
 8001888:	4603      	mov	r3, r0
 800188a:	75fb      	strb	r3, [r7, #23]
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <bno055_linear_acc+0x3e>
        return err;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	e042      	b.n	800191c <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <bno055_linear_acc+0x4a>
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <bno055_linear_acc+0xcc>)
 80018a0:	e001      	b.n	80018a6 <bno055_linear_acc+0x4e>
 80018a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018a6:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80018a8:	7a7b      	ldrb	r3, [r7, #9]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa10 	bl	8000cdc <__aeabi_i2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	6939      	ldr	r1, [r7, #16]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb13 	bl	8000eec <__aeabi_fdiv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f9fd 	bl	8000cdc <__aeabi_i2f>
 80018e2:	4603      	mov	r3, r0
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fb00 	bl	8000eec <__aeabi_fdiv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f9ea 	bl	8000cdc <__aeabi_i2f>
 8001908:	4603      	mov	r3, r0
 800190a:	6939      	ldr	r1, [r7, #16]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff faed 	bl	8000eec <__aeabi_fdiv>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 800191a:	2300      	movs	r3, #0
};
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	42c80000 	.word	0x42c80000

08001928 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b0af      	sub	sp, #188	; 0xbc
 800192c:	af2a      	add	r7, sp, #168	; 0xa8
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001932:	687c      	ldr	r4, [r7, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9329      	str	r3, [sp, #164]	; 0xa4
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	9328      	str	r3, [sp, #160]	; 0xa0
 800193e:	2314      	movs	r3, #20
 8001940:	9327      	str	r3, [sp, #156]	; 0x9c
 8001942:	4668      	mov	r0, sp
 8001944:	f104 0310 	add.w	r3, r4, #16
 8001948:	229c      	movs	r2, #156	; 0x9c
 800194a:	4619      	mov	r1, r3
 800194c:	f006 fd6f 	bl	800842e <memcpy>
 8001950:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001954:	f001 f837 	bl	80029c6 <bno055_read_regs>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <bno055_gyro_x+0x3e>
        return err;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	e01b      	b.n	800199e <bno055_gyro_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001966:	7b7b      	ldrb	r3, [r7, #13]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	7b3b      	ldrb	r3, [r7, #12]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9b1 	bl	8000cdc <__aeabi_i2f>
 800197a:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <bno055_gyro_x+0x62>
 8001984:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001988:	e000      	b.n	800198c <bno055_gyro_x+0x64>
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <bno055_gyro_x+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff faac 	bl	8000eec <__aeabi_fdiv>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800199c:	2300      	movs	r3, #0
};
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	44610000 	.word	0x44610000

080019ac <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b0af      	sub	sp, #188	; 0xbc
 80019b0:	af2a      	add	r7, sp, #168	; 0xa8
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80019b6:	687c      	ldr	r4, [r7, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019c2:	2316      	movs	r3, #22
 80019c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019c6:	4668      	mov	r0, sp
 80019c8:	f104 0310 	add.w	r3, r4, #16
 80019cc:	229c      	movs	r2, #156	; 0x9c
 80019ce:	4619      	mov	r1, r3
 80019d0:	f006 fd2d 	bl	800842e <memcpy>
 80019d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019d8:	f000 fff5 	bl	80029c6 <bno055_read_regs>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <bno055_gyro_y+0x3e>
        return err;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	e01b      	b.n	8001a22 <bno055_gyro_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f96f 	bl	8000cdc <__aeabi_i2f>
 80019fe:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <bno055_gyro_y+0x62>
 8001a08:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a0c:	e000      	b.n	8001a10 <bno055_gyro_y+0x64>
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <bno055_gyro_y+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff fa6a 	bl	8000eec <__aeabi_fdiv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001a20:	2300      	movs	r3, #0
};
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	44610000 	.word	0x44610000

08001a30 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b0af      	sub	sp, #188	; 0xbc
 8001a34:	af2a      	add	r7, sp, #168	; 0xa8
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001a3a:	687c      	ldr	r4, [r7, #4]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a46:	2318      	movs	r3, #24
 8001a48:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a4a:	4668      	mov	r0, sp
 8001a4c:	f104 0310 	add.w	r3, r4, #16
 8001a50:	229c      	movs	r2, #156	; 0x9c
 8001a52:	4619      	mov	r1, r3
 8001a54:	f006 fceb 	bl	800842e <memcpy>
 8001a58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a5c:	f000 ffb3 	bl	80029c6 <bno055_read_regs>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <bno055_gyro_z+0x3e>
        return err;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	e01b      	b.n	8001aa6 <bno055_gyro_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7b3b      	ldrb	r3, [r7, #12]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f92d 	bl	8000cdc <__aeabi_i2f>
 8001a82:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <bno055_gyro_z+0x62>
 8001a8c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a90:	e000      	b.n	8001a94 <bno055_gyro_z+0x64>
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <bno055_gyro_z+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7ff fa28 	bl	8000eec <__aeabi_fdiv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001aa4:	2300      	movs	r3, #0
};
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	44610000 	.word	0x44610000

08001ab4 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b0b1      	sub	sp, #196	; 0xc4
 8001ab8:	af2a      	add	r7, sp, #168	; 0xa8
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001abe:	687c      	ldr	r4, [r7, #4]
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001aca:	2314      	movs	r3, #20
 8001acc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ace:	4668      	mov	r0, sp
 8001ad0:	f104 0310 	add.w	r3, r4, #16
 8001ad4:	229c      	movs	r2, #156	; 0x9c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f006 fca9 	bl	800842e <memcpy>
 8001adc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae0:	f000 ff71 	bl	80029c6 <bno055_read_regs>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	75fb      	strb	r3, [r7, #23]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <bno055_gyro+0x3e>
        return err;
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	e042      	b.n	8001b78 <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <bno055_gyro+0x4c>
 8001afa:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001afe:	e000      	b.n	8001b02 <bno055_gyro+0x4e>
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001b02:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001b04:	7a7b      	ldrb	r3, [r7, #9]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	7a3b      	ldrb	r3, [r7, #8]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8e2 	bl	8000cdc <__aeabi_i2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f9e5 	bl	8000eec <__aeabi_fdiv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	7abb      	ldrb	r3, [r7, #10]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f8cf 	bl	8000cdc <__aeabi_i2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f9d2 	bl	8000eec <__aeabi_fdiv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	7b3b      	ldrb	r3, [r7, #12]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8bc 	bl	8000cdc <__aeabi_i2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	6939      	ldr	r1, [r7, #16]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f9bf 	bl	8000eec <__aeabi_fdiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	44610000 	.word	0x44610000

08001b84 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b0af      	sub	sp, #188	; 0xbc
 8001b88:	af2a      	add	r7, sp, #168	; 0xa8
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b8e:	687c      	ldr	r4, [r7, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b9a:	230e      	movs	r3, #14
 8001b9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b9e:	4668      	mov	r0, sp
 8001ba0:	f104 0310 	add.w	r3, r4, #16
 8001ba4:	229c      	movs	r2, #156	; 0x9c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f006 fc41 	bl	800842e <memcpy>
 8001bac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb0:	f000 ff09 	bl	80029c6 <bno055_read_regs>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <bno055_mag_x+0x3e>
        return err;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	e014      	b.n	8001bec <bno055_mag_x+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001bc2:	7b7b      	ldrb	r3, [r7, #13]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	7b3b      	ldrb	r3, [r7, #12]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f883 	bl	8000cdc <__aeabi_i2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f985 	bl	8000eec <__aeabi_fdiv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b0af      	sub	sp, #188	; 0xbc
 8001bf8:	af2a      	add	r7, sp, #168	; 0xa8
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001bfe:	687c      	ldr	r4, [r7, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c0e:	4668      	mov	r0, sp
 8001c10:	f104 0310 	add.w	r3, r4, #16
 8001c14:	229c      	movs	r2, #156	; 0x9c
 8001c16:	4619      	mov	r1, r3
 8001c18:	f006 fc09 	bl	800842e <memcpy>
 8001c1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c20:	f000 fed1 	bl	80029c6 <bno055_read_regs>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <bno055_mag_y+0x3e>
        return err;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	e014      	b.n	8001c5c <bno055_mag_y+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001c32:	7b7b      	ldrb	r3, [r7, #13]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	7b3b      	ldrb	r3, [r7, #12]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f84b 	bl	8000cdc <__aeabi_i2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f94d 	bl	8000eec <__aeabi_fdiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b0af      	sub	sp, #188	; 0xbc
 8001c68:	af2a      	add	r7, sp, #168	; 0xa8
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c6e:	687c      	ldr	r4, [r7, #4]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c7a:	2312      	movs	r3, #18
 8001c7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c7e:	4668      	mov	r0, sp
 8001c80:	f104 0310 	add.w	r3, r4, #16
 8001c84:	229c      	movs	r2, #156	; 0x9c
 8001c86:	4619      	mov	r1, r3
 8001c88:	f006 fbd1 	bl	800842e <memcpy>
 8001c8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c90:	f000 fe99 	bl	80029c6 <bno055_read_regs>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <bno055_mag_z+0x3e>
        return err;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	e014      	b.n	8001ccc <bno055_mag_z+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	7b3b      	ldrb	r3, [r7, #12]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f813 	bl	8000cdc <__aeabi_i2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f915 	bl	8000eec <__aeabi_fdiv>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b0af      	sub	sp, #188	; 0xbc
 8001cd8:	af2a      	add	r7, sp, #168	; 0xa8
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001cde:	687c      	ldr	r4, [r7, #4]
 8001ce0:	2306      	movs	r3, #6
 8001ce2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cea:	230e      	movs	r3, #14
 8001cec:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cee:	4668      	mov	r0, sp
 8001cf0:	f104 0310 	add.w	r3, r4, #16
 8001cf4:	229c      	movs	r2, #156	; 0x9c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f006 fb99 	bl	800842e <memcpy>
 8001cfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d00:	f000 fe61 	bl	80029c6 <bno055_read_regs>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <bno055_mag+0x3e>
        return err;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	e03c      	b.n	8001d8c <bno055_mag+0xb8>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001d12:	7a7b      	ldrb	r3, [r7, #9]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	7a3b      	ldrb	r3, [r7, #8]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ffdb 	bl	8000cdc <__aeabi_i2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f8dd 	bl	8000eec <__aeabi_fdiv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ffc7 	bl	8000cdc <__aeabi_i2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f8c9 	bl	8000eec <__aeabi_fdiv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001d62:	7b7b      	ldrb	r3, [r7, #13]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffb3 	bl	8000cdc <__aeabi_i2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f8b5 	bl	8000eec <__aeabi_fdiv>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001d8a:	2300      	movs	r3, #0
};
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0b1      	sub	sp, #196	; 0xc4
 8001d98:	af2a      	add	r7, sp, #168	; 0xa8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001daa:	232e      	movs	r3, #46	; 0x2e
 8001dac:	9327      	str	r3, [sp, #156]	; 0x9c
 8001dae:	4668      	mov	r0, sp
 8001db0:	f104 0310 	add.w	r3, r4, #16
 8001db4:	229c      	movs	r2, #156	; 0x9c
 8001db6:	4619      	mov	r1, r3
 8001db8:	f006 fb39 	bl	800842e <memcpy>
 8001dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc0:	f000 fe01 	bl	80029c6 <bno055_read_regs>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <bno055_gravity_x+0x3e>
        return err;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	e01c      	b.n	8001e0c <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <bno055_gravity_x+0x4a>
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <bno055_gravity_x+0x80>)
 8001ddc:	e001      	b.n	8001de2 <bno055_gravity_x+0x4e>
 8001dde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001de2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ff72 	bl	8000cdc <__aeabi_i2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	6939      	ldr	r1, [r7, #16]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f875 	bl	8000eec <__aeabi_fdiv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	42c80000 	.word	0x42c80000

08001e18 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0b1      	sub	sp, #196	; 0xc4
 8001e1c:	af2a      	add	r7, sp, #168	; 0xa8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001e22:	687c      	ldr	r4, [r7, #4]
 8001e24:	2302      	movs	r3, #2
 8001e26:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e2e:	2330      	movs	r3, #48	; 0x30
 8001e30:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e32:	4668      	mov	r0, sp
 8001e34:	f104 0310 	add.w	r3, r4, #16
 8001e38:	229c      	movs	r2, #156	; 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f006 faf7 	bl	800842e <memcpy>
 8001e40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e44:	f000 fdbf 	bl	80029c6 <bno055_read_regs>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <bno055_gravity_y+0x3e>
        return err;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	e01c      	b.n	8001e90 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <bno055_gravity_y+0x4a>
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <bno055_gravity_y+0x80>)
 8001e60:	e001      	b.n	8001e66 <bno055_gravity_y+0x4e>
 8001e62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001e66:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7b3b      	ldrb	r3, [r7, #12]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe ff30 	bl	8000cdc <__aeabi_i2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f833 	bl	8000eec <__aeabi_fdiv>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	42c80000 	.word	0x42c80000

08001e9c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b0b1      	sub	sp, #196	; 0xc4
 8001ea0:	af2a      	add	r7, sp, #168	; 0xa8
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001ea6:	687c      	ldr	r4, [r7, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001eb2:	2332      	movs	r3, #50	; 0x32
 8001eb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001eb6:	4668      	mov	r0, sp
 8001eb8:	f104 0310 	add.w	r3, r4, #16
 8001ebc:	229c      	movs	r2, #156	; 0x9c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f006 fab5 	bl	800842e <memcpy>
 8001ec4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ec8:	f000 fd7d 	bl	80029c6 <bno055_read_regs>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	75fb      	strb	r3, [r7, #23]
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <bno055_gravity_z+0x3e>
        return err;
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	e01c      	b.n	8001f14 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <bno055_gravity_z+0x4a>
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <bno055_gravity_z+0x80>)
 8001ee4:	e001      	b.n	8001eea <bno055_gravity_z+0x4e>
 8001ee6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001eea:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	7b3b      	ldrb	r3, [r7, #12]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe feee 	bl	8000cdc <__aeabi_i2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fff1 	bl	8000eec <__aeabi_fdiv>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	42c80000 	.word	0x42c80000

08001f20 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b0b1      	sub	sp, #196	; 0xc4
 8001f24:	af2a      	add	r7, sp, #168	; 0xa8
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001f2a:	687c      	ldr	r4, [r7, #4]
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f36:	232e      	movs	r3, #46	; 0x2e
 8001f38:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f3a:	4668      	mov	r0, sp
 8001f3c:	f104 0310 	add.w	r3, r4, #16
 8001f40:	229c      	movs	r2, #156	; 0x9c
 8001f42:	4619      	mov	r1, r3
 8001f44:	f006 fa73 	bl	800842e <memcpy>
 8001f48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f4c:	f000 fd3b 	bl	80029c6 <bno055_read_regs>
 8001f50:	4603      	mov	r3, r0
 8001f52:	75fb      	strb	r3, [r7, #23]
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <bno055_gravity+0x3e>
        return err;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	e042      	b.n	8001fe4 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <bno055_gravity+0x4a>
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <bno055_gravity+0xcc>)
 8001f68:	e001      	b.n	8001f6e <bno055_gravity+0x4e>
 8001f6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f6e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001f70:	7a7b      	ldrb	r3, [r7, #9]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	7a3b      	ldrb	r3, [r7, #8]
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe feac 	bl	8000cdc <__aeabi_i2f>
 8001f84:	4603      	mov	r3, r0
 8001f86:	6939      	ldr	r1, [r7, #16]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe ffaf 	bl	8000eec <__aeabi_fdiv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	7abb      	ldrb	r3, [r7, #10]
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fe99 	bl	8000cdc <__aeabi_i2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ff9c 	bl	8000eec <__aeabi_fdiv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	605a      	str	r2, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001fbc:	7b7b      	ldrb	r3, [r7, #13]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	7b3b      	ldrb	r3, [r7, #12]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe86 	bl	8000cdc <__aeabi_i2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	6939      	ldr	r1, [r7, #16]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ff89 	bl	8000eec <__aeabi_fdiv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	42c80000 	.word	0x42c80000

08001ff0 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b0b1      	sub	sp, #196	; 0xc4
 8001ff4:	af2a      	add	r7, sp, #168	; 0xa8
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001ffa:	687c      	ldr	r4, [r7, #4]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	9329      	str	r3, [sp, #164]	; 0xa4
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	9328      	str	r3, [sp, #160]	; 0xa0
 8002006:	231a      	movs	r3, #26
 8002008:	9327      	str	r3, [sp, #156]	; 0x9c
 800200a:	4668      	mov	r0, sp
 800200c:	f104 0310 	add.w	r3, r4, #16
 8002010:	229c      	movs	r2, #156	; 0x9c
 8002012:	4619      	mov	r1, r3
 8002014:	f006 fa0b 	bl	800842e <memcpy>
 8002018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800201c:	f000 fcd3 	bl	80029c6 <bno055_read_regs>
 8002020:	4603      	mov	r3, r0
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	e01c      	b.n	8002068 <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <bno055_euler_yaw+0x4c>
 8002036:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800203a:	e000      	b.n	800203e <bno055_euler_yaw+0x4e>
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800203e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	7b3b      	ldrb	r3, [r7, #12]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe44 	bl	8000cdc <__aeabi_i2f>
 8002054:	4603      	mov	r3, r0
 8002056:	6939      	ldr	r1, [r7, #16]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ff47 	bl	8000eec <__aeabi_fdiv>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	44610000 	.word	0x44610000

08002074 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b0b1      	sub	sp, #196	; 0xc4
 8002078:	af2a      	add	r7, sp, #168	; 0xa8
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 800207e:	687c      	ldr	r4, [r7, #4]
 8002080:	2302      	movs	r3, #2
 8002082:	9329      	str	r3, [sp, #164]	; 0xa4
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	9328      	str	r3, [sp, #160]	; 0xa0
 800208a:	231c      	movs	r3, #28
 800208c:	9327      	str	r3, [sp, #156]	; 0x9c
 800208e:	4668      	mov	r0, sp
 8002090:	f104 0310 	add.w	r3, r4, #16
 8002094:	229c      	movs	r2, #156	; 0x9c
 8002096:	4619      	mov	r1, r3
 8002098:	f006 f9c9 	bl	800842e <memcpy>
 800209c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020a0:	f000 fc91 	bl	80029c6 <bno055_read_regs>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <bno055_euler_roll+0x3e>
        return err;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	e01c      	b.n	80020ec <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <bno055_euler_roll+0x4c>
 80020ba:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80020be:	e000      	b.n	80020c2 <bno055_euler_roll+0x4e>
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80020c2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80020c4:	7b7b      	ldrb	r3, [r7, #13]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	7b3b      	ldrb	r3, [r7, #12]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe02 	bl	8000cdc <__aeabi_i2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	6939      	ldr	r1, [r7, #16]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ff05 	bl	8000eec <__aeabi_fdiv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	44610000 	.word	0x44610000

080020f8 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b0b1      	sub	sp, #196	; 0xc4
 80020fc:	af2a      	add	r7, sp, #168	; 0xa8
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8002102:	687c      	ldr	r4, [r7, #4]
 8002104:	2302      	movs	r3, #2
 8002106:	9329      	str	r3, [sp, #164]	; 0xa4
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	9328      	str	r3, [sp, #160]	; 0xa0
 800210e:	231e      	movs	r3, #30
 8002110:	9327      	str	r3, [sp, #156]	; 0x9c
 8002112:	4668      	mov	r0, sp
 8002114:	f104 0310 	add.w	r3, r4, #16
 8002118:	229c      	movs	r2, #156	; 0x9c
 800211a:	4619      	mov	r1, r3
 800211c:	f006 f987 	bl	800842e <memcpy>
 8002120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002124:	f000 fc4f 	bl	80029c6 <bno055_read_regs>
 8002128:	4603      	mov	r3, r0
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <bno055_euler_pitch+0x3e>
        return err;
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	e01c      	b.n	8002170 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <bno055_euler_pitch+0x4c>
 800213e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002142:	e000      	b.n	8002146 <bno055_euler_pitch+0x4e>
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002146:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	7b3b      	ldrb	r3, [r7, #12]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21b      	sxth	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fdc0 	bl	8000cdc <__aeabi_i2f>
 800215c:	4603      	mov	r3, r0
 800215e:	6939      	ldr	r1, [r7, #16]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fec3 	bl	8000eec <__aeabi_fdiv>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	44610000 	.word	0x44610000

0800217c <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b0b1      	sub	sp, #196	; 0xc4
 8002180:	af2a      	add	r7, sp, #168	; 0xa8
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8002186:	687c      	ldr	r4, [r7, #4]
 8002188:	2306      	movs	r3, #6
 800218a:	9329      	str	r3, [sp, #164]	; 0xa4
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	9328      	str	r3, [sp, #160]	; 0xa0
 8002192:	231a      	movs	r3, #26
 8002194:	9327      	str	r3, [sp, #156]	; 0x9c
 8002196:	4668      	mov	r0, sp
 8002198:	f104 0310 	add.w	r3, r4, #16
 800219c:	229c      	movs	r2, #156	; 0x9c
 800219e:	4619      	mov	r1, r3
 80021a0:	f006 f945 	bl	800842e <memcpy>
 80021a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021a8:	f000 fc0d 	bl	80029c6 <bno055_read_regs>
 80021ac:	4603      	mov	r3, r0
 80021ae:	75fb      	strb	r3, [r7, #23]
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	e042      	b.n	8002240 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <bno055_euler+0x4c>
 80021c2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80021c6:	e000      	b.n	80021ca <bno055_euler+0x4e>
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80021ca:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	7a3b      	ldrb	r3, [r7, #8]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd7e 	bl	8000cdc <__aeabi_i2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fe81 	bl	8000eec <__aeabi_fdiv>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	7abb      	ldrb	r3, [r7, #10]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fd6b 	bl	8000cdc <__aeabi_i2f>
 8002206:	4603      	mov	r3, r0
 8002208:	6939      	ldr	r1, [r7, #16]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fe6e 	bl	8000eec <__aeabi_fdiv>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	601a      	str	r2, [r3, #0]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8002218:	7b7b      	ldrb	r3, [r7, #13]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	b21a      	sxth	r2, r3
 800221e:	7b3b      	ldrb	r3, [r7, #12]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21b      	sxth	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd58 	bl	8000cdc <__aeabi_i2f>
 800222c:	4603      	mov	r3, r0
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fe5b 	bl	8000eec <__aeabi_fdiv>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	605a      	str	r2, [r3, #4]
    return BNO_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	44610000 	.word	0x44610000

0800224c <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b0af      	sub	sp, #188	; 0xbc
 8002250:	af2a      	add	r7, sp, #168	; 0xa8
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8002256:	687c      	ldr	r4, [r7, #4]
 8002258:	2302      	movs	r3, #2
 800225a:	9329      	str	r3, [sp, #164]	; 0xa4
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9328      	str	r3, [sp, #160]	; 0xa0
 8002262:	2320      	movs	r3, #32
 8002264:	9327      	str	r3, [sp, #156]	; 0x9c
 8002266:	4668      	mov	r0, sp
 8002268:	f104 0310 	add.w	r3, r4, #16
 800226c:	229c      	movs	r2, #156	; 0x9c
 800226e:	4619      	mov	r1, r3
 8002270:	f006 f8dd 	bl	800842e <memcpy>
 8002274:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002278:	f000 fba5 	bl	80029c6 <bno055_read_regs>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <bno055_quaternion_w+0x3e>
        return err;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	e014      	b.n	80022b4 <bno055_quaternion_w+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21b      	sxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fd1f 	bl	8000cdc <__aeabi_i2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fe21 	bl	8000eec <__aeabi_fdiv>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}

080022bc <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b0af      	sub	sp, #188	; 0xbc
 80022c0:	af2a      	add	r7, sp, #168	; 0xa8
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80022c6:	687c      	ldr	r4, [r7, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80022d2:	2322      	movs	r3, #34	; 0x22
 80022d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80022d6:	4668      	mov	r0, sp
 80022d8:	f104 0310 	add.w	r3, r4, #16
 80022dc:	229c      	movs	r2, #156	; 0x9c
 80022de:	4619      	mov	r1, r3
 80022e0:	f006 f8a5 	bl	800842e <memcpy>
 80022e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022e8:	f000 fb6d 	bl	80029c6 <bno055_read_regs>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <bno055_quaternion_x+0x3e>
        return err;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	e014      	b.n	8002324 <bno055_quaternion_x+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	b21a      	sxth	r2, r3
 8002300:	7b3b      	ldrb	r3, [r7, #12]
 8002302:	b21b      	sxth	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b21b      	sxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fce7 	bl	8000cdc <__aeabi_i2f>
 800230e:	4603      	mov	r3, r0
 8002310:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fde9 	bl	8000eec <__aeabi_fdiv>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b0af      	sub	sp, #188	; 0xbc
 8002330:	af2a      	add	r7, sp, #168	; 0xa8
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002336:	687c      	ldr	r4, [r7, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9329      	str	r3, [sp, #164]	; 0xa4
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	9328      	str	r3, [sp, #160]	; 0xa0
 8002342:	2324      	movs	r3, #36	; 0x24
 8002344:	9327      	str	r3, [sp, #156]	; 0x9c
 8002346:	4668      	mov	r0, sp
 8002348:	f104 0310 	add.w	r3, r4, #16
 800234c:	229c      	movs	r2, #156	; 0x9c
 800234e:	4619      	mov	r1, r3
 8002350:	f006 f86d 	bl	800842e <memcpy>
 8002354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002358:	f000 fb35 	bl	80029c6 <bno055_read_regs>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <bno055_quaternion_y+0x3e>
        return err;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	e014      	b.n	8002394 <bno055_quaternion_y+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	b21a      	sxth	r2, r3
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	b21b      	sxth	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b21b      	sxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fcaf 	bl	8000cdc <__aeabi_i2f>
 800237e:	4603      	mov	r3, r0
 8002380:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fdb1 	bl	8000eec <__aeabi_fdiv>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b0af      	sub	sp, #188	; 0xbc
 80023a0:	af2a      	add	r7, sp, #168	; 0xa8
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80023a6:	687c      	ldr	r4, [r7, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80023b2:	2326      	movs	r3, #38	; 0x26
 80023b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80023b6:	4668      	mov	r0, sp
 80023b8:	f104 0310 	add.w	r3, r4, #16
 80023bc:	229c      	movs	r2, #156	; 0x9c
 80023be:	4619      	mov	r1, r3
 80023c0:	f006 f835 	bl	800842e <memcpy>
 80023c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c8:	f000 fafd 	bl	80029c6 <bno055_read_regs>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <bno055_quaternion_z+0x3e>
        return err;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	e014      	b.n	8002404 <bno055_quaternion_z+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80023da:	7b7b      	ldrb	r3, [r7, #13]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	7b3b      	ldrb	r3, [r7, #12]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fc77 	bl	8000cdc <__aeabi_i2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fd79 	bl	8000eec <__aeabi_fdiv>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b0b1      	sub	sp, #196	; 0xc4
 8002410:	af2a      	add	r7, sp, #168	; 0xa8
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8002416:	687c      	ldr	r4, [r7, #4]
 8002418:	2308      	movs	r3, #8
 800241a:	9329      	str	r3, [sp, #164]	; 0xa4
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	9328      	str	r3, [sp, #160]	; 0xa0
 8002422:	2320      	movs	r3, #32
 8002424:	9327      	str	r3, [sp, #156]	; 0x9c
 8002426:	4668      	mov	r0, sp
 8002428:	f104 0310 	add.w	r3, r4, #16
 800242c:	229c      	movs	r2, #156	; 0x9c
 800242e:	4619      	mov	r1, r3
 8002430:	f005 fffd 	bl	800842e <memcpy>
 8002434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002438:	f000 fac5 	bl	80029c6 <bno055_read_regs>
 800243c:	4603      	mov	r3, r0
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <bno055_quaternion+0x3e>
        return err;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	e050      	b.n	80024ec <bno055_quaternion+0xe0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800244a:	7b7b      	ldrb	r3, [r7, #13]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	b21a      	sxth	r2, r3
 8002450:	7b3b      	ldrb	r3, [r7, #12]
 8002452:	b21b      	sxth	r3, r3
 8002454:	4313      	orrs	r3, r2
 8002456:	b21b      	sxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fc3f 	bl	8000cdc <__aeabi_i2f>
 800245e:	4603      	mov	r3, r0
 8002460:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fd41 	bl	8000eec <__aeabi_fdiv>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	60da      	str	r2, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	b21b      	sxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b21b      	sxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fc2b 	bl	8000cdc <__aeabi_i2f>
 8002486:	4603      	mov	r3, r0
 8002488:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fd2d 	bl	8000eec <__aeabi_fdiv>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800249a:	7c7b      	ldrb	r3, [r7, #17]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	b21a      	sxth	r2, r3
 80024a0:	7c3b      	ldrb	r3, [r7, #16]
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fc17 	bl	8000cdc <__aeabi_i2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fd19 	bl	8000eec <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	605a      	str	r2, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	7cbb      	ldrb	r3, [r7, #18]
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fc03 	bl	8000cdc <__aeabi_i2f>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fd05 	bl	8000eec <__aeabi_fdiv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	609a      	str	r2, [r3, #8]
    return BNO_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b0af      	sub	sp, #188	; 0xbc
 80024f8:	af2a      	add	r7, sp, #168	; 0xa8
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	70fb      	strb	r3, [r7, #3]
 8002506:	460b      	mov	r3, r1
 8002508:	70bb      	strb	r3, [r7, #2]
 800250a:	4613      	mov	r3, r2
 800250c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800250e:	2101      	movs	r1, #1
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fabb 	bl	8002a8c <bno055_set_page>
 8002516:	4603      	mov	r3, r0
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <bno055_acc_conf+0x30>
        return err;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	e04b      	b.n	80025bc <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002524:	2100      	movs	r1, #0
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f91b 	bl	8002762 <bno055_set_opmode>
 800252c:	4603      	mov	r3, r0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <bno055_acc_conf+0x46>
        return err;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	e040      	b.n	80025bc <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800253a:	200c      	movs	r0, #12
 800253c:	f001 fc48 	bl	8003dd0 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	78bb      	ldrb	r3, [r7, #2]
 8002544:	4313      	orrs	r3, r2
 8002546:	b2da      	uxtb	r2, r3
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	4313      	orrs	r3, r2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002550:	687c      	ldr	r4, [r7, #4]
 8002552:	2301      	movs	r3, #1
 8002554:	9329      	str	r3, [sp, #164]	; 0xa4
 8002556:	f107 030e 	add.w	r3, r7, #14
 800255a:	9328      	str	r3, [sp, #160]	; 0xa0
 800255c:	2308      	movs	r3, #8
 800255e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002560:	4668      	mov	r0, sp
 8002562:	f104 0310 	add.w	r3, r4, #16
 8002566:	229c      	movs	r2, #156	; 0x9c
 8002568:	4619      	mov	r1, r3
 800256a:	f005 ff60 	bl	800842e <memcpy>
 800256e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002572:	f000 fa5e 	bl	8002a32 <bno055_write_regs>
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <bno055_acc_conf+0x90>
        return err;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	e01b      	b.n	80025bc <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8e9 	bl	8002762 <bno055_set_opmode>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <bno055_acc_conf+0xaa>
        return err;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	e00e      	b.n	80025bc <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800259e:	2018      	movs	r0, #24
 80025a0:	f001 fc16 	bl	8003dd0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80025a4:	2100      	movs	r1, #0
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa70 	bl	8002a8c <bno055_set_page>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <bno055_acc_conf+0xc6>
        return err;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	e000      	b.n	80025bc <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b0af      	sub	sp, #188	; 0xbc
 80025c8:	af2a      	add	r7, sp, #168	; 0xa8
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	70fb      	strb	r3, [r7, #3]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70bb      	strb	r3, [r7, #2]
 80025da:	4613      	mov	r3, r2
 80025dc:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80025de:	2101      	movs	r1, #1
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa53 	bl	8002a8c <bno055_set_page>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <bno055_gyr_conf+0x30>
        return err;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	e04a      	b.n	800268a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80025f4:	2100      	movs	r1, #0
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8b3 	bl	8002762 <bno055_set_opmode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <bno055_gyr_conf+0x46>
        return err;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	e03f      	b.n	800268a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800260a:	200c      	movs	r0, #12
 800260c:	f001 fbe0 	bl	8003dd0 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	78bb      	ldrb	r3, [r7, #2]
 8002614:	4313      	orrs	r3, r2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	733b      	strb	r3, [r7, #12]
 800261a:	787b      	ldrb	r3, [r7, #1]
 800261c:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800261e:	687c      	ldr	r4, [r7, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9329      	str	r3, [sp, #164]	; 0xa4
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	9328      	str	r3, [sp, #160]	; 0xa0
 800262a:	230a      	movs	r3, #10
 800262c:	9327      	str	r3, [sp, #156]	; 0x9c
 800262e:	4668      	mov	r0, sp
 8002630:	f104 0310 	add.w	r3, r4, #16
 8002634:	229c      	movs	r2, #156	; 0x9c
 8002636:	4619      	mov	r1, r3
 8002638:	f005 fef9 	bl	800842e <memcpy>
 800263c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002640:	f000 f9f7 	bl	8002a32 <bno055_write_regs>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	e01b      	b.n	800268a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	791b      	ldrb	r3, [r3, #4]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f882 	bl	8002762 <bno055_set_opmode>
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <bno055_gyr_conf+0xa8>
        return err;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	e00e      	b.n	800268a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800266c:	2018      	movs	r0, #24
 800266e:	f001 fbaf 	bl	8003dd0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa09 	bl	8002a8c <bno055_set_page>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <bno055_gyr_conf+0xc4>
        return err;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	e000      	b.n	800268a <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}

08002692 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002692:	b590      	push	{r4, r7, lr}
 8002694:	b0af      	sub	sp, #188	; 0xbc
 8002696:	af2a      	add	r7, sp, #168	; 0xa8
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	4608      	mov	r0, r1
 800269c:	4611      	mov	r1, r2
 800269e:	461a      	mov	r2, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	70fb      	strb	r3, [r7, #3]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70bb      	strb	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80026ac:	2101      	movs	r1, #1
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9ec 	bl	8002a8c <bno055_set_page>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <bno055_mag_conf+0x30>
        return err;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	e04b      	b.n	800275a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f84c 	bl	8002762 <bno055_set_opmode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <bno055_mag_conf+0x46>
        return err;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	e040      	b.n	800275a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80026d8:	200c      	movs	r0, #12
 80026da:	f001 fb79 	bl	8003dd0 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	78bb      	ldrb	r3, [r7, #2]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	787b      	ldrb	r3, [r7, #1]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80026ee:	687c      	ldr	r4, [r7, #4]
 80026f0:	2301      	movs	r3, #1
 80026f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80026f4:	f107 030e 	add.w	r3, r7, #14
 80026f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80026fa:	2309      	movs	r3, #9
 80026fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80026fe:	4668      	mov	r0, sp
 8002700:	f104 0310 	add.w	r3, r4, #16
 8002704:	229c      	movs	r2, #156	; 0x9c
 8002706:	4619      	mov	r1, r3
 8002708:	f005 fe91 	bl	800842e <memcpy>
 800270c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002710:	f000 f98f 	bl	8002a32 <bno055_write_regs>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <bno055_mag_conf+0x90>
        return err;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	e01b      	b.n	800275a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	791b      	ldrb	r3, [r3, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f81a 	bl	8002762 <bno055_set_opmode>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <bno055_mag_conf+0xaa>
        return err;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	e00e      	b.n	800275a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800273c:	2018      	movs	r0, #24
 800273e:	f001 fb47 	bl	8003dd0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f9a1 	bl	8002a8c <bno055_set_page>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <bno055_mag_conf+0xc6>
        return err;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	e000      	b.n	800275a <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b0af      	sub	sp, #188	; 0xbc
 8002766:	af2a      	add	r7, sp, #168	; 0xa8
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800276e:	687c      	ldr	r4, [r7, #4]
 8002770:	2301      	movs	r3, #1
 8002772:	9329      	str	r3, [sp, #164]	; 0xa4
 8002774:	1cfb      	adds	r3, r7, #3
 8002776:	9328      	str	r3, [sp, #160]	; 0xa0
 8002778:	233d      	movs	r3, #61	; 0x3d
 800277a:	9327      	str	r3, [sp, #156]	; 0x9c
 800277c:	4668      	mov	r0, sp
 800277e:	f104 0310 	add.w	r3, r4, #16
 8002782:	229c      	movs	r2, #156	; 0x9c
 8002784:	4619      	mov	r1, r3
 8002786:	f005 fe52 	bl	800842e <memcpy>
 800278a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800278e:	f000 f950 	bl	8002a32 <bno055_write_regs>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	e003      	b.n	80027a8 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80027a0:	2018      	movs	r0, #24
 80027a2:	f001 fb15 	bl	8003dd0 <HAL_Delay>
    return BNO_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b0af      	sub	sp, #188	; 0xbc
 80027b4:	af2a      	add	r7, sp, #168	; 0xa8
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70bb      	strb	r3, [r7, #2]
 80027c6:	4613      	mov	r3, r2
 80027c8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80027ca:	2100      	movs	r1, #0
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffc8 	bl	8002762 <bno055_set_opmode>
 80027d2:	4603      	mov	r3, r0
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <bno055_set_unit+0x30>
        return err;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	e04b      	b.n	8002878 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80027e0:	2100      	movs	r1, #0
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f952 	bl	8002a8c <bno055_set_page>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <bno055_set_unit+0x46>
        return err;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	e040      	b.n	8002878 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	78bb      	ldrb	r3, [r7, #2]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	787b      	ldrb	r3, [r7, #1]
 8002800:	4313      	orrs	r3, r2
 8002802:	b2da      	uxtb	r2, r3
 8002804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002808:	4313      	orrs	r3, r2
 800280a:	b2db      	uxtb	r3, r3
 800280c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800280e:	687c      	ldr	r4, [r7, #4]
 8002810:	2301      	movs	r3, #1
 8002812:	9329      	str	r3, [sp, #164]	; 0xa4
 8002814:	f107 030e 	add.w	r3, r7, #14
 8002818:	9328      	str	r3, [sp, #160]	; 0xa0
 800281a:	233b      	movs	r3, #59	; 0x3b
 800281c:	9327      	str	r3, [sp, #156]	; 0x9c
 800281e:	4668      	mov	r0, sp
 8002820:	f104 0310 	add.w	r3, r4, #16
 8002824:	229c      	movs	r2, #156	; 0x9c
 8002826:	4619      	mov	r1, r3
 8002828:	f005 fe01 	bl	800842e <memcpy>
 800282c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002830:	f000 f8ff 	bl	8002a32 <bno055_write_regs>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <bno055_set_unit+0x92>
        return err;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	e01a      	b.n	8002878 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	78ba      	ldrb	r2, [r7, #2]
 8002846:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	787a      	ldrb	r2, [r7, #1]
 800284c:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002854:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff7d 	bl	8002762 <bno055_set_opmode>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <bno055_set_unit+0xc6>
        return err;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	e000      	b.n	8002878 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b0af      	sub	sp, #188	; 0xbc
 8002884:	af2a      	add	r7, sp, #168	; 0xa8
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002892:	2304      	movs	r3, #4
 8002894:	e04d      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002896:	2100      	movs	r1, #0
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff62 	bl	8002762 <bno055_set_opmode>
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <bno055_set_pwr_mode+0x2c>
        return err;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	e042      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80028ac:	2100      	movs	r1, #0
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8ec 	bl	8002a8c <bno055_set_page>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <bno055_set_pwr_mode+0x42>
        return err;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	e037      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80028c2:	687c      	ldr	r4, [r7, #4]
 80028c4:	2301      	movs	r3, #1
 80028c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80028c8:	1cfb      	adds	r3, r7, #3
 80028ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80028cc:	233e      	movs	r3, #62	; 0x3e
 80028ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80028d0:	4668      	mov	r0, sp
 80028d2:	f104 0310 	add.w	r3, r4, #16
 80028d6:	229c      	movs	r2, #156	; 0x9c
 80028d8:	4619      	mov	r1, r3
 80028da:	f005 fda8 	bl	800842e <memcpy>
 80028de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028e2:	f000 f8a6 	bl	8002a32 <bno055_write_regs>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	e01e      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8c5 	bl	8002a8c <bno055_set_page>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <bno055_set_pwr_mode+0x90>
        return err;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	e010      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff23 	bl	8002762 <bno055_set_opmode>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <bno055_set_pwr_mode+0xaa>
        return err;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	e003      	b.n	8002932 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800292a:	2002      	movs	r0, #2
 800292c:	f001 fa50 	bl	8003dd0 <HAL_Delay>
    return BNO_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}

0800293a <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 800293a:	b590      	push	{r4, r7, lr}
 800293c:	b0af      	sub	sp, #188	; 0xbc
 800293e:	af2a      	add	r7, sp, #168	; 0xa8
 8002940:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8002942:	2320      	movs	r3, #32
 8002944:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002946:	687c      	ldr	r4, [r7, #4]
 8002948:	2301      	movs	r3, #1
 800294a:	9329      	str	r3, [sp, #164]	; 0xa4
 800294c:	f107 030f 	add.w	r3, r7, #15
 8002950:	9328      	str	r3, [sp, #160]	; 0xa0
 8002952:	233f      	movs	r3, #63	; 0x3f
 8002954:	9327      	str	r3, [sp, #156]	; 0x9c
 8002956:	4668      	mov	r0, sp
 8002958:	f104 0310 	add.w	r3, r4, #16
 800295c:	229c      	movs	r2, #156	; 0x9c
 800295e:	4619      	mov	r1, r3
 8002960:	f005 fd65 	bl	800842e <memcpy>
 8002964:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002968:	f000 f863 	bl	8002a32 <bno055_write_regs>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b0af      	sub	sp, #188	; 0xbc
 8002984:	af2a      	add	r7, sp, #168	; 0xa8
 8002986:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 800298c:	687c      	ldr	r4, [r7, #4]
 800298e:	2301      	movs	r3, #1
 8002990:	9329      	str	r3, [sp, #164]	; 0xa4
 8002992:	f107 030f 	add.w	r3, r7, #15
 8002996:	9328      	str	r3, [sp, #160]	; 0xa0
 8002998:	233f      	movs	r3, #63	; 0x3f
 800299a:	9327      	str	r3, [sp, #156]	; 0x9c
 800299c:	4668      	mov	r0, sp
 800299e:	f104 0310 	add.w	r3, r4, #16
 80029a2:	229c      	movs	r2, #156	; 0x9c
 80029a4:	4619      	mov	r1, r3
 80029a6:	f005 fd42 	bl	800842e <memcpy>
 80029aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ae:	f000 f840 	bl	8002a32 <bno055_write_regs>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <bno055_on+0x3e>
    }
    return BNO_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}

080029c6 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80029c6:	b084      	sub	sp, #16
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	f107 0c10 	add.w	ip, r7, #16
 80029d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	b299      	uxth	r1, r3
 80029dc:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2301      	movs	r3, #1
 80029e8:	f002 fb72 	bl	80050d0 <HAL_I2C_Master_Transmit>
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e014      	b.n	8002a24 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80029fa:	6938      	ldr	r0, [r7, #16]
 80029fc:	7dbb      	ldrb	r3, [r7, #22]
 80029fe:	b299      	uxth	r1, r3
 8002a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a10:	f002 fc5c 	bl	80052cc <HAL_I2C_Master_Receive>
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a2e:	b004      	add	sp, #16
 8002a30:	4770      	bx	lr

08002a32 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002a32:	b084      	sub	sp, #16
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	f107 0418 	add.w	r4, r7, #24
 8002a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8002a42:	69b8      	ldr	r0, [r7, #24]
 8002a44:	7fbb      	ldrb	r3, [r7, #30]
 8002a46:	b299      	uxth	r1, r3
 8002a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a52:	b29c      	uxth	r4, r3
 8002a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f04f 35ff 	mov.w	r5, #4294967295
 8002a5e:	9502      	str	r5, [sp, #8]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4623      	mov	r3, r4
 8002a6a:	f002 fe9b 	bl	80057a4 <HAL_I2C_Mem_Write>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a88:	b004      	add	sp, #16
 8002a8a:	4770      	bx	lr

08002a8c <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b0af      	sub	sp, #188	; 0xbc
 8002a90:	af2a      	add	r7, sp, #168	; 0xa8
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7b5a      	ldrb	r2, [r3, #13]
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <bno055_set_page+0x1a>
        return BNO_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e024      	b.n	8002af0 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d901      	bls.n	8002ab0 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002aac:	2302      	movs	r3, #2
 8002aae:	e01f      	b.n	8002af0 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002ab0:	687c      	ldr	r4, [r7, #4]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9329      	str	r3, [sp, #164]	; 0xa4
 8002ab6:	1cfb      	adds	r3, r7, #3
 8002ab8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002aba:	2307      	movs	r3, #7
 8002abc:	9327      	str	r3, [sp, #156]	; 0x9c
 8002abe:	4668      	mov	r0, sp
 8002ac0:	f104 0310 	add.w	r3, r4, #16
 8002ac4:	229c      	movs	r2, #156	; 0x9c
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f005 fcb1 	bl	800842e <memcpy>
 8002acc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ad0:	f7ff ffaf 	bl	8002a32 <bno055_write_regs>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <bno055_set_page+0x56>
        return err;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	e006      	b.n	8002af0 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f001 f971 	bl	8003dd0 <HAL_Delay>
    return BNO_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002afc:	f3bf 8f4f 	dsb	sy
}
 8002b00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <__NVIC_SystemReset+0x24>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b0a:	4904      	ldr	r1, [pc, #16]	; (8002b1c <__NVIC_SystemReset+0x24>)
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_SystemReset+0x28>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b12:	f3bf 8f4f 	dsb	sy
}
 8002b16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <__NVIC_SystemReset+0x20>
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	05fa0004 	.word	0x05fa0004

08002b24 <BNO_GetData>:
extern uint8_t AccX;
//extern uint8_t AccY;
uint8_t CheckFlag=0;
extern CANBufferHandleStruct ApplicationBuff;
extern CANConfigIDTxtypedef pIDtype;
void BNO_GetData() {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	 bno.euler(&bno, &eul);
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <BNO_GetData+0x24>)
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	4907      	ldr	r1, [pc, #28]	; (8002b4c <BNO_GetData+0x28>)
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <BNO_GetData+0x24>)
 8002b32:	4798      	blx	r3
	 bno.acc(&bno, &acc);
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <BNO_GetData+0x24>)
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	4905      	ldr	r1, [pc, #20]	; (8002b50 <BNO_GetData+0x2c>)
 8002b3a:	4803      	ldr	r0, [pc, #12]	; (8002b48 <BNO_GetData+0x24>)
 8002b3c:	4798      	blx	r3
	 currentState=BNO_CHECK_SIGNAL;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <BNO_GetData+0x30>)
 8002b40:	2203      	movs	r2, #3
 8002b42:	701a      	strb	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	2000026c 	.word	0x2000026c
 8002b4c:	20000874 	.word	0x20000874
 8002b50:	20000880 	.word	0x20000880
 8002b54:	20000319 	.word	0x20000319

08002b58 <BNO_CheckSignal>:

void BNO_CheckSignal() {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
//Euler Data
	if(eul.yaw < 360 && eul.yaw > -360){
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4926      	ldr	r1, [pc, #152]	; (8002bfc <BNO_CheckSignal+0xa4>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe faac 	bl	80010c0 <__aeabi_fcmplt>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d031      	beq.n	8002bd2 <BNO_CheckSignal+0x7a>
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4923      	ldr	r1, [pc, #140]	; (8002c00 <BNO_CheckSignal+0xa8>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fac1 	bl	80010fc <__aeabi_fcmpgt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d028      	beq.n	8002bd2 <BNO_CheckSignal+0x7a>
	  if (eul.yaw > 180) {
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	491f      	ldr	r1, [pc, #124]	; (8002c04 <BNO_CheckSignal+0xac>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fab8 	bl	80010fc <__aeabi_fcmpgt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <BNO_CheckSignal+0x50>
		eul.yaw = -(360 - eul.yaw);
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4818      	ldr	r0, [pc, #96]	; (8002bfc <BNO_CheckSignal+0xa4>)
 8002b9a:	f7fd ffe9 	bl	8000b70 <__aeabi_fsub>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002ba6:	6093      	str	r3, [r2, #8]
	}
	 AccX = compress_float_to_uint8(acc.x, -20.0f, 20.0f);
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <BNO_CheckSignal+0xb0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <BNO_CheckSignal+0xb4>)
 8002bae:	4918      	ldr	r1, [pc, #96]	; (8002c10 <BNO_CheckSignal+0xb8>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fb21 	bl	80031f8 <compress_float_to_uint8>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <BNO_CheckSignal+0xbc>)
 8002bbc:	701a      	strb	r2, [r3, #0]
//	 AccY = compress_float_to_uint8(acc.y, -20.0f, 20.0f);
	 float2Bytes(Yaw,eul.yaw);
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <BNO_CheckSignal+0xa0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <BNO_CheckSignal+0xc0>)
 8002bc6:	f000 fb57 	bl	8003278 <float2Bytes>
	 currentState=BNO_SEND_DATA;
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <BNO_CheckSignal+0xc4>)
 8002bcc:	2205      	movs	r2, #5
 8002bce:	701a      	strb	r2, [r3, #0]
	 }
	 else{
	 currentState=BNO_SEND_ERROR;
	 }
	}
}
 8002bd0:	e010      	b.n	8002bf4 <BNO_CheckSignal+0x9c>
	ErrCnt.BNO_Error_DataCounter++;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <BNO_CheckSignal+0xc8>)
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <BNO_CheckSignal+0xc8>)
 8002bdc:	709a      	strb	r2, [r3, #2]
	 if(ErrCnt.BNO_Error_DataCounter==5){
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <BNO_CheckSignal+0xc8>)
 8002be0:	789b      	ldrb	r3, [r3, #2]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d103      	bne.n	8002bee <BNO_CheckSignal+0x96>
		currentState=BNO_RECOVERY;
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <BNO_CheckSignal+0xc4>)
 8002be8:	2206      	movs	r2, #6
 8002bea:	701a      	strb	r2, [r3, #0]
}
 8002bec:	e002      	b.n	8002bf4 <BNO_CheckSignal+0x9c>
	 currentState=BNO_SEND_ERROR;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <BNO_CheckSignal+0xc4>)
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	701a      	strb	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000874 	.word	0x20000874
 8002bfc:	43b40000 	.word	0x43b40000
 8002c00:	c3b40000 	.word	0xc3b40000
 8002c04:	43340000 	.word	0x43340000
 8002c08:	20000880 	.word	0x20000880
 8002c0c:	41a00000 	.word	0x41a00000
 8002c10:	c1a00000 	.word	0xc1a00000
 8002c14:	2000088c 	.word	0x2000088c
 8002c18:	20000870 	.word	0x20000870
 8002c1c:	20000319 	.word	0x20000319
 8002c20:	2000031c 	.word	0x2000031c

08002c24 <BNO_SendError>:

void BNO_SendError() {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
    // Code to handle errors
	if(CAN_Send_Application(&ApplicationBuff, &pIDtype, Data, sizeof(Data))==HAL_OK){
 8002c28:	2308      	movs	r3, #8
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <BNO_SendError+0x4c>)
 8002c2c:	4911      	ldr	r1, [pc, #68]	; (8002c74 <BNO_SendError+0x50>)
 8002c2e:	4812      	ldr	r0, [pc, #72]	; (8002c78 <BNO_SendError+0x54>)
 8002c30:	f000 f949 	bl	8002ec6 <CAN_Send_Application>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <BNO_SendError+0x1e>
			currentState=BNO_GETDATA;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <BNO_SendError+0x58>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
			}
			else{
			currentState=BNO_GETDATA;
			}
		}
}
 8002c40:	e014      	b.n	8002c6c <BNO_SendError+0x48>
			ErrCnt.CAN_Error_SenErrorCounter++;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <BNO_SendError+0x5c>)
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <BNO_SendError+0x5c>)
 8002c4c:	705a      	strb	r2, [r3, #1]
			if(ErrCnt.CAN_Error_SenErrorCounter==3||ErrCnt.CAN_Error_SenErrorCounter==6){
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <BNO_SendError+0x5c>)
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d003      	beq.n	8002c5e <BNO_SendError+0x3a>
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <BNO_SendError+0x5c>)
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d103      	bne.n	8002c66 <BNO_SendError+0x42>
			currentState=BNO_RECOVERY;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <BNO_SendError+0x58>)
 8002c60:	2206      	movs	r2, #6
 8002c62:	701a      	strb	r2, [r3, #0]
}
 8002c64:	e002      	b.n	8002c6c <BNO_SendError+0x48>
			currentState=BNO_GETDATA;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <BNO_SendError+0x58>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000868 	.word	0x20000868
 8002c74:	20000864 	.word	0x20000864
 8002c78:	20000320 	.word	0x20000320
 8002c7c:	20000319 	.word	0x20000319
 8002c80:	2000031c 	.word	0x2000031c

08002c84 <BNO_SendData>:

void BNO_SendData() {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	Data[0]=Yaw[0];
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <BNO_SendData+0x74>)
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <BNO_SendData+0x78>)
 8002c8e:	701a      	strb	r2, [r3, #0]
	Data[1]=Yaw[1];
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <BNO_SendData+0x74>)
 8002c92:	785a      	ldrb	r2, [r3, #1]
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <BNO_SendData+0x78>)
 8002c96:	705a      	strb	r2, [r3, #1]
	Data[2]=Yaw[2];
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <BNO_SendData+0x74>)
 8002c9a:	789a      	ldrb	r2, [r3, #2]
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <BNO_SendData+0x78>)
 8002c9e:	709a      	strb	r2, [r3, #2]
	Data[3]=Yaw[3];
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <BNO_SendData+0x74>)
 8002ca2:	78da      	ldrb	r2, [r3, #3]
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <BNO_SendData+0x78>)
 8002ca6:	70da      	strb	r2, [r3, #3]
	Data[4]=AccX;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <BNO_SendData+0x7c>)
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <BNO_SendData+0x78>)
 8002cae:	711a      	strb	r2, [r3, #4]
	if(CAN_Send_Application(&ApplicationBuff, &pIDtype, Data, sizeof(Data))==HAL_OK){
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <BNO_SendData+0x78>)
 8002cb4:	4913      	ldr	r1, [pc, #76]	; (8002d04 <BNO_SendData+0x80>)
 8002cb6:	4814      	ldr	r0, [pc, #80]	; (8002d08 <BNO_SendData+0x84>)
 8002cb8:	f000 f905 	bl	8002ec6 <CAN_Send_Application>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <BNO_SendData+0x46>
		currentState=BNO_GETDATA;
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <BNO_SendData+0x88>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
		}
		else{
		currentState=BNO_GETDATA;
		}
	}
}
 8002cc8:	e014      	b.n	8002cf4 <BNO_SendData+0x70>
		ErrCnt.CAN_Error_SenDataCounter++;
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <BNO_SendData+0x8c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <BNO_SendData+0x8c>)
 8002cd4:	701a      	strb	r2, [r3, #0]
		if(ErrCnt.CAN_Error_SenDataCounter==3||ErrCnt.CAN_Error_SenDataCounter==6){
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <BNO_SendData+0x8c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d003      	beq.n	8002ce6 <BNO_SendData+0x62>
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <BNO_SendData+0x8c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d103      	bne.n	8002cee <BNO_SendData+0x6a>
			currentState=BNO_RECOVERY;
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <BNO_SendData+0x88>)
 8002ce8:	2206      	movs	r2, #6
 8002cea:	701a      	strb	r2, [r3, #0]
}
 8002cec:	e002      	b.n	8002cf4 <BNO_SendData+0x70>
		currentState=BNO_GETDATA;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <BNO_SendData+0x88>)
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000870 	.word	0x20000870
 8002cfc:	20000868 	.word	0x20000868
 8002d00:	2000088c 	.word	0x2000088c
 8002d04:	20000864 	.word	0x20000864
 8002d08:	20000320 	.word	0x20000320
 8002d0c:	20000319 	.word	0x20000319
 8002d10:	2000031c 	.word	0x2000031c

08002d14 <BNO_Recovery>:

void BNO_Recovery() {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
    // Code for recovery
	if(ErrCnt.BNO_Error_DataCounter==5){
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <BNO_Recovery+0xdc>)
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d111      	bne.n	8002d44 <BNO_Recovery+0x30>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_SET);
 8002d20:	2201      	movs	r2, #1
 8002d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d26:	4833      	ldr	r0, [pc, #204]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d28:	f002 f876 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d32:	4830      	ldr	r0, [pc, #192]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d34:	f002 f870 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d3c:	f001 f848 	bl	8003dd0 <HAL_Delay>
		NVIC_SystemReset();
 8002d40:	f7ff feda 	bl	8002af8 <__NVIC_SystemReset>
	}
	else if(ErrCnt.CAN_Error_SenDataCounter==3){
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <BNO_Recovery+0xdc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d116      	bne.n	8002d7a <BNO_Recovery+0x66>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d52:	4828      	ldr	r0, [pc, #160]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d54:	f002 f860 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d5e:	4825      	ldr	r0, [pc, #148]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d60:	f002 f85a 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002d64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d68:	f001 f832 	bl	8003dd0 <HAL_Delay>
		HAL_CAN_ResetError(&hcan);
 8002d6c:	4822      	ldr	r0, [pc, #136]	; (8002df8 <BNO_Recovery+0xe4>)
 8002d6e:	f001 fd9e 	bl	80048ae <HAL_CAN_ResetError>
		currentState=BNO_GETDATA;
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <BNO_Recovery+0xe8>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
		HAL_Delay(2000);
		NVIC_SystemReset();
	}
}
 8002d78:	e038      	b.n	8002dec <BNO_Recovery+0xd8>
	else if(ErrCnt.CAN_Error_SenErrorCounter==3){
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <BNO_Recovery+0xdc>)
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d116      	bne.n	8002db0 <BNO_Recovery+0x9c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d88:	481a      	ldr	r0, [pc, #104]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d8a:	f002 f845 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <BNO_Recovery+0xe0>)
 8002d96:	f002 f83f 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002d9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d9e:	f001 f817 	bl	8003dd0 <HAL_Delay>
		HAL_CAN_ResetError(&hcan);
 8002da2:	4815      	ldr	r0, [pc, #84]	; (8002df8 <BNO_Recovery+0xe4>)
 8002da4:	f001 fd83 	bl	80048ae <HAL_CAN_ResetError>
		currentState=BNO_GETDATA;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <BNO_Recovery+0xe8>)
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]
}
 8002dae:	e01d      	b.n	8002dec <BNO_Recovery+0xd8>
	else if(ErrCnt.BNO_Error_DataCounter==5||ErrCnt.CAN_Error_SenDataCounter==6||ErrCnt.CAN_Error_SenErrorCounter==6){
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <BNO_Recovery+0xdc>)
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d007      	beq.n	8002dc8 <BNO_Recovery+0xb4>
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <BNO_Recovery+0xdc>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d003      	beq.n	8002dc8 <BNO_Recovery+0xb4>
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <BNO_Recovery+0xdc>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d111      	bne.n	8002dec <BNO_Recovery+0xd8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_SET);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dce:	4809      	ldr	r0, [pc, #36]	; (8002df4 <BNO_Recovery+0xe0>)
 8002dd0:	f002 f822 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dda:	4806      	ldr	r0, [pc, #24]	; (8002df4 <BNO_Recovery+0xe0>)
 8002ddc:	f002 f81c 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002de0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002de4:	f000 fff4 	bl	8003dd0 <HAL_Delay>
		NVIC_SystemReset();
 8002de8:	f7ff fe86 	bl	8002af8 <__NVIC_SystemReset>
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000031c 	.word	0x2000031c
 8002df4:	40010c00 	.word	0x40010c00
 8002df8:	200001f0 	.word	0x200001f0
 8002dfc:	20000319 	.word	0x20000319

08002e00 <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b096      	sub	sp, #88	; 0x58
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	2247      	movs	r2, #71	; 0x47
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f005 fa6e 	bl	80082f2 <memset>
	Buffer->StdID=0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	721a      	strb	r2, [r3, #8]
	Buffer->Buffer_Index = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Buffer->SenderID = 0;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Buffer->RecvID = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	Buffer->FrameType_Index = SET_UP_FRAME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Buffer->PacketDataLength = 0;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	Buffer->CRCValue = 0;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	Buffer->NumberOfFrame=0;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	memset(Buffer->Data,0,sizeof(Buffer->Data));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2208      	movs	r2, #8
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fa49 	bl	80082f2 <memset>
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3309      	adds	r3, #9
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fa42 	bl	80082f2 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3350      	adds	r3, #80	; 0x50
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	2155      	movs	r1, #85	; 0x55
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 fa3b 	bl	80082f2 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3390      	adds	r3, #144	; 0x90
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 fa34 	bl	80082f2 <memset>
	for (int i = 0; i < 16; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e8e:	e012      	b.n	8002eb6 <CANBufferHandleStruct_Init+0xb6>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	33d0      	adds	r3, #208	; 0xd0
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	f107 010c 	add.w	r1, r7, #12
 8002ea8:	2247      	movs	r2, #71	; 0x47
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 fabf 	bl	800842e <memcpy>
	for (int i = 0; i < 16; i++) {
 8002eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	2b0f      	cmp	r3, #15
 8002eba:	dde9      	ble.n	8002e90 <CANBufferHandleStruct_Init+0x90>
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3758      	adds	r7, #88	; 0x58
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <CAN_Send_Application>:
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
	}
}

uint8_t CAN_Send_Application(CANBufferHandleStruct *AppBuffer,
		CANConfigIDTxtypedef *pStID, uint8_t *Data, uint8_t DataLength) {
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	70fb      	strb	r3, [r7, #3]
	return CAN_Send_Network_Packet(AppBuffer, Data, DataLength, pStID);
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f805 	bl	8002eea <CAN_Send_Network_Packet>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <CAN_Send_Network_Packet>:

uint8_t CAN_Send_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pStID) {
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	71fb      	strb	r3, [r7, #7]
	TxBuffer->PacketDataLength = DataLength + 2;
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	3302      	adds	r3, #2
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	TxBuffer->CRCValue = crc_8(Data, DataLength);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68b8      	ldr	r0, [r7, #8]
 8002f0e:	f000 f9c2 	bl	8003296 <crc_8>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	TxBuffer->Buffer_Index = DataLength;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	if (TxBuffer->PacketDataLength % 8 == 0) {
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f993 30d0 	ldrsb.w	r3, [r3, #208]	; 0xd0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <CAN_Send_Network_Packet+0x66>
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f993 30d0 	ldrsb.w	r3, [r3, #208]	; 0xd0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da00      	bge.n	8002f42 <CAN_Send_Network_Packet+0x58>
 8002f40:	3307      	adds	r3, #7
 8002f42:	10db      	asrs	r3, r3, #3
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002f4e:	e00d      	b.n	8002f6c <CAN_Send_Network_Packet+0x82>
	} else {
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8) + 1;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f993 30d0 	ldrsb.w	r3, [r3, #208]	; 0xd0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da00      	bge.n	8002f5c <CAN_Send_Network_Packet+0x72>
 8002f5a:	3307      	adds	r3, #7
 8002f5c:	10db      	asrs	r3, r3, #3
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3309      	adds	r3, #9
 8002f70:	79fa      	ldrb	r2, [r7, #7]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f005 fa5a 	bl	800842e <memcpy>
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
			TxBuffer->PacketDataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f993 20d0 	ldrsb.w	r2, [r3, #208]	; 0xd0
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002f86:	4619      	mov	r1, r3
			TxBuffer->PacketDataLength;
 8002f88:	b2d2      	uxtb	r2, r2
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	725a      	strb	r2, [r3, #9]
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = TxBuffer->CRCValue;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002f96:	3301      	adds	r3, #1
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f892 10d1 	ldrb.w	r1, [r2, #209]	; 0xd1
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	725a      	strb	r2, [r3, #9]
	TxBuffer->Buffer_Index = 0;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	return CAN_Send_DataLink_Separate(TxBuffer, Data, pStID);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f805 	bl	8002fc2 <CAN_Send_DataLink_Separate>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <CAN_Send_DataLink_Separate>:
uint8_t CAN_Send_DataLink_Separate(CANBufferHandleStruct *TxBuffer,
		uint8_t *Data, CANConfigIDTxtypedef *pStID) {
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
	uint8_t PacketLength = TxBuffer->PacketDataLength;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f993 30d0 	ldrsb.w	r3, [r3, #208]	; 0xd0
 8002fd4:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002fdc:	75fb      	strb	r3, [r7, #23]
	TxBuffer->Buffer[NumberOfFrame - 1][6] = PacketLength;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	7ffa      	ldrb	r2, [r7, #31]
 8002fea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	TxBuffer->Buffer[NumberOfFrame - 1][7] = TxBuffer->CRCValue;
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	f892 10d1 	ldrb.w	r1, [r2, #209]	; 0xd1
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	460a      	mov	r2, r1
 8003000:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	for (int i = 0; i < NumberOfFrame; i++) {
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	e034      	b.n	8003074 <CAN_Send_DataLink_Separate+0xb2>
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003012:	e022      	b.n	800305a <CAN_Send_DataLink_Separate+0x98>
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800301e:	4413      	add	r3, r2
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8003026:	4610      	mov	r0, r2
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	7a59      	ldrb	r1, [r3, #9]
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	4403      	add	r3, r0
 8003038:	3350      	adds	r3, #80	; 0x50
 800303a:	460a      	mov	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
			PacketLength--;
 800303e:	7ffb      	ldrb	r3, [r7, #31]
 8003040:	3b01      	subs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
			if (PacketLength == 2) {
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d00d      	beq.n	8003066 <CAN_Send_DataLink_Separate+0xa4>
				TxBuffer->Buffer_Index++) {
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003050:	3301      	adds	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003060:	2b07      	cmp	r3, #7
 8003062:	d9d7      	bls.n	8003014 <CAN_Send_DataLink_Separate+0x52>
 8003064:	e000      	b.n	8003068 <CAN_Send_DataLink_Separate+0xa6>
				break;
 8003066:	bf00      	nop
			}
		}
		if (PacketLength == 2) {
 8003068:	7ffb      	ldrb	r3, [r7, #31]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d007      	beq.n	800307e <CAN_Send_DataLink_Separate+0xbc>
	for (int i = 0; i < NumberOfFrame; i++) {
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3301      	adds	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	dbc6      	blt.n	800300a <CAN_Send_DataLink_Separate+0x48>
 800307c:	e000      	b.n	8003080 <CAN_Send_DataLink_Separate+0xbe>
			break;
 800307e:	bf00      	nop
		}
	}
	TxBuffer->Buffer_Index = 0;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	return CAN_Send_Physical_Send(TxBuffer, Data, pStID);
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f805 	bl	800309c <CAN_Send_Physical_Send>
 8003092:	4603      	mov	r3, r0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <CAN_Send_Physical_Send>:
uint8_t CAN_Send_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		CANConfigIDTxtypedef *pIDtype) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	uint32_t Txmailbox;
	CAN_TxHeaderTypeDef Txheader;
	uint8_t Message_ID = pIDtype->MessageType;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t Sender_ID = pIDtype->SenderID;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	885b      	ldrh	r3, [r3, #2]
 80030b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t FrameType = TxBuffer->FrameType_Index;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80030be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80030c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t StdId = 0x00;
 80030cc:	2300      	movs	r3, #0
 80030ce:	86bb      	strh	r3, [r7, #52]	; 0x34

	StdId |= Message_ID;
 80030d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030d8:	4313      	orrs	r3, r2
 80030da:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 4) | Sender_ID;
 80030dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	b21a      	sxth	r2, r3
 80030e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	86bb      	strh	r3, [r7, #52]	; 0x34
	TxBuffer->SenderID = StdId;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;
 80030f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003102:	b21b      	sxth	r3, r3
 8003104:	4313      	orrs	r3, r2
 8003106:	b21b      	sxth	r3, r3
 8003108:	86bb      	strh	r3, [r7, #52]	; 0x34
	Txheader.DLC = 8;
 800310a:	2308      	movs	r3, #8
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR = CAN_RTR_DATA;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
	Txheader.IDE = CAN_ID_STD;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]

	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8003116:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800311a:	3b01      	subs	r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003122:	e034      	b.n	800318e <CAN_Send_Physical_Send+0xf2>
		Txheader.StdId = StdId;
 8003124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003126:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
 8003128:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800312c:	330a      	adds	r3, #10
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	441a      	add	r2, r3
 8003134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003138:	f107 0114 	add.w	r1, r7, #20
 800313c:	4818      	ldr	r0, [pc, #96]	; (80031a0 <CAN_Send_Physical_Send+0x104>)
 800313e:	f001 f873 	bl	8004228 <HAL_CAN_AddTxMessage>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <CAN_Send_Physical_Send+0xb0>
				&Txmailbox) != HAL_OK) {
			Error_Handler();
 8003148:	f000 fba7 	bl	800389a <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 800314c:	bf00      	nop
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	4619      	mov	r1, r3
 8003152:	4813      	ldr	r0, [pc, #76]	; (80031a0 <CAN_Send_Physical_Send+0x104>)
 8003154:	f001 f937 	bl	80043c6 <HAL_CAN_IsTxMessagePending>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f7      	bne.n	800314e <CAN_Send_Physical_Send+0xb2>
			;

		StdId = StdId >> 3;
 800315e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	86bb      	strh	r3, [r7, #52]	; 0x34
		FrameType++;
 8003164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003168:	3301      	adds	r3, #1
 800316a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		StdId = (StdId << 3) | FrameType;
 800316e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	b21a      	sxth	r2, r3
 8003174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003178:	b21b      	sxth	r3, r3
 800317a:	4313      	orrs	r3, r2
 800317c:	b21b      	sxth	r3, r3
 800317e:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8003180:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800318e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003192:	2b00      	cmp	r3, #0
 8003194:	dac6      	bge.n	8003124 <CAN_Send_Physical_Send+0x88>

	}
	return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3738      	adds	r7, #56	; 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200001f0 	.word	0x200001f0

080031a4 <CAN_Config_filtering>:
		*FlagNotification = REC_SUCCESS;
	}
	return HAL_OK;
}

uint32_t CAN_Config_filtering(uint8_t FIFO) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	4619      	mov	r1, r3
 80031d8:	4806      	ldr	r0, [pc, #24]	; (80031f4 <CAN_Config_filtering+0x50>)
 80031da:	f000 ff18 	bl	800400e <HAL_CAN_ConfigFilter>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <CAN_Config_filtering+0x44>
		Error_Handler();
 80031e4:	f000 fb59 	bl	800389a <Error_Handler>
	}
	return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200001f0 	.word	0x200001f0

080031f8 <compress_float_to_uint8>:
uint8_t compress_float_to_uint8(float value, float minRange, float maxRange) {
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
    if (value < minRange) {
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7fd ff5a 	bl	80010c0 <__aeabi_fcmplt>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <compress_float_to_uint8+0x1e>
        return 0;
 8003212:	2300      	movs	r3, #0
 8003214:	e029      	b.n	800326a <compress_float_to_uint8+0x72>
    } else if (value > maxRange) {
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7fd ff6f 	bl	80010fc <__aeabi_fcmpgt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <compress_float_to_uint8+0x30>
        return 255;
 8003224:	23ff      	movs	r3, #255	; 0xff
 8003226:	e020      	b.n	800326a <compress_float_to_uint8+0x72>
    } else {
        float normalizedValue = (value - minRange) / (maxRange - minRange);
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7fd fca0 	bl	8000b70 <__aeabi_fsub>
 8003230:	4603      	mov	r3, r0
 8003232:	461c      	mov	r4, r3
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fc9a 	bl	8000b70 <__aeabi_fsub>
 800323c:	4603      	mov	r3, r0
 800323e:	4619      	mov	r1, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f7fd fe53 	bl	8000eec <__aeabi_fdiv>
 8003246:	4603      	mov	r3, r0
 8003248:	617b      	str	r3, [r7, #20]
        return (uint8_t)(normalizedValue * 255.0f + 0.5f);
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <compress_float_to_uint8+0x7c>)
 800324c:	6978      	ldr	r0, [r7, #20]
 800324e:	f7fd fd99 	bl	8000d84 <__aeabi_fmul>
 8003252:	4603      	mov	r3, r0
 8003254:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fc8b 	bl	8000b74 <__addsf3>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd ff55 	bl	8001110 <__aeabi_f2uiz>
 8003266:	4603      	mov	r3, r0
 8003268:	b2db      	uxtb	r3, r3
    }
}
 800326a:	4618      	mov	r0, r3
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	bf00      	nop
 8003274:	437f0000 	.word	0x437f0000

08003278 <float2Bytes>:

void float2Bytes( uint8_t bytes_temp[4],float float_variable){
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  union {
    float a;
    unsigned char bytes[4];
  } thing;
  thing.a = float_variable;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
  memcpy(bytes_temp, thing.bytes, 4);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e023      	b.n	80032f4 <crc_8+0x5e>
    crc ^= (*data << 8);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	461a      	mov	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4053      	eors	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80032ba:	2308      	movs	r3, #8
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	e010      	b.n	80032e2 <crc_8+0x4c>
      if (crc & 0x8000)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 80032d0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80032d4:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	3b01      	subs	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1eb      	bne.n	80032c0 <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3301      	adds	r3, #1
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1d8      	bne.n	80032ac <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b2db      	uxtb	r3, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
	...

0800330c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <MX_CAN_Init+0x64>)
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <MX_CAN_Init+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <MX_CAN_Init+0x64>)
 8003318:	2204      	movs	r2, #4
 800331a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <MX_CAN_Init+0x64>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <MX_CAN_Init+0x64>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <MX_CAN_Init+0x64>)
 800332a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800332e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <MX_CAN_Init+0x64>)
 8003332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003336:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <MX_CAN_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <MX_CAN_Init+0x64>)
 8003340:	2200      	movs	r2, #0
 8003342:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <MX_CAN_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <MX_CAN_Init+0x64>)
 800334c:	2200      	movs	r2, #0
 800334e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <MX_CAN_Init+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <MX_CAN_Init+0x64>)
 8003358:	2200      	movs	r2, #0
 800335a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800335c:	4804      	ldr	r0, [pc, #16]	; (8003370 <MX_CAN_Init+0x64>)
 800335e:	f000 fd5b 	bl	8003e18 <HAL_CAN_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003368:	f000 fa97 	bl	800389a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200001f0 	.word	0x200001f0
 8003374:	40006400 	.word	0x40006400

08003378 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a24      	ldr	r2, [pc, #144]	; (8003424 <HAL_CAN_MspInit+0xac>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d141      	bne.n	800341c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 800339e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a2:	61d3      	str	r3, [r2, #28]
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6193      	str	r3, [r2, #24]
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_CAN_MspInit+0xb0>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 0310 	add.w	r3, r7, #16
 80033da:	4619      	mov	r1, r3
 80033dc:	4813      	ldr	r0, [pc, #76]	; (800342c <HAL_CAN_MspInit+0xb4>)
 80033de:	f001 fb97 	bl	8004b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	4619      	mov	r1, r3
 80033f6:	480d      	ldr	r0, [pc, #52]	; (800342c <HAL_CAN_MspInit+0xb4>)
 80033f8:	f001 fb8a 	bl	8004b10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	2013      	movs	r0, #19
 8003402:	f001 fb4e 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003406:	2013      	movs	r0, #19
 8003408:	f001 fb67 	bl	8004ada <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	2014      	movs	r0, #20
 8003412:	f001 fb46 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003416:	2014      	movs	r0, #20
 8003418:	f001 fb5f 	bl	8004ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800341c:	bf00      	nop
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40006400 	.word	0x40006400
 8003428:	40021000 	.word	0x40021000
 800342c:	40010800 	.word	0x40010800

08003430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003436:	f107 0310 	add.w	r3, r7, #16
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a35      	ldr	r2, [pc, #212]	; (8003520 <MX_GPIO_Init+0xf0>)
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <MX_GPIO_Init+0xf0>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003462:	f043 0320 	orr.w	r3, r3, #32
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <MX_GPIO_Init+0xf0>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <MX_GPIO_Init+0xf0>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6193      	str	r3, [r2, #24]
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <MX_GPIO_Init+0xf0>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <MX_GPIO_Init+0xf0>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <MX_GPIO_Init+0xf0>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80034a4:	2200      	movs	r2, #0
 80034a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034aa:	481e      	ldr	r0, [pc, #120]	; (8003524 <MX_GPIO_Init+0xf4>)
 80034ac:	f001 fcb4 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 80034b0:	2201      	movs	r2, #1
 80034b2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034b6:	481c      	ldr	r0, [pc, #112]	; (8003528 <MX_GPIO_Init+0xf8>)
 80034b8:	f001 fcae 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	4619      	mov	r1, r3
 80034d4:	4813      	ldr	r0, [pc, #76]	; (8003524 <MX_GPIO_Init+0xf4>)
 80034d6:	f001 fb1b 	bl	8004b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e0:	2301      	movs	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	; (8003528 <MX_GPIO_Init+0xf8>)
 80034f4:	f001 fb0c 	bl	8004b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fe:	2301      	movs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2302      	movs	r3, #2
 8003508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	4619      	mov	r1, r3
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <MX_GPIO_Init+0xf8>)
 8003512:	f001 fafd 	bl	8004b10 <HAL_GPIO_Init>

}
 8003516:	bf00      	nop
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40011000 	.word	0x40011000
 8003528:	40010c00 	.word	0x40010c00

0800352c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <MX_I2C1_Init+0x50>)
 8003532:	4a13      	ldr	r2, [pc, #76]	; (8003580 <MX_I2C1_Init+0x54>)
 8003534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_I2C1_Init+0x50>)
 8003538:	4a12      	ldr	r2, [pc, #72]	; (8003584 <MX_I2C1_Init+0x58>)
 800353a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <MX_I2C1_Init+0x50>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_I2C1_Init+0x50>)
 8003544:	2200      	movs	r2, #0
 8003546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_I2C1_Init+0x50>)
 800354a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800354e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <MX_I2C1_Init+0x50>)
 8003552:	2200      	movs	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_I2C1_Init+0x50>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <MX_I2C1_Init+0x50>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_I2C1_Init+0x50>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <MX_I2C1_Init+0x50>)
 800356a:	f001 fc6d 	bl	8004e48 <HAL_I2C_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003574:	f000 f991 	bl	800389a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000218 	.word	0x20000218
 8003580:	40005400 	.word	0x40005400
 8003584:	000186a0 	.word	0x000186a0

08003588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_I2C_MspInit+0x70>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d123      	bne.n	80035f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c4:	2312      	movs	r3, #18
 80035c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	4619      	mov	r1, r3
 80035d2:	480b      	ldr	r0, [pc, #44]	; (8003600 <HAL_I2C_MspInit+0x78>)
 80035d4:	f001 fa9c 	bl	8004b10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_I2C_MspInit+0x74>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035f0:	bf00      	nop
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40005400 	.word	0x40005400
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010c00 	.word	0x40010c00

08003604 <__NVIC_SystemReset>:
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003608:	f3bf 8f4f 	dsb	sy
}
 800360c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <__NVIC_SystemReset+0x24>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003616:	4904      	ldr	r1, [pc, #16]	; (8003628 <__NVIC_SystemReset+0x24>)
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <__NVIC_SystemReset+0x28>)
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800361e:	f3bf 8f4f 	dsb	sy
}
 8003622:	bf00      	nop
    __NOP();
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <__NVIC_SystemReset+0x20>
 8003628:	e000ed00 	.word	0xe000ed00
 800362c:	05fa0004 	.word	0x05fa0004

08003630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0b0      	sub	sp, #192	; 0xc0
 8003634:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003636:	f000 fb69 	bl	8003d0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800363a:	f000 f8e9 	bl	8003810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800363e:	f7ff fef7 	bl	8003430 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003642:	f7ff ff73 	bl	800352c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003646:	f000 fab1 	bl	8003bac <MX_USART1_UART_Init>
  MX_CAN_Init();
 800364a:	f7ff fe5f 	bl	800330c <MX_CAN_Init>
  MX_TIM3_Init();
 800364e:	f000 fa41 	bl	8003ad4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
currentState=BNO_INIT;
 8003652:	4b66      	ldr	r3, [pc, #408]	; (80037ec <main+0x1bc>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
if(currentState==BNO_INIT){
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <main+0x1bc>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 809e 	bne.w	800379e <main+0x16e>
  CAN_Config_filtering(0);
 8003662:	2000      	movs	r0, #0
 8003664:	f7ff fd9e 	bl	80031a4 <CAN_Config_filtering>
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8003668:	2103      	movs	r1, #3
 800366a:	4861      	ldr	r0, [pc, #388]	; (80037f0 <main+0x1c0>)
 800366c:	f000 fece 	bl	800440c <HAL_CAN_ActivateNotification>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <main+0x5e>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8003676:	2200      	movs	r2, #0
 8003678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800367c:	485d      	ldr	r0, [pc, #372]	; (80037f4 <main+0x1c4>)
 800367e:	f001 fbcb 	bl	8004e18 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8003682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003686:	f000 fba3 	bl	8003dd0 <HAL_Delay>
	  NVIC_SystemReset();
 800368a:	f7ff ffbb 	bl	8003604 <__NVIC_SystemReset>
   }
    if(HAL_CAN_Start(&hcan)!=HAL_OK){
 800368e:	4858      	ldr	r0, [pc, #352]	; (80037f0 <main+0x1c0>)
 8003690:	f000 fd86 	bl	80041a0 <HAL_CAN_Start>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <main+0x82>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a0:	4854      	ldr	r0, [pc, #336]	; (80037f4 <main+0x1c4>)
 80036a2:	f001 fbb9 	bl	8004e18 <HAL_GPIO_WritePin>
    	HAL_Delay(2000);
 80036a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036aa:	f000 fb91 	bl	8003dd0 <HAL_Delay>
    	NVIC_SystemReset();
 80036ae:	f7ff ffa9 	bl	8003604 <__NVIC_SystemReset>
   }
	bno = (bno055_t ) { .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU,
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <main+0x1c8>)
 80036b4:	4618      	mov	r0, r3
 80036b6:	23ac      	movs	r3, #172	; 0xac
 80036b8:	461a      	mov	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	f004 fe19 	bl	80082f2 <memset>
 80036c0:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <main+0x1c8>)
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <main+0x1cc>)
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <main+0x1c8>)
 80036c8:	2208      	movs	r2, #8
 80036ca:	711a      	strb	r2, [r3, #4]
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <main+0x1c8>)
 80036ce:	2229      	movs	r2, #41	; 0x29
 80036d0:	719a      	strb	r2, [r3, #6]
					._temp_unit = 0,
			};
	HAL_Delay(1000);
 80036d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036d6:	f000 fb7b 	bl	8003dd0 <HAL_Delay>
	if ((err = bno055_init(&bno)) == BNO_OK) {
 80036da:	4847      	ldr	r0, [pc, #284]	; (80037f8 <main+0x1c8>)
 80036dc:	f7fd fd70 	bl	80011c0 <bno055_init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <main+0x1d0>)
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	4b45      	ldr	r3, [pc, #276]	; (8003800 <main+0x1d0>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <main+0xee>
		HAL_Delay(100);
 80036f0:	2064      	movs	r0, #100	; 0x64
 80036f2:	f000 fb6d 	bl	8003dd0 <HAL_Delay>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
		HAL_Delay(2000);
		NVIC_SystemReset();
	}
	HAL_Delay(100);
 80036f6:	2064      	movs	r0, #100	; 0x64
 80036f8:	f000 fb6a 	bl	8003dd0 <HAL_Delay>
	err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 80036fc:	2300      	movs	r3, #0
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	483c      	ldr	r0, [pc, #240]	; (80037f8 <main+0x1c8>)
 8003708:	f7ff f852 	bl	80027b0 <bno055_set_unit>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <main+0x1d0>)
 8003712:	701a      	strb	r2, [r3, #0]
			BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
	if (err != BNO_OK) {
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <main+0x1d0>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d018      	beq.n	800374e <main+0x11e>
 800371c:	e00b      	b.n	8003736 <main+0x106>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800371e:	2200      	movs	r2, #0
 8003720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003724:	4833      	ldr	r0, [pc, #204]	; (80037f4 <main+0x1c4>)
 8003726:	f001 fb77 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 800372a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800372e:	f000 fb4f 	bl	8003dd0 <HAL_Delay>
		NVIC_SystemReset();
 8003732:	f7ff ff67 	bl	8003604 <__NVIC_SystemReset>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800373c:	482d      	ldr	r0, [pc, #180]	; (80037f4 <main+0x1c4>)
 800373e:	f001 fb6b 	bl	8004e18 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8003742:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003746:	f000 fb43 	bl	8003dd0 <HAL_Delay>
		NVIC_SystemReset();
 800374a:	f7ff ff5b 	bl	8003604 <__NVIC_SystemReset>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,GPIO_PIN_RESET);
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003754:	4827      	ldr	r0, [pc, #156]	; (80037f4 <main+0x1c4>)
 8003756:	f001 fb5f 	bl	8004e18 <HAL_GPIO_WritePin>
		currentState=BNO_GETDATA;
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <main+0x1bc>)
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
	}
	  bno055_vec3_t acc = {0, 0, 0};
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	memset(Data,0x55,8);
 8003778:	2208      	movs	r2, #8
 800377a:	2155      	movs	r1, #85	; 0x55
 800377c:	4821      	ldr	r0, [pc, #132]	; (8003804 <main+0x1d4>)
 800377e:	f004 fdb8 	bl	80082f2 <memset>
	CANBufferHandleStruct_Init(&ApplicationBuff);
 8003782:	4821      	ldr	r0, [pc, #132]	; (8003808 <main+0x1d8>)
 8003784:	f7ff fb3c 	bl	8002e00 <CANBufferHandleStruct_Init>
	pIDtype.MessageType=0;
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <main+0x1dc>)
 800378a:	2200      	movs	r2, #0
 800378c:	801a      	strh	r2, [r3, #0]
	pIDtype.SenderID=0x305;
 800378e:	4b1f      	ldr	r3, [pc, #124]	; (800380c <main+0x1dc>)
 8003790:	f240 3205 	movw	r2, #773	; 0x305
 8003794:	805a      	strh	r2, [r3, #2]
	HAL_Delay(1000);
 8003796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800379a:	f000 fb19 	bl	8003dd0 <HAL_Delay>
//					  eul.yaw = -(360 - eul.yaw);
//				  }
//
//				  float2Bytes(Data,eul.yaw);
//				  CAN_HandleSendData(0x302,Data, 8);
				  switch (currentState) {
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <main+0x1bc>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3b02      	subs	r3, #2
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d81c      	bhi.n	80037e2 <main+0x1b2>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <main+0x180>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037c5 	.word	0x080037c5
 80037b4:	080037cb 	.word	0x080037cb
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	080037dd 	.word	0x080037dd
 80037c0:	080037d1 	.word	0x080037d1
				              case BNO_GETDATA:
				            	  BNO_GetData();
 80037c4:	f7ff f9ae 	bl	8002b24 <BNO_GetData>
				                  break;
 80037c8:	e00b      	b.n	80037e2 <main+0x1b2>
				              case BNO_CHECK_SIGNAL:
				            	  BNO_CheckSignal();
 80037ca:	f7ff f9c5 	bl	8002b58 <BNO_CheckSignal>
				            	  break;
 80037ce:	e008      	b.n	80037e2 <main+0x1b2>
				              case BNO_RECOVERY:
				            	  BNO_Recovery();
 80037d0:	f7ff faa0 	bl	8002d14 <BNO_Recovery>
				                  break;
 80037d4:	e005      	b.n	80037e2 <main+0x1b2>
				              case BNO_SEND_ERROR:
				            	  BNO_SendError();
 80037d6:	f7ff fa25 	bl	8002c24 <BNO_SendError>
				                  break;
 80037da:	e002      	b.n	80037e2 <main+0x1b2>
				              case BNO_SEND_DATA:
				            	  BNO_SendData();
 80037dc:	f7ff fa52 	bl	8002c84 <BNO_SendData>
				                  break;
 80037e0:	bf00      	nop
				          }
			HAL_Delay(10);
 80037e2:	200a      	movs	r0, #10
 80037e4:	f000 faf4 	bl	8003dd0 <HAL_Delay>
				  switch (currentState) {
 80037e8:	e7d9      	b.n	800379e <main+0x16e>
 80037ea:	bf00      	nop
 80037ec:	20000319 	.word	0x20000319
 80037f0:	200001f0 	.word	0x200001f0
 80037f4:	40010c00 	.word	0x40010c00
 80037f8:	2000026c 	.word	0x2000026c
 80037fc:	20000218 	.word	0x20000218
 8003800:	20000318 	.word	0x20000318
 8003804:	20000868 	.word	0x20000868
 8003808:	20000320 	.word	0x20000320
 800380c:	20000864 	.word	0x20000864

08003810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b090      	sub	sp, #64	; 0x40
 8003814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003816:	f107 0318 	add.w	r3, r7, #24
 800381a:	2228      	movs	r2, #40	; 0x28
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fd67 	bl	80082f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003840:	2301      	movs	r3, #1
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003844:	2302      	movs	r3, #2
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800384e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003854:	f107 0318 	add.w	r3, r7, #24
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fcb9 	bl	80061d0 <HAL_RCC_OscConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003864:	f000 f819 	bl	800389a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003868:	230f      	movs	r3, #15
 800386a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800386c:	2302      	movs	r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	2102      	movs	r1, #2
 8003882:	4618      	mov	r0, r3
 8003884:	f002 ff26 	bl	80066d4 <HAL_RCC_ClockConfig>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800388e:	f000 f804 	bl	800389a <Error_Handler>
  }
}
 8003892:	bf00      	nop
 8003894:	3740      	adds	r7, #64	; 0x40
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800389e:	b672      	cpsid	i
}
 80038a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80038a2:	e7fe      	b.n	80038a2 <Error_Handler+0x8>

080038a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_MspInit+0x5c>)
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_MspInit+0x5c>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6193      	str	r3, [r2, #24]
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_MspInit+0x5c>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_MspInit+0x5c>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_MspInit+0x5c>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_MspInit+0x5c>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_MspInit+0x60>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <HAL_MspInit+0x60>)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40021000 	.word	0x40021000
 8003904:	40010000 	.word	0x40010000

08003908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800390c:	e7fe      	b.n	800390c <NMI_Handler+0x4>

0800390e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003912:	e7fe      	b.n	8003912 <HardFault_Handler+0x4>

08003914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003918:	e7fe      	b.n	8003918 <MemManage_Handler+0x4>

0800391a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800391e:	e7fe      	b.n	800391e <BusFault_Handler+0x4>

08003920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003924:	e7fe      	b.n	8003924 <UsageFault_Handler+0x4>

08003926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800394e:	f000 fa23 	bl	8003d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800395e:	f000 fd7a 	bl	8004456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200001f0 	.word	0x200001f0

0800396c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003972:	f000 fd70 	bl	8004456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200001f0 	.word	0x200001f0

08003980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return 1;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <_kill>:

int _kill(int pid, int sig)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003998:	f004 fd0e 	bl	80083b8 <__errno>
 800399c:	4603      	mov	r3, r0
 800399e:	2216      	movs	r2, #22
 80039a0:	601a      	str	r2, [r3, #0]
  return -1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_exit>:

void _exit (int status)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039b6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffe7 	bl	800398e <_kill>
  while (1) {}    /* Make sure we hang here */
 80039c0:	e7fe      	b.n	80039c0 <_exit+0x12>

080039c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e00a      	b.n	80039ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039d4:	f3af 8000 	nop.w
 80039d8:	4601      	mov	r1, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	60ba      	str	r2, [r7, #8]
 80039e0:	b2ca      	uxtb	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	dbf0      	blt.n	80039d4 <_read+0x12>
  }

  return len;
 80039f2:	687b      	ldr	r3, [r7, #4]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a22:	605a      	str	r2, [r3, #4]
  return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <_isatty>:

int _isatty(int file)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a38:	2301      	movs	r3, #1
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <_sbrk+0x5c>)
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <_sbrk+0x60>)
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <_sbrk+0x64>)
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <_sbrk+0x68>)
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <_sbrk+0x64>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d207      	bcs.n	8003a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a8c:	f004 fc94 	bl	80083b8 <__errno>
 8003a90:	4603      	mov	r3, r0
 8003a92:	220c      	movs	r2, #12
 8003a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e009      	b.n	8003ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <_sbrk+0x64>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <_sbrk+0x64>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <_sbrk+0x64>)
 8003aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20005000 	.word	0x20005000
 8003abc:	00000400 	.word	0x00000400
 8003ac0:	20000890 	.word	0x20000890
 8003ac4:	20000a78 	.word	0x20000a78

08003ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae8:	463b      	mov	r3, r7
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <MX_TIM3_Init+0x98>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003af8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b06:	2263      	movs	r2, #99	; 0x63
 8003b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b16:	4814      	ldr	r0, [pc, #80]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b18:	f002 ff6a 	bl	80069f0 <HAL_TIM_Base_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003b22:	f7ff feba 	bl	800389a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	4619      	mov	r1, r3
 8003b32:	480d      	ldr	r0, [pc, #52]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b34:	f002 ffab 	bl	8006a8e <HAL_TIM_ConfigClockSource>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b3e:	f7ff feac 	bl	800389a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4806      	ldr	r0, [pc, #24]	; (8003b68 <MX_TIM3_Init+0x94>)
 8003b50:	f003 f95c 	bl	8006e0c <HAL_TIMEx_MasterConfigSynchronization>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b5a:	f7ff fe9e 	bl	800389a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000894 	.word	0x20000894
 8003b6c:	40000400 	.word	0x40000400

08003b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_TIM_Base_MspInit+0x34>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10b      	bne.n	8003b9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_TIM_Base_MspInit+0x38>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_TIM_Base_MspInit+0x38>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	61d3      	str	r3, [r2, #28]
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_TIM_Base_MspInit+0x38>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40021000 	.word	0x40021000

08003bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <MX_USART1_UART_Init+0x50>)
 8003bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003be2:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <MX_USART1_UART_Init+0x4c>)
 8003be4:	f003 f970 	bl	8006ec8 <HAL_UART_Init>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bee:	f7ff fe54 	bl	800389a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200008dc 	.word	0x200008dc
 8003bfc:	40013800 	.word	0x40013800

08003c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_UART_MspInit+0x8c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d131      	bne.n	8003c84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6193      	str	r3, [r2, #24]
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_UART_MspInit+0x90>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5e:	f107 0310 	add.w	r3, r7, #16
 8003c62:	4619      	mov	r1, r3
 8003c64:	480b      	ldr	r0, [pc, #44]	; (8003c94 <HAL_UART_MspInit+0x94>)
 8003c66:	f000 ff53 	bl	8004b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4805      	ldr	r0, [pc, #20]	; (8003c94 <HAL_UART_MspInit+0x94>)
 8003c80:	f000 ff46 	bl	8004b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c84:	bf00      	nop
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40010800 	.word	0x40010800

08003c98 <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, UART_Delay);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	230a      	movs	r3, #10
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4803      	ldr	r0, [pc, #12]	; (8003cbc <_write+0x24>)
 8003cae:	f003 f95b 	bl	8006f68 <HAL_UART_Transmit>
  return len;
 8003cb2:	687b      	ldr	r3, [r7, #4]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200008dc 	.word	0x200008dc

08003cc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cc0:	f7ff ff02 	bl	8003ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003cc6:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ccc:	e002      	b.n	8003cd4 <LoopCopyDataInit>

08003cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cd2:	3304      	adds	r3, #4

08003cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cd8:	d3f9      	bcc.n	8003cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003cdc:	4c09      	ldr	r4, [pc, #36]	; (8003d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce0:	e001      	b.n	8003ce6 <LoopFillZerobss>

08003ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ce4:	3204      	adds	r2, #4

08003ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ce8:	d3fb      	bcc.n	8003ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cea:	f004 fb6b 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cee:	f7ff fc9f 	bl	8003630 <main>
  bx lr
 8003cf2:	4770      	bx	lr
  ldr r0, =_sdata
 8003cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cf8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003cfc:	0800be48 	.word	0x0800be48
  ldr r2, =_sbss
 8003d00:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003d04:	20000a74 	.word	0x20000a74

08003d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d08:	e7fe      	b.n	8003d08 <ADC1_2_IRQHandler>
	...

08003d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_Init+0x28>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <HAL_Init+0x28>)
 8003d16:	f043 0310 	orr.w	r3, r3, #16
 8003d1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1c:	2003      	movs	r0, #3
 8003d1e:	f000 feb5 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d22:	200f      	movs	r0, #15
 8003d24:	f000 f808 	bl	8003d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d28:	f7ff fdbc 	bl	80038a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40022000 	.word	0x40022000

08003d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <HAL_InitTick+0x54>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_InitTick+0x58>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fecd 	bl	8004af6 <HAL_SYSTICK_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e00e      	b.n	8003d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0f      	cmp	r3, #15
 8003d6a:	d80a      	bhi.n	8003d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	f000 fe95 	bl	8004aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d78:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <HAL_InitTick+0x5c>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	20000008 	.word	0x20000008
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_IncTick+0x1c>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_IncTick+0x20>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4413      	add	r3, r2
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_IncTick+0x20>)
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000008 	.word	0x20000008
 8003db8:	20000924 	.word	0x20000924

08003dbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <HAL_GetTick+0x10>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000924 	.word	0x20000924

08003dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7ff fff0 	bl	8003dbc <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d005      	beq.n	8003df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_Delay+0x44>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003df6:	bf00      	nop
 8003df8:	f7ff ffe0 	bl	8003dbc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d8f7      	bhi.n	8003df8 <HAL_Delay+0x28>
  {
  }
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000008 	.word	0x20000008

08003e18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0ed      	b.n	8004006 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fa9e 	bl	8003378 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e4c:	f7ff ffb6 	bl	8003dbc <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e52:	e012      	b.n	8003e7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e54:	f7ff ffb2 	bl	8003dbc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b0a      	cmp	r3, #10
 8003e60:	d90b      	bls.n	8003e7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0c5      	b.n	8004006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0e5      	beq.n	8003e54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0202 	bic.w	r2, r2, #2
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e98:	f7ff ff90 	bl	8003dbc <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e9e:	e012      	b.n	8003ec6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ea0:	f7ff ff8c 	bl	8003dbc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b0a      	cmp	r3, #10
 8003eac:	d90b      	bls.n	8003ec6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e09f      	b.n	8004006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e007      	b.n	8003efe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7e5b      	ldrb	r3, [r3, #25]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e007      	b.n	8003f28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7e9b      	ldrb	r3, [r3, #26]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0220 	orr.w	r2, r2, #32
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e007      	b.n	8003f52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0220 	bic.w	r2, r2, #32
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7edb      	ldrb	r3, [r3, #27]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0210 	orr.w	r2, r2, #16
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7f1b      	ldrb	r3, [r3, #28]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d108      	bne.n	8003f96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0208 	orr.w	r2, r2, #8
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e007      	b.n	8003fa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0208 	bic.w	r2, r2, #8
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7f5b      	ldrb	r3, [r3, #29]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d108      	bne.n	8003fc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0204 	orr.w	r2, r2, #4
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e007      	b.n	8003fd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	ea42 0103 	orr.w	r1, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	1e5a      	subs	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004024:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d003      	beq.n	8004034 <HAL_CAN_ConfigFilter+0x26>
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b02      	cmp	r3, #2
 8004030:	f040 80aa 	bne.w	8004188 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d123      	bne.n	80040b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	401a      	ands	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004090:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	3248      	adds	r2, #72	; 0x48
 8004096:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	3348      	adds	r3, #72	; 0x48
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d122      	bne.n	8004104 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3248      	adds	r2, #72	; 0x48
 80040e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	3348      	adds	r3, #72	; 0x48
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800411e:	e007      	b.n	8004130 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	431a      	orrs	r2, r3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800414a:	e007      	b.n	800415c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	431a      	orrs	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	431a      	orrs	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e006      	b.n	8004196 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d12e      	bne.n	8004212 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041cc:	f7ff fdf6 	bl	8003dbc <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041d2:	e012      	b.n	80041fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041d4:	f7ff fdf2 	bl	8003dbc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b0a      	cmp	r3, #10
 80041e0:	d90b      	bls.n	80041fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e012      	b.n	8004220 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e006      	b.n	8004220 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004246:	7ffb      	ldrb	r3, [r7, #31]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d003      	beq.n	8004254 <HAL_CAN_AddTxMessage+0x2c>
 800424c:	7ffb      	ldrb	r3, [r7, #31]
 800424e:	2b02      	cmp	r3, #2
 8004250:	f040 80ad 	bne.w	80043ae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8095 	beq.w	800439e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	0e1b      	lsrs	r3, r3, #24
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800427e:	2201      	movs	r2, #1
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6809      	ldr	r1, [r1, #0]
 800429e:	431a      	orrs	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3318      	adds	r3, #24
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	440b      	add	r3, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00f      	b.n	80042cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80042c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3318      	adds	r3, #24
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	440b      	add	r3, r1
 80042ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3318      	adds	r3, #24
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	440b      	add	r3, r1
 80042dc:	3304      	adds	r3, #4
 80042de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	7d1b      	ldrb	r3, [r3, #20]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d111      	bne.n	800430c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3318      	adds	r3, #24
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6811      	ldr	r1, [r2, #0]
 80042fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3318      	adds	r3, #24
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	440b      	add	r3, r1
 8004308:	3304      	adds	r3, #4
 800430a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3307      	adds	r3, #7
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	061a      	lsls	r2, r3, #24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3306      	adds	r3, #6
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3305      	adds	r3, #5
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4313      	orrs	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	3204      	adds	r2, #4
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	4610      	mov	r0, r2
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	6811      	ldr	r1, [r2, #0]
 8004334:	ea43 0200 	orr.w	r2, r3, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	440b      	add	r3, r1
 800433e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004342:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3303      	adds	r3, #3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	061a      	lsls	r2, r3, #24
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3302      	adds	r3, #2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3301      	adds	r3, #1
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	4313      	orrs	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	4610      	mov	r0, r2
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6811      	ldr	r1, [r2, #0]
 800436a:	ea43 0200 	orr.w	r2, r3, r0
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	440b      	add	r3, r1
 8004374:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004378:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3318      	adds	r3, #24
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6811      	ldr	r1, [r2, #0]
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3318      	adds	r3, #24
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	440b      	add	r3, r1
 8004398:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e00e      	b.n	80043bc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e006      	b.n	80043bc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3724      	adds	r7, #36	; 0x24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043da:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80043dc:	7afb      	ldrb	r3, [r7, #11]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d002      	beq.n	80043e8 <HAL_CAN_IsTxMessagePending+0x22>
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d10b      	bne.n	8004400 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	069b      	lsls	r3, r3, #26
 80043f2:	401a      	ands	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	069b      	lsls	r3, r3, #26
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80043fc:	2301      	movs	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d002      	beq.n	800442a <HAL_CAN_ActivateNotification+0x1e>
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d109      	bne.n	800443e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6959      	ldr	r1, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e006      	b.n	800444c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08a      	sub	sp, #40	; 0x28
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d07c      	beq.n	8004596 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d023      	beq.n	80044ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f983 	bl	80047c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80044be:	e016      	b.n	80044ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	e00c      	b.n	80044ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e002      	b.n	80044ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f986 	bl	80047fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d024      	beq.n	8004542 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f962 	bl	80047d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004512:	e016      	b.n	8004542 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e00c      	b.n	8004542 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	e002      	b.n	8004542 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f965 	bl	800480c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d024      	beq.n	8004596 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f941 	bl	80047e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004566:	e016      	b.n	8004596 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e00c      	b.n	8004596 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e002      	b.n	8004596 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f944 	bl	800481e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2210      	movs	r2, #16
 80045b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2208      	movs	r2, #8
 80045d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f933 	bl	8004842 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f91b 	bl	8004830 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2210      	movs	r2, #16
 800461c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2208      	movs	r2, #8
 8004638:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f913 	bl	8004866 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8fb 	bl	8004854 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2210      	movs	r2, #16
 8004678:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8fc 	bl	8004878 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2208      	movs	r2, #8
 800469a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8f4 	bl	800488a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d07b      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d072      	beq.n	800479c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d043      	beq.n	800479c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d03e      	beq.n	800479c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004724:	2b60      	cmp	r3, #96	; 0x60
 8004726:	d02b      	beq.n	8004780 <HAL_CAN_IRQHandler+0x32a>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d82e      	bhi.n	800478a <HAL_CAN_IRQHandler+0x334>
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d022      	beq.n	8004776 <HAL_CAN_IRQHandler+0x320>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d82a      	bhi.n	800478a <HAL_CAN_IRQHandler+0x334>
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d019      	beq.n	800476c <HAL_CAN_IRQHandler+0x316>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d826      	bhi.n	800478a <HAL_CAN_IRQHandler+0x334>
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d010      	beq.n	8004762 <HAL_CAN_IRQHandler+0x30c>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d822      	bhi.n	800478a <HAL_CAN_IRQHandler+0x334>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d002      	beq.n	800474e <HAL_CAN_IRQHandler+0x2f8>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d005      	beq.n	8004758 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800474c:	e01d      	b.n	800478a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004756:	e019      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f043 0310 	orr.w	r3, r3, #16
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004760:	e014      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800476a:	e00f      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004774:	e00a      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800477e:	e005      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004788:	e000      	b.n	800478c <HAL_CAN_IRQHandler+0x336>
            break;
 800478a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800479a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2204      	movs	r2, #4
 80047a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f870 	bl	800489c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047bc:	bf00      	nop
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c0:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <HAL_CAN_ResetError+0x20>
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d103      	bne.n	80048d6 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24
 80048d4:	e007      	b.n	80048e6 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
	...

080048f4 <__NVIC_SetPriorityGrouping>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <__NVIC_SetPriorityGrouping+0x44>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004910:	4013      	ands	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800491c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004926:	4a04      	ldr	r2, [pc, #16]	; (8004938 <__NVIC_SetPriorityGrouping+0x44>)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	60d3      	str	r3, [r2, #12]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_GetPriorityGrouping>:
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <__NVIC_GetPriorityGrouping+0x18>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 0307 	and.w	r3, r3, #7
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <__NVIC_EnableIRQ>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db0b      	blt.n	8004982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	4906      	ldr	r1, [pc, #24]	; (800498c <__NVIC_EnableIRQ+0x34>)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2001      	movs	r0, #1
 800497a:	fa00 f202 	lsl.w	r2, r0, r2
 800497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	e000e100 	.word	0xe000e100

08004990 <__NVIC_SetPriority>:
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	6039      	str	r1, [r7, #0]
 800499a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	db0a      	blt.n	80049ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	490c      	ldr	r1, [pc, #48]	; (80049dc <__NVIC_SetPriority+0x4c>)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	0112      	lsls	r2, r2, #4
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049b8:	e00a      	b.n	80049d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4908      	ldr	r1, [pc, #32]	; (80049e0 <__NVIC_SetPriority+0x50>)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	3b04      	subs	r3, #4
 80049c8:	0112      	lsls	r2, r2, #4
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	440b      	add	r3, r1
 80049ce:	761a      	strb	r2, [r3, #24]
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000e100 	.word	0xe000e100
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <NVIC_EncodePriority>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f1c3 0307 	rsb	r3, r3, #7
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	bf28      	it	cs
 8004a02:	2304      	movcs	r3, #4
 8004a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d902      	bls.n	8004a14 <NVIC_EncodePriority+0x30>
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3b03      	subs	r3, #3
 8004a12:	e000      	b.n	8004a16 <NVIC_EncodePriority+0x32>
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	401a      	ands	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	43d9      	mvns	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a3c:	4313      	orrs	r3, r2
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3724      	adds	r7, #36	; 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d301      	bcc.n	8004a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00f      	b.n	8004a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <SysTick_Config+0x40>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a66:	210f      	movs	r1, #15
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	f7ff ff90 	bl	8004990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <SysTick_Config+0x40>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a76:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <SysTick_Config+0x40>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff2d 	bl	80048f4 <__NVIC_SetPriorityGrouping>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab4:	f7ff ff42 	bl	800493c <__NVIC_GetPriorityGrouping>
 8004ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff ff90 	bl	80049e4 <NVIC_EncodePriority>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff5f 	bl	8004990 <__NVIC_SetPriority>
}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff35 	bl	8004958 <__NVIC_EnableIRQ>
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ffa2 	bl	8004a48 <SysTick_Config>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b08b      	sub	sp, #44	; 0x2c
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b22:	e169      	b.n	8004df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b24:	2201      	movs	r2, #1
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f040 8158 	bne.w	8004df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a9a      	ldr	r2, [pc, #616]	; (8004db0 <HAL_GPIO_Init+0x2a0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d05e      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
 8004b4c:	4a98      	ldr	r2, [pc, #608]	; (8004db0 <HAL_GPIO_Init+0x2a0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d875      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b52:	4a98      	ldr	r2, [pc, #608]	; (8004db4 <HAL_GPIO_Init+0x2a4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d058      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
 8004b58:	4a96      	ldr	r2, [pc, #600]	; (8004db4 <HAL_GPIO_Init+0x2a4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d86f      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b5e:	4a96      	ldr	r2, [pc, #600]	; (8004db8 <HAL_GPIO_Init+0x2a8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d052      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
 8004b64:	4a94      	ldr	r2, [pc, #592]	; (8004db8 <HAL_GPIO_Init+0x2a8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d869      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b6a:	4a94      	ldr	r2, [pc, #592]	; (8004dbc <HAL_GPIO_Init+0x2ac>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04c      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
 8004b70:	4a92      	ldr	r2, [pc, #584]	; (8004dbc <HAL_GPIO_Init+0x2ac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d863      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b76:	4a92      	ldr	r2, [pc, #584]	; (8004dc0 <HAL_GPIO_Init+0x2b0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d046      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
 8004b7c:	4a90      	ldr	r2, [pc, #576]	; (8004dc0 <HAL_GPIO_Init+0x2b0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d85d      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b82:	2b12      	cmp	r3, #18
 8004b84:	d82a      	bhi.n	8004bdc <HAL_GPIO_Init+0xcc>
 8004b86:	2b12      	cmp	r3, #18
 8004b88:	d859      	bhi.n	8004c3e <HAL_GPIO_Init+0x12e>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_GPIO_Init+0x80>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004c0b 	.word	0x08004c0b
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004bf7 	.word	0x08004bf7
 8004b9c:	08004c39 	.word	0x08004c39
 8004ba0:	08004c3f 	.word	0x08004c3f
 8004ba4:	08004c3f 	.word	0x08004c3f
 8004ba8:	08004c3f 	.word	0x08004c3f
 8004bac:	08004c3f 	.word	0x08004c3f
 8004bb0:	08004c3f 	.word	0x08004c3f
 8004bb4:	08004c3f 	.word	0x08004c3f
 8004bb8:	08004c3f 	.word	0x08004c3f
 8004bbc:	08004c3f 	.word	0x08004c3f
 8004bc0:	08004c3f 	.word	0x08004c3f
 8004bc4:	08004c3f 	.word	0x08004c3f
 8004bc8:	08004c3f 	.word	0x08004c3f
 8004bcc:	08004c3f 	.word	0x08004c3f
 8004bd0:	08004c3f 	.word	0x08004c3f
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <HAL_GPIO_Init+0x2b4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004be2:	e02c      	b.n	8004c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	623b      	str	r3, [r7, #32]
          break;
 8004bea:	e029      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	623b      	str	r3, [r7, #32]
          break;
 8004bf4:	e024      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	623b      	str	r3, [r7, #32]
          break;
 8004bfe:	e01f      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	330c      	adds	r3, #12
 8004c06:	623b      	str	r3, [r7, #32]
          break;
 8004c08:	e01a      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c12:	2304      	movs	r3, #4
 8004c14:	623b      	str	r3, [r7, #32]
          break;
 8004c16:	e013      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c20:	2308      	movs	r3, #8
 8004c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	611a      	str	r2, [r3, #16]
          break;
 8004c2a:	e009      	b.n	8004c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	615a      	str	r2, [r3, #20]
          break;
 8004c36:	e003      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
          break;
 8004c3c:	e000      	b.n	8004c40 <HAL_GPIO_Init+0x130>
          break;
 8004c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d801      	bhi.n	8004c4a <HAL_GPIO_Init+0x13a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	e001      	b.n	8004c4e <HAL_GPIO_Init+0x13e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2bff      	cmp	r3, #255	; 0xff
 8004c54:	d802      	bhi.n	8004c5c <HAL_GPIO_Init+0x14c>
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	e002      	b.n	8004c62 <HAL_GPIO_Init+0x152>
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	3b08      	subs	r3, #8
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	210f      	movs	r1, #15
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	6a39      	ldr	r1, [r7, #32]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80b1 	beq.w	8004df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c90:	4b4d      	ldr	r3, [pc, #308]	; (8004dc8 <HAL_GPIO_Init+0x2b8>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4a4c      	ldr	r2, [pc, #304]	; (8004dc8 <HAL_GPIO_Init+0x2b8>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6193      	str	r3, [r2, #24]
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_GPIO_Init+0x2b8>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ca8:	4a48      	ldr	r2, [pc, #288]	; (8004dcc <HAL_GPIO_Init+0x2bc>)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	3302      	adds	r3, #2
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	220f      	movs	r2, #15
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a40      	ldr	r2, [pc, #256]	; (8004dd0 <HAL_GPIO_Init+0x2c0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_GPIO_Init+0x1ec>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <HAL_GPIO_Init+0x2c4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00d      	beq.n	8004cf8 <HAL_GPIO_Init+0x1e8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3e      	ldr	r2, [pc, #248]	; (8004dd8 <HAL_GPIO_Init+0x2c8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <HAL_GPIO_Init+0x1e4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3d      	ldr	r2, [pc, #244]	; (8004ddc <HAL_GPIO_Init+0x2cc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <HAL_GPIO_Init+0x1e0>
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_GPIO_Init+0x1ee>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	e004      	b.n	8004cfe <HAL_GPIO_Init+0x1ee>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e002      	b.n	8004cfe <HAL_GPIO_Init+0x1ee>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_GPIO_Init+0x1ee>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	f002 0203 	and.w	r2, r2, #3
 8004d04:	0092      	lsls	r2, r2, #2
 8004d06:	4093      	lsls	r3, r2
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004d0e:	492f      	ldr	r1, [pc, #188]	; (8004dcc <HAL_GPIO_Init+0x2bc>)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	492c      	ldr	r1, [pc, #176]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
 8004d34:	e006      	b.n	8004d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	4928      	ldr	r1, [pc, #160]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	4922      	ldr	r1, [pc, #136]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]
 8004d5c:	e006      	b.n	8004d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	491e      	ldr	r1, [pc, #120]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4918      	ldr	r1, [pc, #96]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
 8004d84:	e006      	b.n	8004d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	4914      	ldr	r1, [pc, #80]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d021      	beq.n	8004de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	490e      	ldr	r1, [pc, #56]	; (8004de0 <HAL_GPIO_Init+0x2d0>)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	e021      	b.n	8004df2 <HAL_GPIO_Init+0x2e2>
 8004dae:	bf00      	nop
 8004db0:	10320000 	.word	0x10320000
 8004db4:	10310000 	.word	0x10310000
 8004db8:	10220000 	.word	0x10220000
 8004dbc:	10210000 	.word	0x10210000
 8004dc0:	10120000 	.word	0x10120000
 8004dc4:	10110000 	.word	0x10110000
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010800 	.word	0x40010800
 8004dd4:	40010c00 	.word	0x40010c00
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	40011400 	.word	0x40011400
 8004de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_GPIO_Init+0x304>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	4909      	ldr	r1, [pc, #36]	; (8004e14 <HAL_GPIO_Init+0x304>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	3301      	adds	r3, #1
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f ae8e 	bne.w	8004b24 <HAL_GPIO_Init+0x14>
  }
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	372c      	adds	r7, #44	; 0x2c
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	40010400 	.word	0x40010400

08004e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
 8004e24:	4613      	mov	r3, r2
 8004e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e28:	787b      	ldrb	r3, [r7, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e34:	e003      	b.n	8004e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	041a      	lsls	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e12b      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fe fb8a 	bl	8003588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eac:	f001 fd5a 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a81      	ldr	r2, [pc, #516]	; (80050bc <HAL_I2C_Init+0x274>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d807      	bhi.n	8004ecc <HAL_I2C_Init+0x84>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a80      	ldr	r2, [pc, #512]	; (80050c0 <HAL_I2C_Init+0x278>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bf94      	ite	ls
 8004ec4:	2301      	movls	r3, #1
 8004ec6:	2300      	movhi	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e006      	b.n	8004eda <HAL_I2C_Init+0x92>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a7d      	ldr	r2, [pc, #500]	; (80050c4 <HAL_I2C_Init+0x27c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0e7      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <HAL_I2C_Init+0x280>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0c9b      	lsrs	r3, r3, #18
 8004eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a6a      	ldr	r2, [pc, #424]	; (80050bc <HAL_I2C_Init+0x274>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d802      	bhi.n	8004f1c <HAL_I2C_Init+0xd4>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	e009      	b.n	8004f30 <HAL_I2C_Init+0xe8>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	4a69      	ldr	r2, [pc, #420]	; (80050cc <HAL_I2C_Init+0x284>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	099b      	lsrs	r3, r3, #6
 8004f2e:	3301      	adds	r3, #1
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	495c      	ldr	r1, [pc, #368]	; (80050bc <HAL_I2C_Init+0x274>)
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	d819      	bhi.n	8004f84 <HAL_I2C_Init+0x13c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e59      	subs	r1, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f64:	400b      	ands	r3, r1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_I2C_Init+0x138>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e59      	subs	r1, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7e:	e051      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f80:	2304      	movs	r3, #4
 8004f82:	e04f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d111      	bne.n	8004fb0 <HAL_I2C_Init+0x168>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1e58      	subs	r0, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	440b      	add	r3, r1
 8004f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e012      	b.n	8004fd6 <HAL_I2C_Init+0x18e>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	0099      	lsls	r1, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Init+0x196>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e022      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <HAL_I2C_Init+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1e58      	subs	r0, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	440b      	add	r3, r1
 8004ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	e00f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1e58      	subs	r0, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	0099      	lsls	r1, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	fbb0 f3f3 	udiv	r3, r0, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6809      	ldr	r1, [r1, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6911      	ldr	r1, [r2, #16]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	430b      	orrs	r3, r1
 8005066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	000186a0 	.word	0x000186a0
 80050c0:	001e847f 	.word	0x001e847f
 80050c4:	003d08ff 	.word	0x003d08ff
 80050c8:	431bde83 	.word	0x431bde83
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	460b      	mov	r3, r1
 80050de:	817b      	strh	r3, [r7, #10]
 80050e0:	4613      	mov	r3, r2
 80050e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050e4:	f7fe fe6a 	bl	8003dbc <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	f040 80e0 	bne.w	80052b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2319      	movs	r3, #25
 80050fe:	2201      	movs	r2, #1
 8005100:	4970      	ldr	r1, [pc, #448]	; (80052c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fe2e 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	e0d3      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_I2C_Master_Transmit+0x50>
 800511c:	2302      	movs	r3, #2
 800511e:	e0cc      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d007      	beq.n	8005146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2221      	movs	r2, #33	; 0x21
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2210      	movs	r2, #16
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	893a      	ldrh	r2, [r7, #8]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a50      	ldr	r2, [pc, #320]	; (80052c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fc02 	bl	8005998 <I2C_MasterRequestWrite>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e08d      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051b4:	e066      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	6a39      	ldr	r1, [r7, #32]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 feec 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d107      	bne.n	80051de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06b      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d11b      	bne.n	8005258 <HAL_I2C_Master_Transmit+0x188>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d017      	beq.n	8005258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	6a39      	ldr	r1, [r7, #32]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fee3 	bl	8006028 <I2C_WaitOnBTFFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	2b04      	cmp	r3, #4
 800526e:	d107      	bne.n	8005280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e01a      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d194      	bne.n	80051b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	00100002 	.word	0x00100002
 80052c8:	ffff0000 	.word	0xffff0000

080052cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	; 0x30
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	461a      	mov	r2, r3
 80052d8:	460b      	mov	r3, r1
 80052da:	817b      	strh	r3, [r7, #10]
 80052dc:	4613      	mov	r3, r2
 80052de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052e4:	f7fe fd6a 	bl	8003dbc <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	f040 824b 	bne.w	800578e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2319      	movs	r3, #25
 80052fe:	2201      	movs	r2, #1
 8005300:	497f      	ldr	r1, [pc, #508]	; (8005500 <HAL_I2C_Master_Receive+0x234>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fd2e 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
 8005310:	e23e      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_I2C_Master_Receive+0x54>
 800531c:	2302      	movs	r3, #2
 800531e:	e237      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d007      	beq.n	8005346 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2222      	movs	r2, #34	; 0x22
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2210      	movs	r2, #16
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	893a      	ldrh	r2, [r7, #8]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a5f      	ldr	r2, [pc, #380]	; (8005504 <HAL_I2C_Master_Receive+0x238>)
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb84 	bl	8005a9c <I2C_MasterRequestRead>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e1f8      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d113      	bne.n	80053ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e1cc      	b.n	8005768 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d11e      	bne.n	8005414 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053e6:	b672      	cpsid	i
}
 80053e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005410:	b662      	cpsie	i
}
 8005412:	e035      	b.n	8005480 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	2b02      	cmp	r3, #2
 800541a:	d11e      	bne.n	800545a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800542c:	b672      	cpsid	i
}
 800542e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005456:	b662      	cpsie	i
}
 8005458:	e012      	b.n	8005480 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005468:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005480:	e172      	b.n	8005768 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	2b03      	cmp	r3, #3
 8005488:	f200 811f 	bhi.w	80056ca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	2b01      	cmp	r3, #1
 8005492:	d123      	bne.n	80054dc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fe0d 	bl	80060b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e173      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054da:	e145      	b.n	8005768 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d152      	bne.n	800558a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	2200      	movs	r2, #0
 80054ec:	4906      	ldr	r1, [pc, #24]	; (8005508 <HAL_I2C_Master_Receive+0x23c>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fc38 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e148      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
 80054fe:	bf00      	nop
 8005500:	00100002 	.word	0x00100002
 8005504:	ffff0000 	.word	0xffff0000
 8005508:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800550c:	b672      	cpsid	i
}
 800550e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005552:	b662      	cpsie	i
}
 8005554:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005588:	e0ee      	b.n	8005768 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2200      	movs	r2, #0
 8005592:	4981      	ldr	r1, [pc, #516]	; (8005798 <HAL_I2C_Master_Receive+0x4cc>)
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fbe5 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0f5      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055b4:	b672      	cpsid	i
}
 80055b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055ea:	4b6c      	ldr	r3, [pc, #432]	; (800579c <HAL_I2C_Master_Receive+0x4d0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	4a6b      	ldr	r2, [pc, #428]	; (80057a0 <HAL_I2C_Master_Receive+0x4d4>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0a1a      	lsrs	r2, r3, #8
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	3b01      	subs	r3, #1
 8005608:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d118      	bne.n	8005642 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005632:	b662      	cpsie	i
}
 8005634:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0a6      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d1d9      	bne.n	8005604 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005692:	b662      	cpsie	i
}
 8005694:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c8:	e04e      	b.n	8005768 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fcf2 	bl	80060b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e058      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d124      	bne.n	8005768 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	2b03      	cmp	r3, #3
 8005724:	d107      	bne.n	8005736 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005734:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f ae88 	bne.w	8005482 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3728      	adds	r7, #40	; 0x28
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	00010004 	.word	0x00010004
 800579c:	20000000 	.word	0x20000000
 80057a0:	14f8b589 	.word	0x14f8b589

080057a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	4608      	mov	r0, r1
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	817b      	strh	r3, [r7, #10]
 80057b6:	460b      	mov	r3, r1
 80057b8:	813b      	strh	r3, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057be:	f7fe fafd 	bl	8003dbc <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	f040 80d9 	bne.w	8005984 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	2319      	movs	r3, #25
 80057d8:	2201      	movs	r2, #1
 80057da:	496d      	ldr	r1, [pc, #436]	; (8005990 <HAL_I2C_Mem_Write+0x1ec>)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fac1 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0cc      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_I2C_Mem_Write+0x56>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e0c5      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d007      	beq.n	8005820 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800582e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2221      	movs	r2, #33	; 0x21
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2240      	movs	r2, #64	; 0x40
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a4d      	ldr	r2, [pc, #308]	; (8005994 <HAL_I2C_Mem_Write+0x1f0>)
 8005860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005862:	88f8      	ldrh	r0, [r7, #6]
 8005864:	893a      	ldrh	r2, [r7, #8]
 8005866:	8979      	ldrh	r1, [r7, #10]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	4603      	mov	r3, r0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f9e0 	bl	8005c38 <I2C_RequestMemoryWrite>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d052      	beq.n	8005924 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e081      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb86 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	2b04      	cmp	r3, #4
 8005898:	d107      	bne.n	80058aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e06b      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d11b      	bne.n	8005924 <HAL_I2C_Mem_Write+0x180>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d017      	beq.n	8005924 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1aa      	bne.n	8005882 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fb79 	bl	8006028 <I2C_WaitOnBTFFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b04      	cmp	r3, #4
 8005942:	d107      	bne.n	8005954 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e016      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	00100002 	.word	0x00100002
 8005994:	ffff0000 	.word	0xffff0000

08005998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	460b      	mov	r3, r1
 80059a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d006      	beq.n	80059c2 <I2C_MasterRequestWrite+0x2a>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d003      	beq.n	80059c2 <I2C_MasterRequestWrite+0x2a>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059c0:	d108      	bne.n	80059d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e00b      	b.n	80059ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	2b12      	cmp	r3, #18
 80059da:	d107      	bne.n	80059ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9b3 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a12:	d103      	bne.n	8005a1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e035      	b.n	8005a8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a28:	d108      	bne.n	8005a3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	e01b      	b.n	8005a74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	11db      	asrs	r3, r3, #7
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 0306 	and.w	r3, r3, #6
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f063 030f 	orn	r3, r3, #15
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	490e      	ldr	r1, [pc, #56]	; (8005a94 <I2C_MasterRequestWrite+0xfc>)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f9fc 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e010      	b.n	8005a8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4907      	ldr	r1, [pc, #28]	; (8005a98 <I2C_MasterRequestWrite+0x100>)
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f9ec 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	00010008 	.word	0x00010008
 8005a98:	00010002 	.word	0x00010002

08005a9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d006      	beq.n	8005ad6 <I2C_MasterRequestRead+0x3a>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d003      	beq.n	8005ad6 <I2C_MasterRequestRead+0x3a>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ad4:	d108      	bne.n	8005ae8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e00b      	b.n	8005b00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	2b11      	cmp	r3, #17
 8005aee:	d107      	bne.n	8005b00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f929 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b26:	d103      	bne.n	8005b30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e079      	b.n	8005c28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b3c:	d108      	bne.n	8005b50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b3e:	897b      	ldrh	r3, [r7, #10]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	e05f      	b.n	8005c10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b50:	897b      	ldrh	r3, [r7, #10]
 8005b52:	11db      	asrs	r3, r3, #7
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 0306 	and.w	r3, r3, #6
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f063 030f 	orn	r3, r3, #15
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4930      	ldr	r1, [pc, #192]	; (8005c30 <I2C_MasterRequestRead+0x194>)
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f972 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e054      	b.n	8005c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4929      	ldr	r1, [pc, #164]	; (8005c34 <I2C_MasterRequestRead+0x198>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f962 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e044      	b.n	8005c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f8c7 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d103      	bne.n	8005bf4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e017      	b.n	8005c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005bf8:	897b      	ldrh	r3, [r7, #10]
 8005bfa:	11db      	asrs	r3, r3, #7
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f063 030e 	orn	r3, r3, #14
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4907      	ldr	r1, [pc, #28]	; (8005c34 <I2C_MasterRequestRead+0x198>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f91e 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	00010008 	.word	0x00010008
 8005c34:	00010002 	.word	0x00010002

08005c38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	817b      	strh	r3, [r7, #10]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	813b      	strh	r3, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f878 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c88:	d103      	bne.n	8005c92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e05f      	b.n	8005d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ca4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	492d      	ldr	r1, [pc, #180]	; (8005d60 <I2C_RequestMemoryWrite+0x128>)
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f8d3 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e04c      	b.n	8005d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	6a39      	ldr	r1, [r7, #32]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f95e 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d107      	bne.n	8005cfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e02b      	b.n	8005d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d04:	893b      	ldrh	r3, [r7, #8]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]
 8005d0e:	e021      	b.n	8005d54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d20:	6a39      	ldr	r1, [r7, #32]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f938 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d107      	bne.n	8005d46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e005      	b.n	8005d56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4a:	893b      	ldrh	r3, [r7, #8]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	00010002 	.word	0x00010002

08005d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d74:	e048      	b.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d044      	beq.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fe f81d 	bl	8003dbc <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d139      	bne.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10d      	bne.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	43da      	mvns	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	e00c      	b.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	43da      	mvns	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d116      	bne.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e023      	b.n	8005e50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10d      	bne.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	e00c      	b.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	43da      	mvns	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d093      	beq.n	8005d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e66:	e071      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e76:	d123      	bne.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f043 0204 	orr.w	r2, r3, #4
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e067      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d041      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec8:	f7fd ff78 	bl	8003dbc <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d136      	bne.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10c      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	e00b      	b.n	8005f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e021      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10c      	bne.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	43da      	mvns	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e00b      	b.n	8005f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	43da      	mvns	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af6d 	bne.w	8005e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa4:	e034      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8e3 	bl	8006172 <I2C_IsAcknowledgeFailed>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e034      	b.n	8006020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d028      	beq.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fd fefd 	bl	8003dbc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11d      	bne.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d016      	beq.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0220 	orr.w	r2, r3, #32
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e007      	b.n	8006020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d1c3      	bne.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006034:	e034      	b.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f89b 	bl	8006172 <I2C_IsAcknowledgeFailed>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e034      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d028      	beq.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fd feb5 	bl	8003dbc <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11d      	bne.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d016      	beq.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e007      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d1c3      	bne.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c4:	e049      	b.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d119      	bne.n	8006108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0210 	mvn.w	r2, #16
 80060dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e030      	b.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006108:	f7fd fe58 	bl	8003dbc <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d11d      	bne.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d016      	beq.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e007      	b.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d1ae      	bne.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d11b      	bne.n	80061c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006192:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e272      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8087 	beq.w	80062fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061f0:	4b92      	ldr	r3, [pc, #584]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 030c 	and.w	r3, r3, #12
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d00c      	beq.n	8006216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061fc:	4b8f      	ldr	r3, [pc, #572]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 030c 	and.w	r3, r3, #12
 8006204:	2b08      	cmp	r3, #8
 8006206:	d112      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
 8006208:	4b8c      	ldr	r3, [pc, #560]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d10b      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006216:	4b89      	ldr	r3, [pc, #548]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d06c      	beq.n	80062fc <HAL_RCC_OscConfig+0x12c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d168      	bne.n	80062fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e24c      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x76>
 8006238:	4b80      	ldr	r3, [pc, #512]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7f      	ldr	r2, [pc, #508]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800623e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	e02e      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x98>
 800624e:	4b7b      	ldr	r3, [pc, #492]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7a      	ldr	r2, [pc, #488]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b78      	ldr	r3, [pc, #480]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a77      	ldr	r2, [pc, #476]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0xbc>
 8006272:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a71      	ldr	r2, [pc, #452]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b6f      	ldr	r3, [pc, #444]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6e      	ldr	r2, [pc, #440]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 800628c:	4b6b      	ldr	r3, [pc, #428]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6a      	ldr	r2, [pc, #424]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a67      	ldr	r2, [pc, #412]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7fd fd86 	bl	8003dbc <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fd fd82 	bl	8003dbc <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e200      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b5d      	ldr	r3, [pc, #372]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xe4>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fd fd72 	bl	8003dbc <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fd fd6e 	bl	8003dbc <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1ec      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x10c>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800630a:	4b4c      	ldr	r3, [pc, #304]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006316:	4b49      	ldr	r3, [pc, #292]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11c      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
 8006322:	4b46      	ldr	r3, [pc, #280]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	4b43      	ldr	r3, [pc, #268]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e1c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006346:	4b3d      	ldr	r3, [pc, #244]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4939      	ldr	r1, [pc, #228]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635a:	e03a      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006364:	4b36      	ldr	r3, [pc, #216]	; (8006440 <HAL_RCC_OscConfig+0x270>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fd fd27 	bl	8003dbc <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006372:	f7fd fd23 	bl	8003dbc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1a1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4927      	ldr	r1, [pc, #156]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]
 80063a4:	e015      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a6:	4b26      	ldr	r3, [pc, #152]	; (8006440 <HAL_RCC_OscConfig+0x270>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd fd06 	bl	8003dbc <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b4:	f7fd fd02 	bl	8003dbc <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e180      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d03a      	beq.n	8006454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b17      	ldr	r3, [pc, #92]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7fd fce6 	bl	8003dbc <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fd fce2 	bl	8003dbc <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e160      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006412:	2001      	movs	r0, #1
 8006414:	f000 face 	bl	80069b4 <RCC_Delay>
 8006418:	e01c      	b.n	8006454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006420:	f7fd fccc 	bl	8003dbc <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006426:	e00f      	b.n	8006448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006428:	f7fd fcc8 	bl	8003dbc <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d908      	bls.n	8006448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e146      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	42420000 	.word	0x42420000
 8006444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	4b92      	ldr	r3, [pc, #584]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e9      	bne.n	8006428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a6 	beq.w	80065ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006466:	4b8b      	ldr	r3, [pc, #556]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4a87      	ldr	r2, [pc, #540]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647c:	61d3      	str	r3, [r2, #28]
 800647e:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	4b82      	ldr	r3, [pc, #520]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d118      	bne.n	80064cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649a:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7e      	ldr	r2, [pc, #504]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a6:	f7fd fc89 	bl	8003dbc <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7fd fc85 	bl	8003dbc <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b64      	cmp	r3, #100	; 0x64
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e103      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	4b75      	ldr	r3, [pc, #468]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x312>
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a6e      	ldr	r2, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	e02d      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x334>
 80064ea:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4a69      	ldr	r2, [pc, #420]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	6213      	str	r3, [r2, #32]
 80064f6:	4b67      	ldr	r3, [pc, #412]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4a66      	ldr	r2, [pc, #408]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	6213      	str	r3, [r2, #32]
 8006502:	e01c      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d10c      	bne.n	8006526 <HAL_RCC_OscConfig+0x356>
 800650c:	4b61      	ldr	r3, [pc, #388]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4a60      	ldr	r2, [pc, #384]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006512:	f043 0304 	orr.w	r3, r3, #4
 8006516:	6213      	str	r3, [r2, #32]
 8006518:	4b5e      	ldr	r3, [pc, #376]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	4a5d      	ldr	r2, [pc, #372]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6213      	str	r3, [r2, #32]
 8006524:	e00b      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006526:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	4a5a      	ldr	r2, [pc, #360]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6213      	str	r3, [r2, #32]
 8006532:	4b58      	ldr	r3, [pc, #352]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4a57      	ldr	r2, [pc, #348]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006546:	f7fd fc39 	bl	8003dbc <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654c:	e00a      	b.n	8006564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fd fc35 	bl	8003dbc <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	; 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0b1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ee      	beq.n	800654e <HAL_RCC_OscConfig+0x37e>
 8006570:	e014      	b.n	800659c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006572:	f7fd fc23 	bl	8003dbc <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fd fc1f 	bl	8003dbc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	; 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e09b      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006590:	4b40      	ldr	r3, [pc, #256]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ee      	bne.n	800657a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	4b3c      	ldr	r3, [pc, #240]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8087 	beq.w	80066c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b8:	4b36      	ldr	r3, [pc, #216]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d061      	beq.n	8006688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d146      	bne.n	800665a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b33      	ldr	r3, [pc, #204]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fd fbf3 	bl	8003dbc <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fd fbef 	bl	8003dbc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e06d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ec:	4b29      	ldr	r3, [pc, #164]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d108      	bne.n	8006614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4921      	ldr	r1, [pc, #132]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a19      	ldr	r1, [r3, #32]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	430b      	orrs	r3, r1
 8006626:	491b      	ldr	r1, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006632:	f7fd fbc3 	bl	8003dbc <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663a:	f7fd fbbf 	bl	8003dbc <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e03d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x46a>
 8006658:	e035      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fd fbac 	bl	8003dbc <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006668:	f7fd fba8 	bl	8003dbc <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e026      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x498>
 8006686:	e01e      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e019      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 8006694:	40021000 	.word	0x40021000
 8006698:	40007000 	.word	0x40007000
 800669c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <HAL_RCC_OscConfig+0x500>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0d0      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e8:	4b6a      	ldr	r3, [pc, #424]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d910      	bls.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b67      	ldr	r3, [pc, #412]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 0207 	bic.w	r2, r3, #7
 80066fe:	4965      	ldr	r1, [pc, #404]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b63      	ldr	r3, [pc, #396]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0b8      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006730:	4b59      	ldr	r3, [pc, #356]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800673a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006748:	4b53      	ldr	r3, [pc, #332]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a52      	ldr	r2, [pc, #328]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006754:	4b50      	ldr	r3, [pc, #320]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	494d      	ldr	r1, [pc, #308]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d040      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d115      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e07f      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d107      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b41      	ldr	r3, [pc, #260]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e073      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a2:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e06b      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b2:	4b39      	ldr	r3, [pc, #228]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f023 0203 	bic.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4936      	ldr	r1, [pc, #216]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c4:	f7fd fafa 	bl	8003dbc <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fd faf6 	bl	8003dbc <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e053      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 020c 	and.w	r2, r3, #12
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1eb      	bne.n	80067cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d210      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 0207 	bic.w	r2, r3, #7
 800680a:	4922      	ldr	r1, [pc, #136]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e032      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4916      	ldr	r1, [pc, #88]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	490e      	ldr	r1, [pc, #56]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006862:	f000 f821 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006866:	4602      	mov	r2, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	490a      	ldr	r1, [pc, #40]	; (800689c <HAL_RCC_ClockConfig+0x1c8>)
 8006874:	5ccb      	ldrb	r3, [r1, r3]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <HAL_RCC_ClockConfig+0x1cc>)
 800687c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd fa58 	bl	8003d38 <HAL_InitTick>

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40022000 	.word	0x40022000
 8006898:	40021000 	.word	0x40021000
 800689c:	0800b9e8 	.word	0x0800b9e8
 80068a0:	20000000 	.word	0x20000000
 80068a4:	20000004 	.word	0x20000004

080068a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <HAL_RCC_GetSysClockFreq+0x94>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d002      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x30>
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d003      	beq.n	80068de <HAL_RCC_GetSysClockFreq+0x36>
 80068d6:	e027      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 80068da:	613b      	str	r3, [r7, #16]
      break;
 80068dc:	e027      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0c9b      	lsrs	r3, r3, #18
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	4a17      	ldr	r2, [pc, #92]	; (8006944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <HAL_RCC_GetSysClockFreq+0x94>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	0c5b      	lsrs	r3, r3, #17
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	4a11      	ldr	r2, [pc, #68]	; (8006948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 800690a:	fb03 f202 	mul.w	r2, r3, r2
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e004      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0c      	ldr	r2, [pc, #48]	; (800694c <HAL_RCC_GetSysClockFreq+0xa4>)
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	613b      	str	r3, [r7, #16]
      break;
 8006926:	e002      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 800692a:	613b      	str	r3, [r7, #16]
      break;
 800692c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800692e:	693b      	ldr	r3, [r7, #16]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	007a1200 	.word	0x007a1200
 8006944:	0800ba00 	.word	0x0800ba00
 8006948:	0800ba10 	.word	0x0800ba10
 800694c:	003d0900 	.word	0x003d0900

08006950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <HAL_RCC_GetHCLKFreq+0x10>)
 8006956:	681b      	ldr	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr
 8006960:	20000000 	.word	0x20000000

08006964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006968:	f7ff fff2 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4903      	ldr	r1, [pc, #12]	; (8006988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40021000 	.word	0x40021000
 8006988:	0800b9f8 	.word	0x0800b9f8

0800698c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006990:	f7ff ffde 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	0adb      	lsrs	r3, r3, #11
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	; (80069b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000
 80069b0:	0800b9f8 	.word	0x0800b9f8

080069b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <RCC_Delay+0x34>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <RCC_Delay+0x38>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069d0:	bf00      	nop
  }
  while (Delay --);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1e5a      	subs	r2, r3, #1
 80069d6:	60fa      	str	r2, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f9      	bne.n	80069d0 <RCC_Delay+0x1c>
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	20000000 	.word	0x20000000
 80069ec:	10624dd3 	.word	0x10624dd3

080069f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e041      	b.n	8006a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fd f8aa 	bl	8003b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f000 f8f4 	bl	8006c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_ConfigClockSource+0x1c>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0b4      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x186>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae2:	d03e      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0xd4>
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae8:	f200 8087 	bhi.w	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af0:	f000 8086 	beq.w	8006c00 <HAL_TIM_ConfigClockSource+0x172>
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d87f      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006afa:	2b70      	cmp	r3, #112	; 0x70
 8006afc:	d01a      	beq.n	8006b34 <HAL_TIM_ConfigClockSource+0xa6>
 8006afe:	2b70      	cmp	r3, #112	; 0x70
 8006b00:	d87b      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b02:	2b60      	cmp	r3, #96	; 0x60
 8006b04:	d050      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x11a>
 8006b06:	2b60      	cmp	r3, #96	; 0x60
 8006b08:	d877      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b0a:	2b50      	cmp	r3, #80	; 0x50
 8006b0c:	d03c      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0xfa>
 8006b0e:	2b50      	cmp	r3, #80	; 0x50
 8006b10:	d873      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d058      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0x13a>
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d86f      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b1a:	2b30      	cmp	r3, #48	; 0x30
 8006b1c:	d064      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	d86b      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d060      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x15a>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d867      	bhi.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05c      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d05a      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x15a>
 8006b32:	e062      	b.n	8006bfa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	f000 f943 	bl	8006dce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]
      break;
 8006b60:	e04f      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b72:	f000 f92c 	bl	8006dce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b84:	609a      	str	r2, [r3, #8]
      break;
 8006b86:	e03c      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b94:	461a      	mov	r2, r3
 8006b96:	f000 f8a3 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2150      	movs	r1, #80	; 0x50
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f8fa 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006ba6:	e02c      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f000 f8c1 	bl	8006d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2160      	movs	r1, #96	; 0x60
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f8ea 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006bc6:	e01c      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f000 f883 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2140      	movs	r1, #64	; 0x40
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f8da 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006be6:	e00c      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f000 f8d1 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006bf8:	e003      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfe:	e000      	b.n	8006c02 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a29      	ldr	r2, [pc, #164]	; (8006cd4 <TIM_Base_SetConfig+0xb8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_Base_SetConfig+0x30>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d007      	beq.n	8006c4c <TIM_Base_SetConfig+0x30>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a26      	ldr	r2, [pc, #152]	; (8006cd8 <TIM_Base_SetConfig+0xbc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0x30>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <TIM_Base_SetConfig+0xc0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d108      	bne.n	8006c5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <TIM_Base_SetConfig+0xb8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_Base_SetConfig+0x62>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6c:	d007      	beq.n	8006c7e <TIM_Base_SetConfig+0x62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <TIM_Base_SetConfig+0xbc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_Base_SetConfig+0x62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <TIM_Base_SetConfig+0xc0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d108      	bne.n	8006c90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <TIM_Base_SetConfig+0xb8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800

08006ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 030a 	bic.w	r3, r3, #10
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr

08006d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f043 0307 	orr.w	r3, r3, #7
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	021a      	lsls	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e046      	b.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a16      	ldr	r2, [pc, #88]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e70:	d009      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a12      	ldr	r2, [pc, #72]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10c      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800

08006ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e042      	b.n	8006f60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fc fe86 	bl	8003c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2224      	movs	r2, #36	; 0x24
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f91d 	bl	800714c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695a      	ldr	r2, [r3, #20]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d16d      	bne.n	8007064 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_UART_Transmit+0x2c>
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e066      	b.n	8007066 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2221      	movs	r2, #33	; 0x21
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fa6:	f7fc ff09 	bl	8003dbc <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc0:	d108      	bne.n	8006fd4 <HAL_UART_Transmit+0x6c>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e003      	b.n	8006fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fdc:	e02a      	b.n	8007034 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f840 	bl	800706e <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e036      	b.n	8007066 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3302      	adds	r3, #2
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e007      	b.n	8007026 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1cf      	bne.n	8006fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2200      	movs	r2, #0
 8007046:	2140      	movs	r1, #64	; 0x40
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f810 	bl	800706e <UART_WaitOnFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e006      	b.n	8007066 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b090      	sub	sp, #64	; 0x40
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	603b      	str	r3, [r7, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	e050      	b.n	8007122 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d04c      	beq.n	8007122 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <UART_WaitOnFlagUntilTimeout+0x30>
 800708e:	f7fc fe95 	bl	8003dbc <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709a:	429a      	cmp	r2, r3
 800709c:	d241      	bcs.n	8007122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070be:	637a      	str	r2, [r7, #52]	; 0x34
 80070c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3314      	adds	r3, #20
 80070d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	613b      	str	r3, [r7, #16]
   return(result);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070f2:	623a      	str	r2, [r7, #32]
 80070f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	6a3a      	ldr	r2, [r7, #32]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e00f      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4013      	ands	r3, r2
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	bf0c      	ite	eq
 8007132:	2301      	moveq	r3, #1
 8007134:	2300      	movne	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	429a      	cmp	r2, r3
 800713e:	d09f      	beq.n	8007080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3740      	adds	r7, #64	; 0x40
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007186:	f023 030c 	bic.w	r3, r3, #12
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	430b      	orrs	r3, r1
 8007192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <UART_SetConfig+0x114>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071b4:	f7ff fbea 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80071bc:	f7ff fbd2 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 80071c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009a      	lsls	r2, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	4a22      	ldr	r2, [pc, #136]	; (8007264 <UART_SetConfig+0x118>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	0119      	lsls	r1, r3, #4
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009a      	lsls	r2, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <UART_SetConfig+0x118>)
 80071fa:	fba3 0302 	umull	r0, r3, r3, r2
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	2064      	movs	r0, #100	; 0x64
 8007202:	fb00 f303 	mul.w	r3, r0, r3
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	3332      	adds	r3, #50	; 0x32
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <UART_SetConfig+0x118>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007218:	4419      	add	r1, r3
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009a      	lsls	r2, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <UART_SetConfig+0x118>)
 8007232:	fba3 0302 	umull	r0, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	2064      	movs	r0, #100	; 0x64
 800723a:	fb00 f303 	mul.w	r3, r0, r3
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	3332      	adds	r3, #50	; 0x32
 8007244:	4a07      	ldr	r2, [pc, #28]	; (8007264 <UART_SetConfig+0x118>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	f003 020f 	and.w	r2, r3, #15
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	440a      	add	r2, r1
 8007256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40013800 	.word	0x40013800
 8007264:	51eb851f 	.word	0x51eb851f

08007268 <malloc>:
 8007268:	4b02      	ldr	r3, [pc, #8]	; (8007274 <malloc+0xc>)
 800726a:	4601      	mov	r1, r0
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	f000 b823 	b.w	80072b8 <_malloc_r>
 8007272:	bf00      	nop
 8007274:	20000064 	.word	0x20000064

08007278 <sbrk_aligned>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4e0e      	ldr	r6, [pc, #56]	; (80072b4 <sbrk_aligned+0x3c>)
 800727c:	460c      	mov	r4, r1
 800727e:	6831      	ldr	r1, [r6, #0]
 8007280:	4605      	mov	r5, r0
 8007282:	b911      	cbnz	r1, 800728a <sbrk_aligned+0x12>
 8007284:	f001 f876 	bl	8008374 <_sbrk_r>
 8007288:	6030      	str	r0, [r6, #0]
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f001 f871 	bl	8008374 <_sbrk_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	d00a      	beq.n	80072ac <sbrk_aligned+0x34>
 8007296:	1cc4      	adds	r4, r0, #3
 8007298:	f024 0403 	bic.w	r4, r4, #3
 800729c:	42a0      	cmp	r0, r4
 800729e:	d007      	beq.n	80072b0 <sbrk_aligned+0x38>
 80072a0:	1a21      	subs	r1, r4, r0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f001 f866 	bl	8008374 <_sbrk_r>
 80072a8:	3001      	adds	r0, #1
 80072aa:	d101      	bne.n	80072b0 <sbrk_aligned+0x38>
 80072ac:	f04f 34ff 	mov.w	r4, #4294967295
 80072b0:	4620      	mov	r0, r4
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	2000092c 	.word	0x2000092c

080072b8 <_malloc_r>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	1ccd      	adds	r5, r1, #3
 80072be:	f025 0503 	bic.w	r5, r5, #3
 80072c2:	3508      	adds	r5, #8
 80072c4:	2d0c      	cmp	r5, #12
 80072c6:	bf38      	it	cc
 80072c8:	250c      	movcc	r5, #12
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	4607      	mov	r7, r0
 80072ce:	db01      	blt.n	80072d4 <_malloc_r+0x1c>
 80072d0:	42a9      	cmp	r1, r5
 80072d2:	d905      	bls.n	80072e0 <_malloc_r+0x28>
 80072d4:	230c      	movs	r3, #12
 80072d6:	2600      	movs	r6, #0
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4630      	mov	r0, r6
 80072dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b4 <_malloc_r+0xfc>
 80072e4:	f000 f868 	bl	80073b8 <__malloc_lock>
 80072e8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ec:	461c      	mov	r4, r3
 80072ee:	bb5c      	cbnz	r4, 8007348 <_malloc_r+0x90>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ffc0 	bl	8007278 <sbrk_aligned>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	4604      	mov	r4, r0
 80072fc:	d155      	bne.n	80073aa <_malloc_r+0xf2>
 80072fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007302:	4626      	mov	r6, r4
 8007304:	2e00      	cmp	r6, #0
 8007306:	d145      	bne.n	8007394 <_malloc_r+0xdc>
 8007308:	2c00      	cmp	r4, #0
 800730a:	d048      	beq.n	800739e <_malloc_r+0xe6>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	4631      	mov	r1, r6
 8007310:	4638      	mov	r0, r7
 8007312:	eb04 0903 	add.w	r9, r4, r3
 8007316:	f001 f82d 	bl	8008374 <_sbrk_r>
 800731a:	4581      	cmp	r9, r0
 800731c:	d13f      	bne.n	800739e <_malloc_r+0xe6>
 800731e:	6821      	ldr	r1, [r4, #0]
 8007320:	4638      	mov	r0, r7
 8007322:	1a6d      	subs	r5, r5, r1
 8007324:	4629      	mov	r1, r5
 8007326:	f7ff ffa7 	bl	8007278 <sbrk_aligned>
 800732a:	3001      	adds	r0, #1
 800732c:	d037      	beq.n	800739e <_malloc_r+0xe6>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	442b      	add	r3, r5
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	f8d8 3000 	ldr.w	r3, [r8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d038      	beq.n	80073ae <_malloc_r+0xf6>
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	42a2      	cmp	r2, r4
 8007340:	d12b      	bne.n	800739a <_malloc_r+0xe2>
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	e00f      	b.n	8007368 <_malloc_r+0xb0>
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	1b52      	subs	r2, r2, r5
 800734c:	d41f      	bmi.n	800738e <_malloc_r+0xd6>
 800734e:	2a0b      	cmp	r2, #11
 8007350:	d917      	bls.n	8007382 <_malloc_r+0xca>
 8007352:	1961      	adds	r1, r4, r5
 8007354:	42a3      	cmp	r3, r4
 8007356:	6025      	str	r5, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	6059      	strne	r1, [r3, #4]
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	bf08      	it	eq
 8007360:	f8c8 1000 	streq.w	r1, [r8]
 8007364:	5162      	str	r2, [r4, r5]
 8007366:	604b      	str	r3, [r1, #4]
 8007368:	4638      	mov	r0, r7
 800736a:	f104 060b 	add.w	r6, r4, #11
 800736e:	f000 f829 	bl	80073c4 <__malloc_unlock>
 8007372:	f026 0607 	bic.w	r6, r6, #7
 8007376:	1d23      	adds	r3, r4, #4
 8007378:	1af2      	subs	r2, r6, r3
 800737a:	d0ae      	beq.n	80072da <_malloc_r+0x22>
 800737c:	1b9b      	subs	r3, r3, r6
 800737e:	50a3      	str	r3, [r4, r2]
 8007380:	e7ab      	b.n	80072da <_malloc_r+0x22>
 8007382:	42a3      	cmp	r3, r4
 8007384:	6862      	ldr	r2, [r4, #4]
 8007386:	d1dd      	bne.n	8007344 <_malloc_r+0x8c>
 8007388:	f8c8 2000 	str.w	r2, [r8]
 800738c:	e7ec      	b.n	8007368 <_malloc_r+0xb0>
 800738e:	4623      	mov	r3, r4
 8007390:	6864      	ldr	r4, [r4, #4]
 8007392:	e7ac      	b.n	80072ee <_malloc_r+0x36>
 8007394:	4634      	mov	r4, r6
 8007396:	6876      	ldr	r6, [r6, #4]
 8007398:	e7b4      	b.n	8007304 <_malloc_r+0x4c>
 800739a:	4613      	mov	r3, r2
 800739c:	e7cc      	b.n	8007338 <_malloc_r+0x80>
 800739e:	230c      	movs	r3, #12
 80073a0:	4638      	mov	r0, r7
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	f000 f80e 	bl	80073c4 <__malloc_unlock>
 80073a8:	e797      	b.n	80072da <_malloc_r+0x22>
 80073aa:	6025      	str	r5, [r4, #0]
 80073ac:	e7dc      	b.n	8007368 <_malloc_r+0xb0>
 80073ae:	605b      	str	r3, [r3, #4]
 80073b0:	deff      	udf	#255	; 0xff
 80073b2:	bf00      	nop
 80073b4:	20000928 	.word	0x20000928

080073b8 <__malloc_lock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__malloc_lock+0x8>)
 80073ba:	f001 b828 	b.w	800840e <__retarget_lock_acquire_recursive>
 80073be:	bf00      	nop
 80073c0:	20000a70 	.word	0x20000a70

080073c4 <__malloc_unlock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__malloc_unlock+0x8>)
 80073c6:	f001 b823 	b.w	8008410 <__retarget_lock_release_recursive>
 80073ca:	bf00      	nop
 80073cc:	20000a70 	.word	0x20000a70

080073d0 <__cvt>:
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	bfbb      	ittet	lt
 80073da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80073de:	461f      	movlt	r7, r3
 80073e0:	2300      	movge	r3, #0
 80073e2:	232d      	movlt	r3, #45	; 0x2d
 80073e4:	b088      	sub	sp, #32
 80073e6:	4614      	mov	r4, r2
 80073e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80073ec:	7013      	strb	r3, [r2, #0]
 80073ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80073f4:	f023 0820 	bic.w	r8, r3, #32
 80073f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073fc:	d005      	beq.n	800740a <__cvt+0x3a>
 80073fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007402:	d100      	bne.n	8007406 <__cvt+0x36>
 8007404:	3501      	adds	r5, #1
 8007406:	2302      	movs	r3, #2
 8007408:	e000      	b.n	800740c <__cvt+0x3c>
 800740a:	2303      	movs	r3, #3
 800740c:	aa07      	add	r2, sp, #28
 800740e:	9204      	str	r2, [sp, #16]
 8007410:	aa06      	add	r2, sp, #24
 8007412:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007416:	e9cd 3500 	strd	r3, r5, [sp]
 800741a:	4622      	mov	r2, r4
 800741c:	463b      	mov	r3, r7
 800741e:	f001 f8a3 	bl	8008568 <_dtoa_r>
 8007422:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007426:	4606      	mov	r6, r0
 8007428:	d102      	bne.n	8007430 <__cvt+0x60>
 800742a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d522      	bpl.n	8007476 <__cvt+0xa6>
 8007430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007434:	eb06 0905 	add.w	r9, r6, r5
 8007438:	d110      	bne.n	800745c <__cvt+0x8c>
 800743a:	7833      	ldrb	r3, [r6, #0]
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d10a      	bne.n	8007456 <__cvt+0x86>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	4620      	mov	r0, r4
 8007446:	4639      	mov	r1, r7
 8007448:	f7f9 faae 	bl	80009a8 <__aeabi_dcmpeq>
 800744c:	b918      	cbnz	r0, 8007456 <__cvt+0x86>
 800744e:	f1c5 0501 	rsb	r5, r5, #1
 8007452:	f8ca 5000 	str.w	r5, [sl]
 8007456:	f8da 3000 	ldr.w	r3, [sl]
 800745a:	4499      	add	r9, r3
 800745c:	2200      	movs	r2, #0
 800745e:	2300      	movs	r3, #0
 8007460:	4620      	mov	r0, r4
 8007462:	4639      	mov	r1, r7
 8007464:	f7f9 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8007468:	b108      	cbz	r0, 800746e <__cvt+0x9e>
 800746a:	f8cd 901c 	str.w	r9, [sp, #28]
 800746e:	2230      	movs	r2, #48	; 0x30
 8007470:	9b07      	ldr	r3, [sp, #28]
 8007472:	454b      	cmp	r3, r9
 8007474:	d307      	bcc.n	8007486 <__cvt+0xb6>
 8007476:	4630      	mov	r0, r6
 8007478:	9b07      	ldr	r3, [sp, #28]
 800747a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800747c:	1b9b      	subs	r3, r3, r6
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	b008      	add	sp, #32
 8007482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	9107      	str	r1, [sp, #28]
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e7f0      	b.n	8007470 <__cvt+0xa0>

0800748e <__exponent>:
 800748e:	4603      	mov	r3, r0
 8007490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007492:	2900      	cmp	r1, #0
 8007494:	f803 2b02 	strb.w	r2, [r3], #2
 8007498:	bfb6      	itet	lt
 800749a:	222d      	movlt	r2, #45	; 0x2d
 800749c:	222b      	movge	r2, #43	; 0x2b
 800749e:	4249      	neglt	r1, r1
 80074a0:	2909      	cmp	r1, #9
 80074a2:	7042      	strb	r2, [r0, #1]
 80074a4:	dd2a      	ble.n	80074fc <__exponent+0x6e>
 80074a6:	f10d 0207 	add.w	r2, sp, #7
 80074aa:	4617      	mov	r7, r2
 80074ac:	260a      	movs	r6, #10
 80074ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80074b2:	4694      	mov	ip, r2
 80074b4:	fb06 1415 	mls	r4, r6, r5, r1
 80074b8:	3430      	adds	r4, #48	; 0x30
 80074ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074be:	460c      	mov	r4, r1
 80074c0:	2c63      	cmp	r4, #99	; 0x63
 80074c2:	4629      	mov	r1, r5
 80074c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80074c8:	dcf1      	bgt.n	80074ae <__exponent+0x20>
 80074ca:	3130      	adds	r1, #48	; 0x30
 80074cc:	f1ac 0402 	sub.w	r4, ip, #2
 80074d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074d4:	4622      	mov	r2, r4
 80074d6:	1c41      	adds	r1, r0, #1
 80074d8:	42ba      	cmp	r2, r7
 80074da:	d30a      	bcc.n	80074f2 <__exponent+0x64>
 80074dc:	f10d 0209 	add.w	r2, sp, #9
 80074e0:	eba2 020c 	sub.w	r2, r2, ip
 80074e4:	42bc      	cmp	r4, r7
 80074e6:	bf88      	it	hi
 80074e8:	2200      	movhi	r2, #0
 80074ea:	4413      	add	r3, r2
 80074ec:	1a18      	subs	r0, r3, r0
 80074ee:	b003      	add	sp, #12
 80074f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074fa:	e7ed      	b.n	80074d8 <__exponent+0x4a>
 80074fc:	2330      	movs	r3, #48	; 0x30
 80074fe:	3130      	adds	r1, #48	; 0x30
 8007500:	7083      	strb	r3, [r0, #2]
 8007502:	70c1      	strb	r1, [r0, #3]
 8007504:	1d03      	adds	r3, r0, #4
 8007506:	e7f1      	b.n	80074ec <__exponent+0x5e>

08007508 <_printf_float>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	b091      	sub	sp, #68	; 0x44
 800750e:	460c      	mov	r4, r1
 8007510:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007514:	4616      	mov	r6, r2
 8007516:	461f      	mov	r7, r3
 8007518:	4605      	mov	r5, r0
 800751a:	f000 fef3 	bl	8008304 <_localeconv_r>
 800751e:	6803      	ldr	r3, [r0, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	f7f8 fe14 	bl	8000150 <strlen>
 8007528:	2300      	movs	r3, #0
 800752a:	930e      	str	r3, [sp, #56]	; 0x38
 800752c:	f8d8 3000 	ldr.w	r3, [r8]
 8007530:	900a      	str	r0, [sp, #40]	; 0x28
 8007532:	3307      	adds	r3, #7
 8007534:	f023 0307 	bic.w	r3, r3, #7
 8007538:	f103 0208 	add.w	r2, r3, #8
 800753c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007540:	f8d4 b000 	ldr.w	fp, [r4]
 8007544:	f8c8 2000 	str.w	r2, [r8]
 8007548:	e9d3 a800 	ldrd	sl, r8, [r3]
 800754c:	4652      	mov	r2, sl
 800754e:	4643      	mov	r3, r8
 8007550:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007554:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007558:	930b      	str	r3, [sp, #44]	; 0x2c
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	4650      	mov	r0, sl
 8007560:	4b9c      	ldr	r3, [pc, #624]	; (80077d4 <_printf_float+0x2cc>)
 8007562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007564:	f7f9 fa52 	bl	8000a0c <__aeabi_dcmpun>
 8007568:	bb70      	cbnz	r0, 80075c8 <_printf_float+0xc0>
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	4650      	mov	r0, sl
 8007570:	4b98      	ldr	r3, [pc, #608]	; (80077d4 <_printf_float+0x2cc>)
 8007572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007574:	f7f9 fa2c 	bl	80009d0 <__aeabi_dcmple>
 8007578:	bb30      	cbnz	r0, 80075c8 <_printf_float+0xc0>
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	4650      	mov	r0, sl
 8007580:	4641      	mov	r1, r8
 8007582:	f7f9 fa1b 	bl	80009bc <__aeabi_dcmplt>
 8007586:	b110      	cbz	r0, 800758e <_printf_float+0x86>
 8007588:	232d      	movs	r3, #45	; 0x2d
 800758a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758e:	4a92      	ldr	r2, [pc, #584]	; (80077d8 <_printf_float+0x2d0>)
 8007590:	4b92      	ldr	r3, [pc, #584]	; (80077dc <_printf_float+0x2d4>)
 8007592:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007596:	bf94      	ite	ls
 8007598:	4690      	movls	r8, r2
 800759a:	4698      	movhi	r8, r3
 800759c:	2303      	movs	r3, #3
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	f02b 0304 	bic.w	r3, fp, #4
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	4633      	mov	r3, r6
 80075ac:	4621      	mov	r1, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	9700      	str	r7, [sp, #0]
 80075b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80075b4:	f000 f9d6 	bl	8007964 <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	f040 8090 	bne.w	80076de <_printf_float+0x1d6>
 80075be:	f04f 30ff 	mov.w	r0, #4294967295
 80075c2:	b011      	add	sp, #68	; 0x44
 80075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c8:	4652      	mov	r2, sl
 80075ca:	4643      	mov	r3, r8
 80075cc:	4650      	mov	r0, sl
 80075ce:	4641      	mov	r1, r8
 80075d0:	f7f9 fa1c 	bl	8000a0c <__aeabi_dcmpun>
 80075d4:	b148      	cbz	r0, 80075ea <_printf_float+0xe2>
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	bfb8      	it	lt
 80075dc:	232d      	movlt	r3, #45	; 0x2d
 80075de:	4a80      	ldr	r2, [pc, #512]	; (80077e0 <_printf_float+0x2d8>)
 80075e0:	bfb8      	it	lt
 80075e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075e6:	4b7f      	ldr	r3, [pc, #508]	; (80077e4 <_printf_float+0x2dc>)
 80075e8:	e7d3      	b.n	8007592 <_printf_float+0x8a>
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	d142      	bne.n	800767a <_printf_float+0x172>
 80075f4:	2306      	movs	r3, #6
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	9206      	str	r2, [sp, #24]
 80075fc:	aa0e      	add	r2, sp, #56	; 0x38
 80075fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007602:	aa0d      	add	r2, sp, #52	; 0x34
 8007604:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007608:	9203      	str	r2, [sp, #12]
 800760a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800760e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	4652      	mov	r2, sl
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4628      	mov	r0, r5
 800761c:	4643      	mov	r3, r8
 800761e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007620:	f7ff fed6 	bl	80073d0 <__cvt>
 8007624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007626:	4680      	mov	r8, r0
 8007628:	2947      	cmp	r1, #71	; 0x47
 800762a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800762c:	d108      	bne.n	8007640 <_printf_float+0x138>
 800762e:	1cc8      	adds	r0, r1, #3
 8007630:	db02      	blt.n	8007638 <_printf_float+0x130>
 8007632:	6863      	ldr	r3, [r4, #4]
 8007634:	4299      	cmp	r1, r3
 8007636:	dd40      	ble.n	80076ba <_printf_float+0x1b2>
 8007638:	f1a9 0902 	sub.w	r9, r9, #2
 800763c:	fa5f f989 	uxtb.w	r9, r9
 8007640:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007644:	d81f      	bhi.n	8007686 <_printf_float+0x17e>
 8007646:	464a      	mov	r2, r9
 8007648:	3901      	subs	r1, #1
 800764a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800764e:	910d      	str	r1, [sp, #52]	; 0x34
 8007650:	f7ff ff1d 	bl	800748e <__exponent>
 8007654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007656:	4682      	mov	sl, r0
 8007658:	1813      	adds	r3, r2, r0
 800765a:	2a01      	cmp	r2, #1
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	dc02      	bgt.n	8007666 <_printf_float+0x15e>
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	07d2      	lsls	r2, r2, #31
 8007664:	d501      	bpl.n	800766a <_printf_float+0x162>
 8007666:	3301      	adds	r3, #1
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800766e:	2b00      	cmp	r3, #0
 8007670:	d09b      	beq.n	80075aa <_printf_float+0xa2>
 8007672:	232d      	movs	r3, #45	; 0x2d
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007678:	e797      	b.n	80075aa <_printf_float+0xa2>
 800767a:	2947      	cmp	r1, #71	; 0x47
 800767c:	d1bc      	bne.n	80075f8 <_printf_float+0xf0>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1ba      	bne.n	80075f8 <_printf_float+0xf0>
 8007682:	2301      	movs	r3, #1
 8007684:	e7b7      	b.n	80075f6 <_printf_float+0xee>
 8007686:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800768a:	d118      	bne.n	80076be <_printf_float+0x1b6>
 800768c:	2900      	cmp	r1, #0
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	dd0b      	ble.n	80076aa <_printf_float+0x1a2>
 8007692:	6121      	str	r1, [r4, #16]
 8007694:	b913      	cbnz	r3, 800769c <_printf_float+0x194>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	07d0      	lsls	r0, r2, #31
 800769a:	d502      	bpl.n	80076a2 <_printf_float+0x19a>
 800769c:	3301      	adds	r3, #1
 800769e:	440b      	add	r3, r1
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	f04f 0a00 	mov.w	sl, #0
 80076a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80076a8:	e7df      	b.n	800766a <_printf_float+0x162>
 80076aa:	b913      	cbnz	r3, 80076b2 <_printf_float+0x1aa>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	07d2      	lsls	r2, r2, #31
 80076b0:	d501      	bpl.n	80076b6 <_printf_float+0x1ae>
 80076b2:	3302      	adds	r3, #2
 80076b4:	e7f4      	b.n	80076a0 <_printf_float+0x198>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e7f2      	b.n	80076a0 <_printf_float+0x198>
 80076ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80076be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c0:	4299      	cmp	r1, r3
 80076c2:	db05      	blt.n	80076d0 <_printf_float+0x1c8>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	6121      	str	r1, [r4, #16]
 80076c8:	07d8      	lsls	r0, r3, #31
 80076ca:	d5ea      	bpl.n	80076a2 <_printf_float+0x19a>
 80076cc:	1c4b      	adds	r3, r1, #1
 80076ce:	e7e7      	b.n	80076a0 <_printf_float+0x198>
 80076d0:	2900      	cmp	r1, #0
 80076d2:	bfcc      	ite	gt
 80076d4:	2201      	movgt	r2, #1
 80076d6:	f1c1 0202 	rsble	r2, r1, #2
 80076da:	4413      	add	r3, r2
 80076dc:	e7e0      	b.n	80076a0 <_printf_float+0x198>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	055a      	lsls	r2, r3, #21
 80076e2:	d407      	bmi.n	80076f4 <_printf_float+0x1ec>
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	4642      	mov	r2, r8
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	d12b      	bne.n	800774a <_printf_float+0x242>
 80076f2:	e764      	b.n	80075be <_printf_float+0xb6>
 80076f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076f8:	f240 80dd 	bls.w	80078b6 <_printf_float+0x3ae>
 80076fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007700:	2200      	movs	r2, #0
 8007702:	2300      	movs	r3, #0
 8007704:	f7f9 f950 	bl	80009a8 <__aeabi_dcmpeq>
 8007708:	2800      	cmp	r0, #0
 800770a:	d033      	beq.n	8007774 <_printf_float+0x26c>
 800770c:	2301      	movs	r3, #1
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	4a35      	ldr	r2, [pc, #212]	; (80077e8 <_printf_float+0x2e0>)
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	f43f af51 	beq.w	80075be <_printf_float+0xb6>
 800771c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007720:	429a      	cmp	r2, r3
 8007722:	db02      	blt.n	800772a <_printf_float+0x222>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07d8      	lsls	r0, r3, #31
 8007728:	d50f      	bpl.n	800774a <_printf_float+0x242>
 800772a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f af42 	beq.w	80075be <_printf_float+0xb6>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	f104 091a 	add.w	r9, r4, #26
 8007742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007744:	3b01      	subs	r3, #1
 8007746:	4543      	cmp	r3, r8
 8007748:	dc09      	bgt.n	800775e <_printf_float+0x256>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	079b      	lsls	r3, r3, #30
 800774e:	f100 8104 	bmi.w	800795a <_printf_float+0x452>
 8007752:	68e0      	ldr	r0, [r4, #12]
 8007754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007756:	4298      	cmp	r0, r3
 8007758:	bfb8      	it	lt
 800775a:	4618      	movlt	r0, r3
 800775c:	e731      	b.n	80075c2 <_printf_float+0xba>
 800775e:	2301      	movs	r3, #1
 8007760:	464a      	mov	r2, r9
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f af28 	beq.w	80075be <_printf_float+0xb6>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	e7e6      	b.n	8007742 <_printf_float+0x23a>
 8007774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007776:	2b00      	cmp	r3, #0
 8007778:	dc38      	bgt.n	80077ec <_printf_float+0x2e4>
 800777a:	2301      	movs	r3, #1
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <_printf_float+0x2e0>)
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f af1a 	beq.w	80075be <_printf_float+0xb6>
 800778a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800778e:	4313      	orrs	r3, r2
 8007790:	d102      	bne.n	8007798 <_printf_float+0x290>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	07d9      	lsls	r1, r3, #31
 8007796:	d5d8      	bpl.n	800774a <_printf_float+0x242>
 8007798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f af0b 	beq.w	80075be <_printf_float+0xb6>
 80077a8:	f04f 0900 	mov.w	r9, #0
 80077ac:	f104 0a1a 	add.w	sl, r4, #26
 80077b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b2:	425b      	negs	r3, r3
 80077b4:	454b      	cmp	r3, r9
 80077b6:	dc01      	bgt.n	80077bc <_printf_float+0x2b4>
 80077b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ba:	e794      	b.n	80076e6 <_printf_float+0x1de>
 80077bc:	2301      	movs	r3, #1
 80077be:	4652      	mov	r2, sl
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f aef9 	beq.w	80075be <_printf_float+0xb6>
 80077cc:	f109 0901 	add.w	r9, r9, #1
 80077d0:	e7ee      	b.n	80077b0 <_printf_float+0x2a8>
 80077d2:	bf00      	nop
 80077d4:	7fefffff 	.word	0x7fefffff
 80077d8:	0800ba12 	.word	0x0800ba12
 80077dc:	0800ba16 	.word	0x0800ba16
 80077e0:	0800ba1a 	.word	0x0800ba1a
 80077e4:	0800ba1e 	.word	0x0800ba1e
 80077e8:	0800ba22 	.word	0x0800ba22
 80077ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077f0:	429a      	cmp	r2, r3
 80077f2:	bfa8      	it	ge
 80077f4:	461a      	movge	r2, r3
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	4691      	mov	r9, r2
 80077fa:	dc37      	bgt.n	800786c <_printf_float+0x364>
 80077fc:	f04f 0b00 	mov.w	fp, #0
 8007800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007804:	f104 021a 	add.w	r2, r4, #26
 8007808:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800780c:	ebaa 0309 	sub.w	r3, sl, r9
 8007810:	455b      	cmp	r3, fp
 8007812:	dc33      	bgt.n	800787c <_printf_float+0x374>
 8007814:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007818:	429a      	cmp	r2, r3
 800781a:	db3b      	blt.n	8007894 <_printf_float+0x38c>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	07da      	lsls	r2, r3, #31
 8007820:	d438      	bmi.n	8007894 <_printf_float+0x38c>
 8007822:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007826:	eba2 0903 	sub.w	r9, r2, r3
 800782a:	eba2 020a 	sub.w	r2, r2, sl
 800782e:	4591      	cmp	r9, r2
 8007830:	bfa8      	it	ge
 8007832:	4691      	movge	r9, r2
 8007834:	f1b9 0f00 	cmp.w	r9, #0
 8007838:	dc34      	bgt.n	80078a4 <_printf_float+0x39c>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007842:	f104 0a1a 	add.w	sl, r4, #26
 8007846:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	eba3 0309 	sub.w	r3, r3, r9
 8007850:	4543      	cmp	r3, r8
 8007852:	f77f af7a 	ble.w	800774a <_printf_float+0x242>
 8007856:	2301      	movs	r3, #1
 8007858:	4652      	mov	r2, sl
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f aeac 	beq.w	80075be <_printf_float+0xb6>
 8007866:	f108 0801 	add.w	r8, r8, #1
 800786a:	e7ec      	b.n	8007846 <_printf_float+0x33e>
 800786c:	4613      	mov	r3, r2
 800786e:	4631      	mov	r1, r6
 8007870:	4642      	mov	r2, r8
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	d1c0      	bne.n	80077fc <_printf_float+0x2f4>
 800787a:	e6a0      	b.n	80075be <_printf_float+0xb6>
 800787c:	2301      	movs	r3, #1
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	920b      	str	r2, [sp, #44]	; 0x2c
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f ae99 	beq.w	80075be <_printf_float+0xb6>
 800788c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800788e:	f10b 0b01 	add.w	fp, fp, #1
 8007892:	e7b9      	b.n	8007808 <_printf_float+0x300>
 8007894:	4631      	mov	r1, r6
 8007896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	d1bf      	bne.n	8007822 <_printf_float+0x31a>
 80078a2:	e68c      	b.n	80075be <_printf_float+0xb6>
 80078a4:	464b      	mov	r3, r9
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	eb08 020a 	add.w	r2, r8, sl
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	d1c2      	bne.n	800783a <_printf_float+0x332>
 80078b4:	e683      	b.n	80075be <_printf_float+0xb6>
 80078b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b8:	2a01      	cmp	r2, #1
 80078ba:	dc01      	bgt.n	80078c0 <_printf_float+0x3b8>
 80078bc:	07db      	lsls	r3, r3, #31
 80078be:	d539      	bpl.n	8007934 <_printf_float+0x42c>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4642      	mov	r2, r8
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f ae77 	beq.w	80075be <_printf_float+0xb6>
 80078d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f ae6f 	beq.w	80075be <_printf_float+0xb6>
 80078e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80078ec:	f7f9 f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80078f0:	b9d8      	cbnz	r0, 800792a <_printf_float+0x422>
 80078f2:	f109 33ff 	add.w	r3, r9, #4294967295
 80078f6:	f108 0201 	add.w	r2, r8, #1
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	d10e      	bne.n	8007922 <_printf_float+0x41a>
 8007904:	e65b      	b.n	80075be <_printf_float+0xb6>
 8007906:	2301      	movs	r3, #1
 8007908:	464a      	mov	r2, r9
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f ae54 	beq.w	80075be <_printf_float+0xb6>
 8007916:	f108 0801 	add.w	r8, r8, #1
 800791a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800791c:	3b01      	subs	r3, #1
 800791e:	4543      	cmp	r3, r8
 8007920:	dcf1      	bgt.n	8007906 <_printf_float+0x3fe>
 8007922:	4653      	mov	r3, sl
 8007924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007928:	e6de      	b.n	80076e8 <_printf_float+0x1e0>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	f104 091a 	add.w	r9, r4, #26
 8007932:	e7f2      	b.n	800791a <_printf_float+0x412>
 8007934:	2301      	movs	r3, #1
 8007936:	4642      	mov	r2, r8
 8007938:	e7df      	b.n	80078fa <_printf_float+0x3f2>
 800793a:	2301      	movs	r3, #1
 800793c:	464a      	mov	r2, r9
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae3a 	beq.w	80075be <_printf_float+0xb6>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	68e3      	ldr	r3, [r4, #12]
 8007950:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007952:	1a5b      	subs	r3, r3, r1
 8007954:	4543      	cmp	r3, r8
 8007956:	dcf0      	bgt.n	800793a <_printf_float+0x432>
 8007958:	e6fb      	b.n	8007752 <_printf_float+0x24a>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	f104 0919 	add.w	r9, r4, #25
 8007962:	e7f4      	b.n	800794e <_printf_float+0x446>

08007964 <_printf_common>:
 8007964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	4616      	mov	r6, r2
 800796a:	4699      	mov	r9, r3
 800796c:	688a      	ldr	r2, [r1, #8]
 800796e:	690b      	ldr	r3, [r1, #16]
 8007970:	4607      	mov	r7, r0
 8007972:	4293      	cmp	r3, r2
 8007974:	bfb8      	it	lt
 8007976:	4613      	movlt	r3, r2
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800797e:	460c      	mov	r4, r1
 8007980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007984:	b10a      	cbz	r2, 800798a <_printf_common+0x26>
 8007986:	3301      	adds	r3, #1
 8007988:	6033      	str	r3, [r6, #0]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	0699      	lsls	r1, r3, #26
 800798e:	bf42      	ittt	mi
 8007990:	6833      	ldrmi	r3, [r6, #0]
 8007992:	3302      	addmi	r3, #2
 8007994:	6033      	strmi	r3, [r6, #0]
 8007996:	6825      	ldr	r5, [r4, #0]
 8007998:	f015 0506 	ands.w	r5, r5, #6
 800799c:	d106      	bne.n	80079ac <_printf_common+0x48>
 800799e:	f104 0a19 	add.w	sl, r4, #25
 80079a2:	68e3      	ldr	r3, [r4, #12]
 80079a4:	6832      	ldr	r2, [r6, #0]
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	42ab      	cmp	r3, r5
 80079aa:	dc2b      	bgt.n	8007a04 <_printf_common+0xa0>
 80079ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b0:	1e13      	subs	r3, r2, #0
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	bf18      	it	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	0692      	lsls	r2, r2, #26
 80079ba:	d430      	bmi.n	8007a1e <_printf_common+0xba>
 80079bc:	4649      	mov	r1, r9
 80079be:	4638      	mov	r0, r7
 80079c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d023      	beq.n	8007a12 <_printf_common+0xae>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	f003 0306 	and.w	r3, r3, #6
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	bf14      	ite	ne
 80079d6:	2500      	movne	r5, #0
 80079d8:	6833      	ldreq	r3, [r6, #0]
 80079da:	f04f 0600 	mov.w	r6, #0
 80079de:	bf08      	it	eq
 80079e0:	68e5      	ldreq	r5, [r4, #12]
 80079e2:	f104 041a 	add.w	r4, r4, #26
 80079e6:	bf08      	it	eq
 80079e8:	1aed      	subeq	r5, r5, r3
 80079ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80079ee:	bf08      	it	eq
 80079f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bfc4      	itt	gt
 80079f8:	1a9b      	subgt	r3, r3, r2
 80079fa:	18ed      	addgt	r5, r5, r3
 80079fc:	42b5      	cmp	r5, r6
 80079fe:	d11a      	bne.n	8007a36 <_printf_common+0xd2>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e008      	b.n	8007a16 <_printf_common+0xb2>
 8007a04:	2301      	movs	r3, #1
 8007a06:	4652      	mov	r2, sl
 8007a08:	4649      	mov	r1, r9
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	47c0      	blx	r8
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d103      	bne.n	8007a1a <_printf_common+0xb6>
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	3501      	adds	r5, #1
 8007a1c:	e7c1      	b.n	80079a2 <_printf_common+0x3e>
 8007a1e:	2030      	movs	r0, #48	; 0x30
 8007a20:	18e1      	adds	r1, r4, r3
 8007a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a2c:	4422      	add	r2, r4
 8007a2e:	3302      	adds	r3, #2
 8007a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a34:	e7c2      	b.n	80079bc <_printf_common+0x58>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	47c0      	blx	r8
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0e6      	beq.n	8007a12 <_printf_common+0xae>
 8007a44:	3601      	adds	r6, #1
 8007a46:	e7d9      	b.n	80079fc <_printf_common+0x98>

08007a48 <_printf_i>:
 8007a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	7e0f      	ldrb	r7, [r1, #24]
 8007a4e:	4691      	mov	r9, r2
 8007a50:	2f78      	cmp	r7, #120	; 0x78
 8007a52:	4680      	mov	r8, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	469a      	mov	sl, r3
 8007a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a5e:	d807      	bhi.n	8007a70 <_printf_i+0x28>
 8007a60:	2f62      	cmp	r7, #98	; 0x62
 8007a62:	d80a      	bhi.n	8007a7a <_printf_i+0x32>
 8007a64:	2f00      	cmp	r7, #0
 8007a66:	f000 80d5 	beq.w	8007c14 <_printf_i+0x1cc>
 8007a6a:	2f58      	cmp	r7, #88	; 0x58
 8007a6c:	f000 80c1 	beq.w	8007bf2 <_printf_i+0x1aa>
 8007a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a78:	e03a      	b.n	8007af0 <_printf_i+0xa8>
 8007a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a7e:	2b15      	cmp	r3, #21
 8007a80:	d8f6      	bhi.n	8007a70 <_printf_i+0x28>
 8007a82:	a101      	add	r1, pc, #4	; (adr r1, 8007a88 <_printf_i+0x40>)
 8007a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a88:	08007ae1 	.word	0x08007ae1
 8007a8c:	08007af5 	.word	0x08007af5
 8007a90:	08007a71 	.word	0x08007a71
 8007a94:	08007a71 	.word	0x08007a71
 8007a98:	08007a71 	.word	0x08007a71
 8007a9c:	08007a71 	.word	0x08007a71
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007a71 	.word	0x08007a71
 8007aa8:	08007a71 	.word	0x08007a71
 8007aac:	08007a71 	.word	0x08007a71
 8007ab0:	08007a71 	.word	0x08007a71
 8007ab4:	08007bfb 	.word	0x08007bfb
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007bb5 	.word	0x08007bb5
 8007ac0:	08007a71 	.word	0x08007a71
 8007ac4:	08007a71 	.word	0x08007a71
 8007ac8:	08007c1d 	.word	0x08007c1d
 8007acc:	08007a71 	.word	0x08007a71
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007a71 	.word	0x08007a71
 8007ad8:	08007a71 	.word	0x08007a71
 8007adc:	08007bbd 	.word	0x08007bbd
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	1d1a      	adds	r2, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	602a      	str	r2, [r5, #0]
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0a0      	b.n	8007c36 <_printf_i+0x1ee>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	682b      	ldr	r3, [r5, #0]
 8007af8:	0607      	lsls	r7, r0, #24
 8007afa:	f103 0104 	add.w	r1, r3, #4
 8007afe:	6029      	str	r1, [r5, #0]
 8007b00:	d501      	bpl.n	8007b06 <_printf_i+0xbe>
 8007b02:	681e      	ldr	r6, [r3, #0]
 8007b04:	e003      	b.n	8007b0e <_printf_i+0xc6>
 8007b06:	0646      	lsls	r6, r0, #25
 8007b08:	d5fb      	bpl.n	8007b02 <_printf_i+0xba>
 8007b0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	da03      	bge.n	8007b1a <_printf_i+0xd2>
 8007b12:	232d      	movs	r3, #45	; 0x2d
 8007b14:	4276      	negs	r6, r6
 8007b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1a:	230a      	movs	r3, #10
 8007b1c:	4859      	ldr	r0, [pc, #356]	; (8007c84 <_printf_i+0x23c>)
 8007b1e:	e012      	b.n	8007b46 <_printf_i+0xfe>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	6029      	str	r1, [r5, #0]
 8007b28:	0605      	lsls	r5, r0, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0xe8>
 8007b2c:	681e      	ldr	r6, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0xee>
 8007b30:	0641      	lsls	r1, r0, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0xe4>
 8007b34:	881e      	ldrh	r6, [r3, #0]
 8007b36:	2f6f      	cmp	r7, #111	; 0x6f
 8007b38:	bf0c      	ite	eq
 8007b3a:	2308      	moveq	r3, #8
 8007b3c:	230a      	movne	r3, #10
 8007b3e:	4851      	ldr	r0, [pc, #324]	; (8007c84 <_printf_i+0x23c>)
 8007b40:	2100      	movs	r1, #0
 8007b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b46:	6865      	ldr	r5, [r4, #4]
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	bfa8      	it	ge
 8007b4c:	6821      	ldrge	r1, [r4, #0]
 8007b4e:	60a5      	str	r5, [r4, #8]
 8007b50:	bfa4      	itt	ge
 8007b52:	f021 0104 	bicge.w	r1, r1, #4
 8007b56:	6021      	strge	r1, [r4, #0]
 8007b58:	b90e      	cbnz	r6, 8007b5e <_printf_i+0x116>
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	d04b      	beq.n	8007bf6 <_printf_i+0x1ae>
 8007b5e:	4615      	mov	r5, r2
 8007b60:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b64:	fb03 6711 	mls	r7, r3, r1, r6
 8007b68:	5dc7      	ldrb	r7, [r0, r7]
 8007b6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b6e:	4637      	mov	r7, r6
 8007b70:	42bb      	cmp	r3, r7
 8007b72:	460e      	mov	r6, r1
 8007b74:	d9f4      	bls.n	8007b60 <_printf_i+0x118>
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d10b      	bne.n	8007b92 <_printf_i+0x14a>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	07de      	lsls	r6, r3, #31
 8007b7e:	d508      	bpl.n	8007b92 <_printf_i+0x14a>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	6861      	ldr	r1, [r4, #4]
 8007b84:	4299      	cmp	r1, r3
 8007b86:	bfde      	ittt	le
 8007b88:	2330      	movle	r3, #48	; 0x30
 8007b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b92:	1b52      	subs	r2, r2, r5
 8007b94:	6122      	str	r2, [r4, #16]
 8007b96:	464b      	mov	r3, r9
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f8cd a000 	str.w	sl, [sp]
 8007ba0:	aa03      	add	r2, sp, #12
 8007ba2:	f7ff fedf 	bl	8007964 <_printf_common>
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d14a      	bne.n	8007c40 <_printf_i+0x1f8>
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	b004      	add	sp, #16
 8007bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	f043 0320 	orr.w	r3, r3, #32
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	2778      	movs	r7, #120	; 0x78
 8007bbe:	4832      	ldr	r0, [pc, #200]	; (8007c88 <_printf_i+0x240>)
 8007bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	6829      	ldr	r1, [r5, #0]
 8007bc8:	061f      	lsls	r7, r3, #24
 8007bca:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bce:	d402      	bmi.n	8007bd6 <_printf_i+0x18e>
 8007bd0:	065f      	lsls	r7, r3, #25
 8007bd2:	bf48      	it	mi
 8007bd4:	b2b6      	uxthmi	r6, r6
 8007bd6:	07df      	lsls	r7, r3, #31
 8007bd8:	bf48      	it	mi
 8007bda:	f043 0320 	orrmi.w	r3, r3, #32
 8007bde:	6029      	str	r1, [r5, #0]
 8007be0:	bf48      	it	mi
 8007be2:	6023      	strmi	r3, [r4, #0]
 8007be4:	b91e      	cbnz	r6, 8007bee <_printf_i+0x1a6>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	f023 0320 	bic.w	r3, r3, #32
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	2310      	movs	r3, #16
 8007bf0:	e7a6      	b.n	8007b40 <_printf_i+0xf8>
 8007bf2:	4824      	ldr	r0, [pc, #144]	; (8007c84 <_printf_i+0x23c>)
 8007bf4:	e7e4      	b.n	8007bc0 <_printf_i+0x178>
 8007bf6:	4615      	mov	r5, r2
 8007bf8:	e7bd      	b.n	8007b76 <_printf_i+0x12e>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	6826      	ldr	r6, [r4, #0]
 8007bfe:	1d18      	adds	r0, r3, #4
 8007c00:	6961      	ldr	r1, [r4, #20]
 8007c02:	6028      	str	r0, [r5, #0]
 8007c04:	0635      	lsls	r5, r6, #24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	d501      	bpl.n	8007c0e <_printf_i+0x1c6>
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	e002      	b.n	8007c14 <_printf_i+0x1cc>
 8007c0e:	0670      	lsls	r0, r6, #25
 8007c10:	d5fb      	bpl.n	8007c0a <_printf_i+0x1c2>
 8007c12:	8019      	strh	r1, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	4615      	mov	r5, r2
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	e7bc      	b.n	8007b96 <_printf_i+0x14e>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	602a      	str	r2, [r5, #0]
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fbf2 	bl	8008412 <memchr>
 8007c2e:	b108      	cbz	r0, 8007c34 <_printf_i+0x1ec>
 8007c30:	1b40      	subs	r0, r0, r5
 8007c32:	6060      	str	r0, [r4, #4]
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3e:	e7aa      	b.n	8007b96 <_printf_i+0x14e>
 8007c40:	462a      	mov	r2, r5
 8007c42:	4649      	mov	r1, r9
 8007c44:	4640      	mov	r0, r8
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	47d0      	blx	sl
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d0ad      	beq.n	8007baa <_printf_i+0x162>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	079b      	lsls	r3, r3, #30
 8007c52:	d413      	bmi.n	8007c7c <_printf_i+0x234>
 8007c54:	68e0      	ldr	r0, [r4, #12]
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	bfb8      	it	lt
 8007c5c:	4618      	movlt	r0, r3
 8007c5e:	e7a6      	b.n	8007bae <_printf_i+0x166>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4632      	mov	r2, r6
 8007c64:	4649      	mov	r1, r9
 8007c66:	4640      	mov	r0, r8
 8007c68:	47d0      	blx	sl
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d09d      	beq.n	8007baa <_printf_i+0x162>
 8007c6e:	3501      	adds	r5, #1
 8007c70:	68e3      	ldr	r3, [r4, #12]
 8007c72:	9903      	ldr	r1, [sp, #12]
 8007c74:	1a5b      	subs	r3, r3, r1
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	dcf2      	bgt.n	8007c60 <_printf_i+0x218>
 8007c7a:	e7eb      	b.n	8007c54 <_printf_i+0x20c>
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	f104 0619 	add.w	r6, r4, #25
 8007c82:	e7f5      	b.n	8007c70 <_printf_i+0x228>
 8007c84:	0800ba24 	.word	0x0800ba24
 8007c88:	0800ba35 	.word	0x0800ba35

08007c8c <_scanf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	b087      	sub	sp, #28
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	688b      	ldr	r3, [r1, #8]
 8007c96:	4617      	mov	r7, r2
 8007c98:	1e5a      	subs	r2, r3, #1
 8007c9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c9e:	bf85      	ittet	hi
 8007ca0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ca4:	195b      	addhi	r3, r3, r5
 8007ca6:	2300      	movls	r3, #0
 8007ca8:	9302      	strhi	r3, [sp, #8]
 8007caa:	bf88      	it	hi
 8007cac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cb0:	468b      	mov	fp, r1
 8007cb2:	f04f 0500 	mov.w	r5, #0
 8007cb6:	bf8c      	ite	hi
 8007cb8:	608b      	strhi	r3, [r1, #8]
 8007cba:	9302      	strls	r3, [sp, #8]
 8007cbc:	680b      	ldr	r3, [r1, #0]
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007cc4:	f84b 3b1c 	str.w	r3, [fp], #28
 8007cc8:	460c      	mov	r4, r1
 8007cca:	465e      	mov	r6, fp
 8007ccc:	46aa      	mov	sl, r5
 8007cce:	46a9      	mov	r9, r5
 8007cd0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cd4:	9501      	str	r5, [sp, #4]
 8007cd6:	68a2      	ldr	r2, [r4, #8]
 8007cd8:	b152      	cbz	r2, 8007cf0 <_scanf_float+0x64>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b4e      	cmp	r3, #78	; 0x4e
 8007ce0:	d864      	bhi.n	8007dac <_scanf_float+0x120>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d83c      	bhi.n	8007d60 <_scanf_float+0xd4>
 8007ce6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007cea:	b2c8      	uxtb	r0, r1
 8007cec:	280e      	cmp	r0, #14
 8007cee:	d93a      	bls.n	8007d66 <_scanf_float+0xda>
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	d003      	beq.n	8007cfe <_scanf_float+0x72>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d02:	f1ba 0f01 	cmp.w	sl, #1
 8007d06:	f200 8113 	bhi.w	8007f30 <_scanf_float+0x2a4>
 8007d0a:	455e      	cmp	r6, fp
 8007d0c:	f200 8105 	bhi.w	8007f1a <_scanf_float+0x28e>
 8007d10:	2501      	movs	r5, #1
 8007d12:	4628      	mov	r0, r5
 8007d14:	b007      	add	sp, #28
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d1e:	2a0d      	cmp	r2, #13
 8007d20:	d8e6      	bhi.n	8007cf0 <_scanf_float+0x64>
 8007d22:	a101      	add	r1, pc, #4	; (adr r1, 8007d28 <_scanf_float+0x9c>)
 8007d24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d28:	08007e67 	.word	0x08007e67
 8007d2c:	08007cf1 	.word	0x08007cf1
 8007d30:	08007cf1 	.word	0x08007cf1
 8007d34:	08007cf1 	.word	0x08007cf1
 8007d38:	08007ec7 	.word	0x08007ec7
 8007d3c:	08007e9f 	.word	0x08007e9f
 8007d40:	08007cf1 	.word	0x08007cf1
 8007d44:	08007cf1 	.word	0x08007cf1
 8007d48:	08007e75 	.word	0x08007e75
 8007d4c:	08007cf1 	.word	0x08007cf1
 8007d50:	08007cf1 	.word	0x08007cf1
 8007d54:	08007cf1 	.word	0x08007cf1
 8007d58:	08007cf1 	.word	0x08007cf1
 8007d5c:	08007e2d 	.word	0x08007e2d
 8007d60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d64:	e7db      	b.n	8007d1e <_scanf_float+0x92>
 8007d66:	290e      	cmp	r1, #14
 8007d68:	d8c2      	bhi.n	8007cf0 <_scanf_float+0x64>
 8007d6a:	a001      	add	r0, pc, #4	; (adr r0, 8007d70 <_scanf_float+0xe4>)
 8007d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d70:	08007e1f 	.word	0x08007e1f
 8007d74:	08007cf1 	.word	0x08007cf1
 8007d78:	08007e1f 	.word	0x08007e1f
 8007d7c:	08007eb3 	.word	0x08007eb3
 8007d80:	08007cf1 	.word	0x08007cf1
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007e09 	.word	0x08007e09
 8007d8c:	08007e09 	.word	0x08007e09
 8007d90:	08007e09 	.word	0x08007e09
 8007d94:	08007e09 	.word	0x08007e09
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007e09 	.word	0x08007e09
 8007da8:	08007e09 	.word	0x08007e09
 8007dac:	2b6e      	cmp	r3, #110	; 0x6e
 8007dae:	d809      	bhi.n	8007dc4 <_scanf_float+0x138>
 8007db0:	2b60      	cmp	r3, #96	; 0x60
 8007db2:	d8b2      	bhi.n	8007d1a <_scanf_float+0x8e>
 8007db4:	2b54      	cmp	r3, #84	; 0x54
 8007db6:	d077      	beq.n	8007ea8 <_scanf_float+0x21c>
 8007db8:	2b59      	cmp	r3, #89	; 0x59
 8007dba:	d199      	bne.n	8007cf0 <_scanf_float+0x64>
 8007dbc:	2d07      	cmp	r5, #7
 8007dbe:	d197      	bne.n	8007cf0 <_scanf_float+0x64>
 8007dc0:	2508      	movs	r5, #8
 8007dc2:	e029      	b.n	8007e18 <_scanf_float+0x18c>
 8007dc4:	2b74      	cmp	r3, #116	; 0x74
 8007dc6:	d06f      	beq.n	8007ea8 <_scanf_float+0x21c>
 8007dc8:	2b79      	cmp	r3, #121	; 0x79
 8007dca:	e7f6      	b.n	8007dba <_scanf_float+0x12e>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	05c8      	lsls	r0, r1, #23
 8007dd0:	d51a      	bpl.n	8007e08 <_scanf_float+0x17c>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007dd8:	6021      	str	r1, [r4, #0]
 8007dda:	f109 0901 	add.w	r9, r9, #1
 8007dde:	b11b      	cbz	r3, 8007de8 <_scanf_float+0x15c>
 8007de0:	3b01      	subs	r3, #1
 8007de2:	3201      	adds	r2, #1
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	60a2      	str	r2, [r4, #8]
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	6123      	str	r3, [r4, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	f340 8084 	ble.w	8007f08 <_scanf_float+0x27c>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	603b      	str	r3, [r7, #0]
 8007e06:	e766      	b.n	8007cd6 <_scanf_float+0x4a>
 8007e08:	eb1a 0f05 	cmn.w	sl, r5
 8007e0c:	f47f af70 	bne.w	8007cf0 <_scanf_float+0x64>
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	f806 3b01 	strb.w	r3, [r6], #1
 8007e1c:	e7e4      	b.n	8007de8 <_scanf_float+0x15c>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	0610      	lsls	r0, r2, #24
 8007e22:	f57f af65 	bpl.w	8007cf0 <_scanf_float+0x64>
 8007e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e2a:	e7f4      	b.n	8007e16 <_scanf_float+0x18a>
 8007e2c:	f1ba 0f00 	cmp.w	sl, #0
 8007e30:	d10e      	bne.n	8007e50 <_scanf_float+0x1c4>
 8007e32:	f1b9 0f00 	cmp.w	r9, #0
 8007e36:	d10e      	bne.n	8007e56 <_scanf_float+0x1ca>
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e42:	d108      	bne.n	8007e56 <_scanf_float+0x1ca>
 8007e44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e48:	f04f 0a01 	mov.w	sl, #1
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	e7e3      	b.n	8007e18 <_scanf_float+0x18c>
 8007e50:	f1ba 0f02 	cmp.w	sl, #2
 8007e54:	d055      	beq.n	8007f02 <_scanf_float+0x276>
 8007e56:	2d01      	cmp	r5, #1
 8007e58:	d002      	beq.n	8007e60 <_scanf_float+0x1d4>
 8007e5a:	2d04      	cmp	r5, #4
 8007e5c:	f47f af48 	bne.w	8007cf0 <_scanf_float+0x64>
 8007e60:	3501      	adds	r5, #1
 8007e62:	b2ed      	uxtb	r5, r5
 8007e64:	e7d8      	b.n	8007e18 <_scanf_float+0x18c>
 8007e66:	f1ba 0f01 	cmp.w	sl, #1
 8007e6a:	f47f af41 	bne.w	8007cf0 <_scanf_float+0x64>
 8007e6e:	f04f 0a02 	mov.w	sl, #2
 8007e72:	e7d1      	b.n	8007e18 <_scanf_float+0x18c>
 8007e74:	b97d      	cbnz	r5, 8007e96 <_scanf_float+0x20a>
 8007e76:	f1b9 0f00 	cmp.w	r9, #0
 8007e7a:	f47f af3c 	bne.w	8007cf6 <_scanf_float+0x6a>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e88:	f47f af39 	bne.w	8007cfe <_scanf_float+0x72>
 8007e8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e90:	2501      	movs	r5, #1
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	e7c0      	b.n	8007e18 <_scanf_float+0x18c>
 8007e96:	2d03      	cmp	r5, #3
 8007e98:	d0e2      	beq.n	8007e60 <_scanf_float+0x1d4>
 8007e9a:	2d05      	cmp	r5, #5
 8007e9c:	e7de      	b.n	8007e5c <_scanf_float+0x1d0>
 8007e9e:	2d02      	cmp	r5, #2
 8007ea0:	f47f af26 	bne.w	8007cf0 <_scanf_float+0x64>
 8007ea4:	2503      	movs	r5, #3
 8007ea6:	e7b7      	b.n	8007e18 <_scanf_float+0x18c>
 8007ea8:	2d06      	cmp	r5, #6
 8007eaa:	f47f af21 	bne.w	8007cf0 <_scanf_float+0x64>
 8007eae:	2507      	movs	r5, #7
 8007eb0:	e7b2      	b.n	8007e18 <_scanf_float+0x18c>
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	0591      	lsls	r1, r2, #22
 8007eb6:	f57f af1b 	bpl.w	8007cf0 <_scanf_float+0x64>
 8007eba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ec4:	e7a8      	b.n	8007e18 <_scanf_float+0x18c>
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ecc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ed0:	d006      	beq.n	8007ee0 <_scanf_float+0x254>
 8007ed2:	0550      	lsls	r0, r2, #21
 8007ed4:	f57f af0c 	bpl.w	8007cf0 <_scanf_float+0x64>
 8007ed8:	f1b9 0f00 	cmp.w	r9, #0
 8007edc:	f43f af0f 	beq.w	8007cfe <_scanf_float+0x72>
 8007ee0:	0591      	lsls	r1, r2, #22
 8007ee2:	bf58      	it	pl
 8007ee4:	9901      	ldrpl	r1, [sp, #4]
 8007ee6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007eea:	bf58      	it	pl
 8007eec:	eba9 0101 	subpl.w	r1, r9, r1
 8007ef0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	bf58      	it	pl
 8007efa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	e78a      	b.n	8007e18 <_scanf_float+0x18c>
 8007f02:	f04f 0a03 	mov.w	sl, #3
 8007f06:	e787      	b.n	8007e18 <_scanf_float+0x18c>
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f10:	4798      	blx	r3
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f43f aedf 	beq.w	8007cd6 <_scanf_float+0x4a>
 8007f18:	e6ea      	b.n	8007cf0 <_scanf_float+0x64>
 8007f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4640      	mov	r0, r8
 8007f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f26:	4798      	blx	r3
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	e6ec      	b.n	8007d0a <_scanf_float+0x7e>
 8007f30:	1e6b      	subs	r3, r5, #1
 8007f32:	2b06      	cmp	r3, #6
 8007f34:	d825      	bhi.n	8007f82 <_scanf_float+0x2f6>
 8007f36:	2d02      	cmp	r5, #2
 8007f38:	d836      	bhi.n	8007fa8 <_scanf_float+0x31c>
 8007f3a:	455e      	cmp	r6, fp
 8007f3c:	f67f aee8 	bls.w	8007d10 <_scanf_float+0x84>
 8007f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f44:	463a      	mov	r2, r7
 8007f46:	4640      	mov	r0, r8
 8007f48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f4c:	4798      	blx	r3
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	e7f1      	b.n	8007f3a <_scanf_float+0x2ae>
 8007f56:	9802      	ldr	r0, [sp, #8]
 8007f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007f60:	463a      	mov	r2, r7
 8007f62:	9002      	str	r0, [sp, #8]
 8007f64:	4640      	mov	r0, r8
 8007f66:	4798      	blx	r3
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f72:	fa5f fa8a 	uxtb.w	sl, sl
 8007f76:	f1ba 0f02 	cmp.w	sl, #2
 8007f7a:	d1ec      	bne.n	8007f56 <_scanf_float+0x2ca>
 8007f7c:	3d03      	subs	r5, #3
 8007f7e:	b2ed      	uxtb	r5, r5
 8007f80:	1b76      	subs	r6, r6, r5
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	05da      	lsls	r2, r3, #23
 8007f86:	d52f      	bpl.n	8007fe8 <_scanf_float+0x35c>
 8007f88:	055b      	lsls	r3, r3, #21
 8007f8a:	d510      	bpl.n	8007fae <_scanf_float+0x322>
 8007f8c:	455e      	cmp	r6, fp
 8007f8e:	f67f aebf 	bls.w	8007d10 <_scanf_float+0x84>
 8007f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f96:	463a      	mov	r2, r7
 8007f98:	4640      	mov	r0, r8
 8007f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f9e:	4798      	blx	r3
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	e7f1      	b.n	8007f8c <_scanf_float+0x300>
 8007fa8:	46aa      	mov	sl, r5
 8007faa:	9602      	str	r6, [sp, #8]
 8007fac:	e7df      	b.n	8007f6e <_scanf_float+0x2e2>
 8007fae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	2965      	cmp	r1, #101	; 0x65
 8007fb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fba:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	d00c      	beq.n	8007fdc <_scanf_float+0x350>
 8007fc2:	2945      	cmp	r1, #69	; 0x45
 8007fc4:	d00a      	beq.n	8007fdc <_scanf_float+0x350>
 8007fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4798      	blx	r3
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	1eb5      	subs	r5, r6, #2
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	463a      	mov	r2, r7
 8007fde:	4640      	mov	r0, r8
 8007fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe4:	4798      	blx	r3
 8007fe6:	462e      	mov	r6, r5
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	f015 0510 	ands.w	r5, r5, #16
 8007fee:	d155      	bne.n	800809c <_scanf_float+0x410>
 8007ff0:	7035      	strb	r5, [r6, #0]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffc:	d11d      	bne.n	800803a <_scanf_float+0x3ae>
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	454b      	cmp	r3, r9
 8008002:	eba3 0209 	sub.w	r2, r3, r9
 8008006:	d125      	bne.n	8008054 <_scanf_float+0x3c8>
 8008008:	2200      	movs	r2, #0
 800800a:	4659      	mov	r1, fp
 800800c:	4640      	mov	r0, r8
 800800e:	f002 fb8b 	bl	800a728 <_strtod_r>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	f8d4 c000 	ldr.w	ip, [r4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f01c 0f02 	tst.w	ip, #2
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	f103 0204 	add.w	r2, r3, #4
 8008026:	d020      	beq.n	800806a <_scanf_float+0x3de>
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	600a      	str	r2, [r1, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	e9c3 6700 	strd	r6, r7, [r3]
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	3301      	adds	r3, #1
 8008036:	60e3      	str	r3, [r4, #12]
 8008038:	e66b      	b.n	8007d12 <_scanf_float+0x86>
 800803a:	9b04      	ldr	r3, [sp, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0e3      	beq.n	8008008 <_scanf_float+0x37c>
 8008040:	9905      	ldr	r1, [sp, #20]
 8008042:	230a      	movs	r3, #10
 8008044:	462a      	mov	r2, r5
 8008046:	4640      	mov	r0, r8
 8008048:	3101      	adds	r1, #1
 800804a:	f002 fbf1 	bl	800a830 <_strtol_r>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	9e05      	ldr	r6, [sp, #20]
 8008052:	1ac2      	subs	r2, r0, r3
 8008054:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008058:	429e      	cmp	r6, r3
 800805a:	bf28      	it	cs
 800805c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008060:	4630      	mov	r0, r6
 8008062:	490f      	ldr	r1, [pc, #60]	; (80080a0 <_scanf_float+0x414>)
 8008064:	f000 f8e2 	bl	800822c <siprintf>
 8008068:	e7ce      	b.n	8008008 <_scanf_float+0x37c>
 800806a:	f01c 0f04 	tst.w	ip, #4
 800806e:	d1db      	bne.n	8008028 <_scanf_float+0x39c>
 8008070:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008074:	f8cc 2000 	str.w	r2, [ip]
 8008078:	f8d3 8000 	ldr.w	r8, [r3]
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	f7f8 fcc4 	bl	8000a0c <__aeabi_dcmpun>
 8008084:	b128      	cbz	r0, 8008092 <_scanf_float+0x406>
 8008086:	4807      	ldr	r0, [pc, #28]	; (80080a4 <_scanf_float+0x418>)
 8008088:	f000 f9e0 	bl	800844c <nanf>
 800808c:	f8c8 0000 	str.w	r0, [r8]
 8008090:	e7cf      	b.n	8008032 <_scanf_float+0x3a6>
 8008092:	4630      	mov	r0, r6
 8008094:	4639      	mov	r1, r7
 8008096:	f7f8 fd17 	bl	8000ac8 <__aeabi_d2f>
 800809a:	e7f7      	b.n	800808c <_scanf_float+0x400>
 800809c:	2500      	movs	r5, #0
 800809e:	e638      	b.n	8007d12 <_scanf_float+0x86>
 80080a0:	0800ba46 	.word	0x0800ba46
 80080a4:	0800bddd 	.word	0x0800bddd

080080a8 <std>:
 80080a8:	2300      	movs	r3, #0
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9c0 3300 	strd	r3, r3, [r0]
 80080b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b6:	6083      	str	r3, [r0, #8]
 80080b8:	8181      	strh	r1, [r0, #12]
 80080ba:	6643      	str	r3, [r0, #100]	; 0x64
 80080bc:	81c2      	strh	r2, [r0, #14]
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	4619      	mov	r1, r3
 80080c2:	2208      	movs	r2, #8
 80080c4:	305c      	adds	r0, #92	; 0x5c
 80080c6:	f000 f914 	bl	80082f2 <memset>
 80080ca:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <std+0x58>)
 80080cc:	6224      	str	r4, [r4, #32]
 80080ce:	6263      	str	r3, [r4, #36]	; 0x24
 80080d0:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <std+0x5c>)
 80080d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <std+0x60>)
 80080d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <std+0x64>)
 80080da:	6323      	str	r3, [r4, #48]	; 0x30
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <std+0x68>)
 80080de:	429c      	cmp	r4, r3
 80080e0:	d006      	beq.n	80080f0 <std+0x48>
 80080e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80080e6:	4294      	cmp	r4, r2
 80080e8:	d002      	beq.n	80080f0 <std+0x48>
 80080ea:	33d0      	adds	r3, #208	; 0xd0
 80080ec:	429c      	cmp	r4, r3
 80080ee:	d105      	bne.n	80080fc <std+0x54>
 80080f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f8:	f000 b988 	b.w	800840c <__retarget_lock_init_recursive>
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	bf00      	nop
 8008100:	0800826d 	.word	0x0800826d
 8008104:	0800828f 	.word	0x0800828f
 8008108:	080082c7 	.word	0x080082c7
 800810c:	080082eb 	.word	0x080082eb
 8008110:	20000930 	.word	0x20000930

08008114 <stdio_exit_handler>:
 8008114:	4a02      	ldr	r2, [pc, #8]	; (8008120 <stdio_exit_handler+0xc>)
 8008116:	4903      	ldr	r1, [pc, #12]	; (8008124 <stdio_exit_handler+0x10>)
 8008118:	4803      	ldr	r0, [pc, #12]	; (8008128 <stdio_exit_handler+0x14>)
 800811a:	f000 b869 	b.w	80081f0 <_fwalk_sglue>
 800811e:	bf00      	nop
 8008120:	2000000c 	.word	0x2000000c
 8008124:	0800abe9 	.word	0x0800abe9
 8008128:	20000018 	.word	0x20000018

0800812c <cleanup_stdio>:
 800812c:	6841      	ldr	r1, [r0, #4]
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <cleanup_stdio+0x34>)
 8008130:	b510      	push	{r4, lr}
 8008132:	4299      	cmp	r1, r3
 8008134:	4604      	mov	r4, r0
 8008136:	d001      	beq.n	800813c <cleanup_stdio+0x10>
 8008138:	f002 fd56 	bl	800abe8 <_fflush_r>
 800813c:	68a1      	ldr	r1, [r4, #8]
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <cleanup_stdio+0x38>)
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <cleanup_stdio+0x1e>
 8008144:	4620      	mov	r0, r4
 8008146:	f002 fd4f 	bl	800abe8 <_fflush_r>
 800814a:	68e1      	ldr	r1, [r4, #12]
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <cleanup_stdio+0x3c>)
 800814e:	4299      	cmp	r1, r3
 8008150:	d004      	beq.n	800815c <cleanup_stdio+0x30>
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f002 bd46 	b.w	800abe8 <_fflush_r>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	20000930 	.word	0x20000930
 8008164:	20000998 	.word	0x20000998
 8008168:	20000a00 	.word	0x20000a00

0800816c <global_stdio_init.part.0>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <global_stdio_init.part.0+0x30>)
 8008170:	4c0b      	ldr	r4, [pc, #44]	; (80081a0 <global_stdio_init.part.0+0x34>)
 8008172:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <global_stdio_init.part.0+0x38>)
 8008174:	4620      	mov	r0, r4
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	2104      	movs	r1, #4
 800817a:	2200      	movs	r2, #0
 800817c:	f7ff ff94 	bl	80080a8 <std>
 8008180:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008184:	2201      	movs	r2, #1
 8008186:	2109      	movs	r1, #9
 8008188:	f7ff ff8e 	bl	80080a8 <std>
 800818c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008190:	2202      	movs	r2, #2
 8008192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008196:	2112      	movs	r1, #18
 8008198:	f7ff bf86 	b.w	80080a8 <std>
 800819c:	20000a68 	.word	0x20000a68
 80081a0:	20000930 	.word	0x20000930
 80081a4:	08008115 	.word	0x08008115

080081a8 <__sfp_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	; (80081b0 <__sfp_lock_acquire+0x8>)
 80081aa:	f000 b930 	b.w	800840e <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	20000a71 	.word	0x20000a71

080081b4 <__sfp_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sfp_lock_release+0x8>)
 80081b6:	f000 b92b 	b.w	8008410 <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	20000a71 	.word	0x20000a71

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sfp_lock_acquire>
 80081c8:	6a23      	ldr	r3, [r4, #32]
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sfp_lock_release>
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <__sinit+0x28>)
 80081d6:	6223      	str	r3, [r4, #32]
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <__sinit+0x2c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f5      	bne.n	80081cc <__sinit+0xc>
 80081e0:	f7ff ffc4 	bl	800816c <global_stdio_init.part.0>
 80081e4:	e7f2      	b.n	80081cc <__sinit+0xc>
 80081e6:	bf00      	nop
 80081e8:	0800812d 	.word	0x0800812d
 80081ec:	20000a68 	.word	0x20000a68

080081f0 <_fwalk_sglue>:
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4607      	mov	r7, r0
 80081f6:	4688      	mov	r8, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	2600      	movs	r6, #0
 80081fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008200:	f1b9 0901 	subs.w	r9, r9, #1
 8008204:	d505      	bpl.n	8008212 <_fwalk_sglue+0x22>
 8008206:	6824      	ldr	r4, [r4, #0]
 8008208:	2c00      	cmp	r4, #0
 800820a:	d1f7      	bne.n	80081fc <_fwalk_sglue+0xc>
 800820c:	4630      	mov	r0, r6
 800820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d907      	bls.n	8008228 <_fwalk_sglue+0x38>
 8008218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800821c:	3301      	adds	r3, #1
 800821e:	d003      	beq.n	8008228 <_fwalk_sglue+0x38>
 8008220:	4629      	mov	r1, r5
 8008222:	4638      	mov	r0, r7
 8008224:	47c0      	blx	r8
 8008226:	4306      	orrs	r6, r0
 8008228:	3568      	adds	r5, #104	; 0x68
 800822a:	e7e9      	b.n	8008200 <_fwalk_sglue+0x10>

0800822c <siprintf>:
 800822c:	b40e      	push	{r1, r2, r3}
 800822e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008232:	b500      	push	{lr}
 8008234:	b09c      	sub	sp, #112	; 0x70
 8008236:	ab1d      	add	r3, sp, #116	; 0x74
 8008238:	9002      	str	r0, [sp, #8]
 800823a:	9006      	str	r0, [sp, #24]
 800823c:	9107      	str	r1, [sp, #28]
 800823e:	9104      	str	r1, [sp, #16]
 8008240:	4808      	ldr	r0, [pc, #32]	; (8008264 <siprintf+0x38>)
 8008242:	4909      	ldr	r1, [pc, #36]	; (8008268 <siprintf+0x3c>)
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	9105      	str	r1, [sp, #20]
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	a902      	add	r1, sp, #8
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	f002 fb4a 	bl	800a8e8 <_svfiprintf_r>
 8008254:	2200      	movs	r2, #0
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	b01c      	add	sp, #112	; 0x70
 800825c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008260:	b003      	add	sp, #12
 8008262:	4770      	bx	lr
 8008264:	20000064 	.word	0x20000064
 8008268:	ffff0208 	.word	0xffff0208

0800826c <__sread>:
 800826c:	b510      	push	{r4, lr}
 800826e:	460c      	mov	r4, r1
 8008270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008274:	f000 f86c 	bl	8008350 <_read_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	bfab      	itete	ge
 800827c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800827e:	89a3      	ldrhlt	r3, [r4, #12]
 8008280:	181b      	addge	r3, r3, r0
 8008282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008286:	bfac      	ite	ge
 8008288:	6563      	strge	r3, [r4, #84]	; 0x54
 800828a:	81a3      	strhlt	r3, [r4, #12]
 800828c:	bd10      	pop	{r4, pc}

0800828e <__swrite>:
 800828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	461f      	mov	r7, r3
 8008294:	898b      	ldrh	r3, [r1, #12]
 8008296:	4605      	mov	r5, r0
 8008298:	05db      	lsls	r3, r3, #23
 800829a:	460c      	mov	r4, r1
 800829c:	4616      	mov	r6, r2
 800829e:	d505      	bpl.n	80082ac <__swrite+0x1e>
 80082a0:	2302      	movs	r3, #2
 80082a2:	2200      	movs	r2, #0
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 f840 	bl	800832c <_lseek_r>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	4632      	mov	r2, r6
 80082b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	4628      	mov	r0, r5
 80082b8:	463b      	mov	r3, r7
 80082ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c2:	f000 b867 	b.w	8008394 <_write_r>

080082c6 <__sseek>:
 80082c6:	b510      	push	{r4, lr}
 80082c8:	460c      	mov	r4, r1
 80082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ce:	f000 f82d 	bl	800832c <_lseek_r>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	bf15      	itete	ne
 80082d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082e2:	81a3      	strheq	r3, [r4, #12]
 80082e4:	bf18      	it	ne
 80082e6:	81a3      	strhne	r3, [r4, #12]
 80082e8:	bd10      	pop	{r4, pc}

080082ea <__sclose>:
 80082ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ee:	f000 b80d 	b.w	800830c <_close_r>

080082f2 <memset>:
 80082f2:	4603      	mov	r3, r0
 80082f4:	4402      	add	r2, r0
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d100      	bne.n	80082fc <memset+0xa>
 80082fa:	4770      	bx	lr
 80082fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008300:	e7f9      	b.n	80082f6 <memset+0x4>
	...

08008304 <_localeconv_r>:
 8008304:	4800      	ldr	r0, [pc, #0]	; (8008308 <_localeconv_r+0x4>)
 8008306:	4770      	bx	lr
 8008308:	20000158 	.word	0x20000158

0800830c <_close_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	2300      	movs	r3, #0
 8008310:	4d05      	ldr	r5, [pc, #20]	; (8008328 <_close_r+0x1c>)
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7fb fb70 	bl	80039fc <_close>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_close_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_close_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20000a6c 	.word	0x20000a6c

0800832c <_lseek_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	2200      	movs	r2, #0
 8008336:	4d05      	ldr	r5, [pc, #20]	; (800834c <_lseek_r+0x20>)
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7fb fb82 	bl	8003a44 <_lseek>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_lseek_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_lseek_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000a6c 	.word	0x20000a6c

08008350 <_read_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	2200      	movs	r2, #0
 800835a:	4d05      	ldr	r5, [pc, #20]	; (8008370 <_read_r+0x20>)
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fb fb2f 	bl	80039c2 <_read>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_read_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_read_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20000a6c 	.word	0x20000a6c

08008374 <_sbrk_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	2300      	movs	r3, #0
 8008378:	4d05      	ldr	r5, [pc, #20]	; (8008390 <_sbrk_r+0x1c>)
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	602b      	str	r3, [r5, #0]
 8008380:	f7fb fb6c 	bl	8003a5c <_sbrk>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_sbrk_r+0x1a>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_sbrk_r+0x1a>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20000a6c 	.word	0x20000a6c

08008394 <_write_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	4611      	mov	r1, r2
 800839c:	2200      	movs	r2, #0
 800839e:	4d05      	ldr	r5, [pc, #20]	; (80083b4 <_write_r+0x20>)
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7fb fc78 	bl	8003c98 <_write>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_write_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_write_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000a6c 	.word	0x20000a6c

080083b8 <__errno>:
 80083b8:	4b01      	ldr	r3, [pc, #4]	; (80083c0 <__errno+0x8>)
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20000064 	.word	0x20000064

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	2600      	movs	r6, #0
 80083c8:	4d0c      	ldr	r5, [pc, #48]	; (80083fc <__libc_init_array+0x38>)
 80083ca:	4c0d      	ldr	r4, [pc, #52]	; (8008400 <__libc_init_array+0x3c>)
 80083cc:	1b64      	subs	r4, r4, r5
 80083ce:	10a4      	asrs	r4, r4, #2
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	f003 fafc 	bl	800b9d0 <_init>
 80083d8:	2600      	movs	r6, #0
 80083da:	4d0a      	ldr	r5, [pc, #40]	; (8008404 <__libc_init_array+0x40>)
 80083dc:	4c0a      	ldr	r4, [pc, #40]	; (8008408 <__libc_init_array+0x44>)
 80083de:	1b64      	subs	r4, r4, r5
 80083e0:	10a4      	asrs	r4, r4, #2
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	0800be40 	.word	0x0800be40
 8008400:	0800be40 	.word	0x0800be40
 8008404:	0800be40 	.word	0x0800be40
 8008408:	0800be44 	.word	0x0800be44

0800840c <__retarget_lock_init_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_acquire_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_release_recursive>:
 8008410:	4770      	bx	lr

08008412 <memchr>:
 8008412:	4603      	mov	r3, r0
 8008414:	b510      	push	{r4, lr}
 8008416:	b2c9      	uxtb	r1, r1
 8008418:	4402      	add	r2, r0
 800841a:	4293      	cmp	r3, r2
 800841c:	4618      	mov	r0, r3
 800841e:	d101      	bne.n	8008424 <memchr+0x12>
 8008420:	2000      	movs	r0, #0
 8008422:	e003      	b.n	800842c <memchr+0x1a>
 8008424:	7804      	ldrb	r4, [r0, #0]
 8008426:	3301      	adds	r3, #1
 8008428:	428c      	cmp	r4, r1
 800842a:	d1f6      	bne.n	800841a <memchr+0x8>
 800842c:	bd10      	pop	{r4, pc}

0800842e <memcpy>:
 800842e:	440a      	add	r2, r1
 8008430:	4291      	cmp	r1, r2
 8008432:	f100 33ff 	add.w	r3, r0, #4294967295
 8008436:	d100      	bne.n	800843a <memcpy+0xc>
 8008438:	4770      	bx	lr
 800843a:	b510      	push	{r4, lr}
 800843c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008440:	4291      	cmp	r1, r2
 8008442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008446:	d1f9      	bne.n	800843c <memcpy+0xe>
 8008448:	bd10      	pop	{r4, pc}
	...

0800844c <nanf>:
 800844c:	4800      	ldr	r0, [pc, #0]	; (8008450 <nanf+0x4>)
 800844e:	4770      	bx	lr
 8008450:	7fc00000 	.word	0x7fc00000

08008454 <quorem>:
 8008454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	6903      	ldr	r3, [r0, #16]
 800845a:	690c      	ldr	r4, [r1, #16]
 800845c:	4607      	mov	r7, r0
 800845e:	42a3      	cmp	r3, r4
 8008460:	db7f      	blt.n	8008562 <quorem+0x10e>
 8008462:	3c01      	subs	r4, #1
 8008464:	f100 0514 	add.w	r5, r0, #20
 8008468:	f101 0814 	add.w	r8, r1, #20
 800846c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800847a:	3301      	adds	r3, #1
 800847c:	429a      	cmp	r2, r3
 800847e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008482:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008486:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800848a:	d331      	bcc.n	80084f0 <quorem+0x9c>
 800848c:	f04f 0e00 	mov.w	lr, #0
 8008490:	4640      	mov	r0, r8
 8008492:	46ac      	mov	ip, r5
 8008494:	46f2      	mov	sl, lr
 8008496:	f850 2b04 	ldr.w	r2, [r0], #4
 800849a:	b293      	uxth	r3, r2
 800849c:	fb06 e303 	mla	r3, r6, r3, lr
 80084a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084a4:	0c1a      	lsrs	r2, r3, #16
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	fb06 220e 	mla	r2, r6, lr, r2
 80084ac:	ebaa 0303 	sub.w	r3, sl, r3
 80084b0:	f8dc a000 	ldr.w	sl, [ip]
 80084b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084b8:	fa1f fa8a 	uxth.w	sl, sl
 80084bc:	4453      	add	r3, sl
 80084be:	f8dc a000 	ldr.w	sl, [ip]
 80084c2:	b292      	uxth	r2, r2
 80084c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d2:	4581      	cmp	r9, r0
 80084d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084d8:	f84c 3b04 	str.w	r3, [ip], #4
 80084dc:	d2db      	bcs.n	8008496 <quorem+0x42>
 80084de:	f855 300b 	ldr.w	r3, [r5, fp]
 80084e2:	b92b      	cbnz	r3, 80084f0 <quorem+0x9c>
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	3b04      	subs	r3, #4
 80084e8:	429d      	cmp	r5, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	d32d      	bcc.n	800854a <quorem+0xf6>
 80084ee:	613c      	str	r4, [r7, #16]
 80084f0:	4638      	mov	r0, r7
 80084f2:	f001 f929 	bl	8009748 <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	db23      	blt.n	8008542 <quorem+0xee>
 80084fa:	4629      	mov	r1, r5
 80084fc:	2000      	movs	r0, #0
 80084fe:	3601      	adds	r6, #1
 8008500:	f858 2b04 	ldr.w	r2, [r8], #4
 8008504:	f8d1 c000 	ldr.w	ip, [r1]
 8008508:	b293      	uxth	r3, r2
 800850a:	1ac3      	subs	r3, r0, r3
 800850c:	0c12      	lsrs	r2, r2, #16
 800850e:	fa1f f08c 	uxth.w	r0, ip
 8008512:	4403      	add	r3, r0
 8008514:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800851c:	b29b      	uxth	r3, r3
 800851e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008522:	45c1      	cmp	r9, r8
 8008524:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008528:	f841 3b04 	str.w	r3, [r1], #4
 800852c:	d2e8      	bcs.n	8008500 <quorem+0xac>
 800852e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008536:	b922      	cbnz	r2, 8008542 <quorem+0xee>
 8008538:	3b04      	subs	r3, #4
 800853a:	429d      	cmp	r5, r3
 800853c:	461a      	mov	r2, r3
 800853e:	d30a      	bcc.n	8008556 <quorem+0x102>
 8008540:	613c      	str	r4, [r7, #16]
 8008542:	4630      	mov	r0, r6
 8008544:	b003      	add	sp, #12
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	3b04      	subs	r3, #4
 800854e:	2a00      	cmp	r2, #0
 8008550:	d1cd      	bne.n	80084ee <quorem+0x9a>
 8008552:	3c01      	subs	r4, #1
 8008554:	e7c8      	b.n	80084e8 <quorem+0x94>
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	3b04      	subs	r3, #4
 800855a:	2a00      	cmp	r2, #0
 800855c:	d1f0      	bne.n	8008540 <quorem+0xec>
 800855e:	3c01      	subs	r4, #1
 8008560:	e7eb      	b.n	800853a <quorem+0xe6>
 8008562:	2000      	movs	r0, #0
 8008564:	e7ee      	b.n	8008544 <quorem+0xf0>
	...

08008568 <_dtoa_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	4616      	mov	r6, r2
 800856e:	461f      	mov	r7, r3
 8008570:	69c4      	ldr	r4, [r0, #28]
 8008572:	b099      	sub	sp, #100	; 0x64
 8008574:	4605      	mov	r5, r0
 8008576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800857a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800857e:	b974      	cbnz	r4, 800859e <_dtoa_r+0x36>
 8008580:	2010      	movs	r0, #16
 8008582:	f7fe fe71 	bl	8007268 <malloc>
 8008586:	4602      	mov	r2, r0
 8008588:	61e8      	str	r0, [r5, #28]
 800858a:	b920      	cbnz	r0, 8008596 <_dtoa_r+0x2e>
 800858c:	21ef      	movs	r1, #239	; 0xef
 800858e:	4bac      	ldr	r3, [pc, #688]	; (8008840 <_dtoa_r+0x2d8>)
 8008590:	48ac      	ldr	r0, [pc, #688]	; (8008844 <_dtoa_r+0x2dc>)
 8008592:	f002 fb83 	bl	800ac9c <__assert_func>
 8008596:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800859a:	6004      	str	r4, [r0, #0]
 800859c:	60c4      	str	r4, [r0, #12]
 800859e:	69eb      	ldr	r3, [r5, #28]
 80085a0:	6819      	ldr	r1, [r3, #0]
 80085a2:	b151      	cbz	r1, 80085ba <_dtoa_r+0x52>
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	2301      	movs	r3, #1
 80085a8:	4093      	lsls	r3, r2
 80085aa:	604a      	str	r2, [r1, #4]
 80085ac:	608b      	str	r3, [r1, #8]
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fe46 	bl	8009240 <_Bfree>
 80085b4:	2200      	movs	r2, #0
 80085b6:	69eb      	ldr	r3, [r5, #28]
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	1e3b      	subs	r3, r7, #0
 80085bc:	bfaf      	iteee	ge
 80085be:	2300      	movge	r3, #0
 80085c0:	2201      	movlt	r2, #1
 80085c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085c6:	9305      	strlt	r3, [sp, #20]
 80085c8:	bfa8      	it	ge
 80085ca:	f8c8 3000 	strge.w	r3, [r8]
 80085ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80085d2:	4b9d      	ldr	r3, [pc, #628]	; (8008848 <_dtoa_r+0x2e0>)
 80085d4:	bfb8      	it	lt
 80085d6:	f8c8 2000 	strlt.w	r2, [r8]
 80085da:	ea33 0309 	bics.w	r3, r3, r9
 80085de:	d119      	bne.n	8008614 <_dtoa_r+0xac>
 80085e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80085e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ec:	4333      	orrs	r3, r6
 80085ee:	f000 8589 	beq.w	8009104 <_dtoa_r+0xb9c>
 80085f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085f4:	b953      	cbnz	r3, 800860c <_dtoa_r+0xa4>
 80085f6:	4b95      	ldr	r3, [pc, #596]	; (800884c <_dtoa_r+0x2e4>)
 80085f8:	e023      	b.n	8008642 <_dtoa_r+0xda>
 80085fa:	4b95      	ldr	r3, [pc, #596]	; (8008850 <_dtoa_r+0x2e8>)
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	3308      	adds	r3, #8
 8008600:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	9803      	ldr	r0, [sp, #12]
 8008606:	b019      	add	sp, #100	; 0x64
 8008608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	4b8f      	ldr	r3, [pc, #572]	; (800884c <_dtoa_r+0x2e4>)
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	3303      	adds	r3, #3
 8008612:	e7f5      	b.n	8008600 <_dtoa_r+0x98>
 8008614:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008618:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800861c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	f7f8 f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8008628:	4680      	mov	r8, r0
 800862a:	b160      	cbz	r0, 8008646 <_dtoa_r+0xde>
 800862c:	2301      	movs	r3, #1
 800862e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8562 	beq.w	80090fe <_dtoa_r+0xb96>
 800863a:	4b86      	ldr	r3, [pc, #536]	; (8008854 <_dtoa_r+0x2ec>)
 800863c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	3b01      	subs	r3, #1
 8008642:	9303      	str	r3, [sp, #12]
 8008644:	e7de      	b.n	8008604 <_dtoa_r+0x9c>
 8008646:	ab16      	add	r3, sp, #88	; 0x58
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	ab17      	add	r3, sp, #92	; 0x5c
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	4628      	mov	r0, r5
 8008650:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008654:	f001 f988 	bl	8009968 <__d2b>
 8008658:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800865c:	4682      	mov	sl, r0
 800865e:	2c00      	cmp	r4, #0
 8008660:	d07e      	beq.n	8008760 <_dtoa_r+0x1f8>
 8008662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008668:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800866c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008670:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008674:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008678:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800867c:	4619      	mov	r1, r3
 800867e:	2200      	movs	r2, #0
 8008680:	4b75      	ldr	r3, [pc, #468]	; (8008858 <_dtoa_r+0x2f0>)
 8008682:	f7f7 fd71 	bl	8000168 <__aeabi_dsub>
 8008686:	a368      	add	r3, pc, #416	; (adr r3, 8008828 <_dtoa_r+0x2c0>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 ff24 	bl	80004d8 <__aeabi_dmul>
 8008690:	a367      	add	r3, pc, #412	; (adr r3, 8008830 <_dtoa_r+0x2c8>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fd69 	bl	800016c <__adddf3>
 800869a:	4606      	mov	r6, r0
 800869c:	4620      	mov	r0, r4
 800869e:	460f      	mov	r7, r1
 80086a0:	f7f7 feb0 	bl	8000404 <__aeabi_i2d>
 80086a4:	a364      	add	r3, pc, #400	; (adr r3, 8008838 <_dtoa_r+0x2d0>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f7 ff15 	bl	80004d8 <__aeabi_dmul>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4630      	mov	r0, r6
 80086b4:	4639      	mov	r1, r7
 80086b6:	f7f7 fd59 	bl	800016c <__adddf3>
 80086ba:	4606      	mov	r6, r0
 80086bc:	460f      	mov	r7, r1
 80086be:	f7f8 f9bb 	bl	8000a38 <__aeabi_d2iz>
 80086c2:	2200      	movs	r2, #0
 80086c4:	4683      	mov	fp, r0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f8 f976 	bl	80009bc <__aeabi_dcmplt>
 80086d0:	b148      	cbz	r0, 80086e6 <_dtoa_r+0x17e>
 80086d2:	4658      	mov	r0, fp
 80086d4:	f7f7 fe96 	bl	8000404 <__aeabi_i2d>
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	f7f8 f964 	bl	80009a8 <__aeabi_dcmpeq>
 80086e0:	b908      	cbnz	r0, 80086e6 <_dtoa_r+0x17e>
 80086e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086e6:	f1bb 0f16 	cmp.w	fp, #22
 80086ea:	d857      	bhi.n	800879c <_dtoa_r+0x234>
 80086ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086f0:	4b5a      	ldr	r3, [pc, #360]	; (800885c <_dtoa_r+0x2f4>)
 80086f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f8 f95f 	bl	80009bc <__aeabi_dcmplt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d04e      	beq.n	80087a0 <_dtoa_r+0x238>
 8008702:	2300      	movs	r3, #0
 8008704:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008708:	930f      	str	r3, [sp, #60]	; 0x3c
 800870a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800870c:	1b1b      	subs	r3, r3, r4
 800870e:	1e5a      	subs	r2, r3, #1
 8008710:	bf46      	itte	mi
 8008712:	f1c3 0901 	rsbmi	r9, r3, #1
 8008716:	2300      	movmi	r3, #0
 8008718:	f04f 0900 	movpl.w	r9, #0
 800871c:	9209      	str	r2, [sp, #36]	; 0x24
 800871e:	bf48      	it	mi
 8008720:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008722:	f1bb 0f00 	cmp.w	fp, #0
 8008726:	db3d      	blt.n	80087a4 <_dtoa_r+0x23c>
 8008728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800872e:	445b      	add	r3, fp
 8008730:	9309      	str	r3, [sp, #36]	; 0x24
 8008732:	2300      	movs	r3, #0
 8008734:	930a      	str	r3, [sp, #40]	; 0x28
 8008736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008738:	2b09      	cmp	r3, #9
 800873a:	d867      	bhi.n	800880c <_dtoa_r+0x2a4>
 800873c:	2b05      	cmp	r3, #5
 800873e:	bfc4      	itt	gt
 8008740:	3b04      	subgt	r3, #4
 8008742:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008746:	bfc8      	it	gt
 8008748:	2400      	movgt	r4, #0
 800874a:	f1a3 0302 	sub.w	r3, r3, #2
 800874e:	bfd8      	it	le
 8008750:	2401      	movle	r4, #1
 8008752:	2b03      	cmp	r3, #3
 8008754:	f200 8086 	bhi.w	8008864 <_dtoa_r+0x2fc>
 8008758:	e8df f003 	tbb	[pc, r3]
 800875c:	5637392c 	.word	0x5637392c
 8008760:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008764:	441c      	add	r4, r3
 8008766:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800876a:	2b20      	cmp	r3, #32
 800876c:	bfc1      	itttt	gt
 800876e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008772:	fa09 f903 	lslgt.w	r9, r9, r3
 8008776:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800877a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800877e:	bfd6      	itet	le
 8008780:	f1c3 0320 	rsble	r3, r3, #32
 8008784:	ea49 0003 	orrgt.w	r0, r9, r3
 8008788:	fa06 f003 	lslle.w	r0, r6, r3
 800878c:	f7f7 fe2a 	bl	80003e4 <__aeabi_ui2d>
 8008790:	2201      	movs	r2, #1
 8008792:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008796:	3c01      	subs	r4, #1
 8008798:	9213      	str	r2, [sp, #76]	; 0x4c
 800879a:	e76f      	b.n	800867c <_dtoa_r+0x114>
 800879c:	2301      	movs	r3, #1
 800879e:	e7b3      	b.n	8008708 <_dtoa_r+0x1a0>
 80087a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80087a2:	e7b2      	b.n	800870a <_dtoa_r+0x1a2>
 80087a4:	f1cb 0300 	rsb	r3, fp, #0
 80087a8:	930a      	str	r3, [sp, #40]	; 0x28
 80087aa:	2300      	movs	r3, #0
 80087ac:	eba9 090b 	sub.w	r9, r9, fp
 80087b0:	930e      	str	r3, [sp, #56]	; 0x38
 80087b2:	e7c0      	b.n	8008736 <_dtoa_r+0x1ce>
 80087b4:	2300      	movs	r3, #0
 80087b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dc55      	bgt.n	800886a <_dtoa_r+0x302>
 80087be:	2301      	movs	r3, #1
 80087c0:	461a      	mov	r2, r3
 80087c2:	9306      	str	r3, [sp, #24]
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80087c8:	e00b      	b.n	80087e2 <_dtoa_r+0x27a>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e7f3      	b.n	80087b6 <_dtoa_r+0x24e>
 80087ce:	2300      	movs	r3, #0
 80087d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087d4:	445b      	add	r3, fp
 80087d6:	9306      	str	r3, [sp, #24]
 80087d8:	3301      	adds	r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	9308      	str	r3, [sp, #32]
 80087de:	bfb8      	it	lt
 80087e0:	2301      	movlt	r3, #1
 80087e2:	2100      	movs	r1, #0
 80087e4:	2204      	movs	r2, #4
 80087e6:	69e8      	ldr	r0, [r5, #28]
 80087e8:	f102 0614 	add.w	r6, r2, #20
 80087ec:	429e      	cmp	r6, r3
 80087ee:	d940      	bls.n	8008872 <_dtoa_r+0x30a>
 80087f0:	6041      	str	r1, [r0, #4]
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 fce4 	bl	80091c0 <_Balloc>
 80087f8:	9003      	str	r0, [sp, #12]
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d13c      	bne.n	8008878 <_dtoa_r+0x310>
 80087fe:	4602      	mov	r2, r0
 8008800:	f240 11af 	movw	r1, #431	; 0x1af
 8008804:	4b16      	ldr	r3, [pc, #88]	; (8008860 <_dtoa_r+0x2f8>)
 8008806:	e6c3      	b.n	8008590 <_dtoa_r+0x28>
 8008808:	2301      	movs	r3, #1
 800880a:	e7e1      	b.n	80087d0 <_dtoa_r+0x268>
 800880c:	2401      	movs	r4, #1
 800880e:	2300      	movs	r3, #0
 8008810:	940b      	str	r4, [sp, #44]	; 0x2c
 8008812:	9322      	str	r3, [sp, #136]	; 0x88
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	2200      	movs	r2, #0
 800881a:	9306      	str	r3, [sp, #24]
 800881c:	9308      	str	r3, [sp, #32]
 800881e:	2312      	movs	r3, #18
 8008820:	e7d1      	b.n	80087c6 <_dtoa_r+0x25e>
 8008822:	bf00      	nop
 8008824:	f3af 8000 	nop.w
 8008828:	636f4361 	.word	0x636f4361
 800882c:	3fd287a7 	.word	0x3fd287a7
 8008830:	8b60c8b3 	.word	0x8b60c8b3
 8008834:	3fc68a28 	.word	0x3fc68a28
 8008838:	509f79fb 	.word	0x509f79fb
 800883c:	3fd34413 	.word	0x3fd34413
 8008840:	0800ba58 	.word	0x0800ba58
 8008844:	0800ba6f 	.word	0x0800ba6f
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	0800ba54 	.word	0x0800ba54
 8008850:	0800ba4b 	.word	0x0800ba4b
 8008854:	0800ba23 	.word	0x0800ba23
 8008858:	3ff80000 	.word	0x3ff80000
 800885c:	0800bb60 	.word	0x0800bb60
 8008860:	0800bac7 	.word	0x0800bac7
 8008864:	2301      	movs	r3, #1
 8008866:	930b      	str	r3, [sp, #44]	; 0x2c
 8008868:	e7d4      	b.n	8008814 <_dtoa_r+0x2ac>
 800886a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800886c:	9306      	str	r3, [sp, #24]
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	e7b7      	b.n	80087e2 <_dtoa_r+0x27a>
 8008872:	3101      	adds	r1, #1
 8008874:	0052      	lsls	r2, r2, #1
 8008876:	e7b7      	b.n	80087e8 <_dtoa_r+0x280>
 8008878:	69eb      	ldr	r3, [r5, #28]
 800887a:	9a03      	ldr	r2, [sp, #12]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	9b08      	ldr	r3, [sp, #32]
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 80a8 	bhi.w	80089d6 <_dtoa_r+0x46e>
 8008886:	2c00      	cmp	r4, #0
 8008888:	f000 80a5 	beq.w	80089d6 <_dtoa_r+0x46e>
 800888c:	f1bb 0f00 	cmp.w	fp, #0
 8008890:	dd34      	ble.n	80088fc <_dtoa_r+0x394>
 8008892:	4b9a      	ldr	r3, [pc, #616]	; (8008afc <_dtoa_r+0x594>)
 8008894:	f00b 020f 	and.w	r2, fp, #15
 8008898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800889c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80088a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80088ac:	d016      	beq.n	80088dc <_dtoa_r+0x374>
 80088ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088b2:	4b93      	ldr	r3, [pc, #588]	; (8008b00 <_dtoa_r+0x598>)
 80088b4:	2703      	movs	r7, #3
 80088b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088ba:	f7f7 ff37 	bl	800072c <__aeabi_ddiv>
 80088be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c2:	f004 040f 	and.w	r4, r4, #15
 80088c6:	4e8e      	ldr	r6, [pc, #568]	; (8008b00 <_dtoa_r+0x598>)
 80088c8:	b954      	cbnz	r4, 80088e0 <_dtoa_r+0x378>
 80088ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d2:	f7f7 ff2b 	bl	800072c <__aeabi_ddiv>
 80088d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088da:	e029      	b.n	8008930 <_dtoa_r+0x3c8>
 80088dc:	2702      	movs	r7, #2
 80088de:	e7f2      	b.n	80088c6 <_dtoa_r+0x35e>
 80088e0:	07e1      	lsls	r1, r4, #31
 80088e2:	d508      	bpl.n	80088f6 <_dtoa_r+0x38e>
 80088e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ec:	f7f7 fdf4 	bl	80004d8 <__aeabi_dmul>
 80088f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088f4:	3701      	adds	r7, #1
 80088f6:	1064      	asrs	r4, r4, #1
 80088f8:	3608      	adds	r6, #8
 80088fa:	e7e5      	b.n	80088c8 <_dtoa_r+0x360>
 80088fc:	f000 80a5 	beq.w	8008a4a <_dtoa_r+0x4e2>
 8008900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008904:	f1cb 0400 	rsb	r4, fp, #0
 8008908:	4b7c      	ldr	r3, [pc, #496]	; (8008afc <_dtoa_r+0x594>)
 800890a:	f004 020f 	and.w	r2, r4, #15
 800890e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fddf 	bl	80004d8 <__aeabi_dmul>
 800891a:	2702      	movs	r7, #2
 800891c:	2300      	movs	r3, #0
 800891e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008922:	4e77      	ldr	r6, [pc, #476]	; (8008b00 <_dtoa_r+0x598>)
 8008924:	1124      	asrs	r4, r4, #4
 8008926:	2c00      	cmp	r4, #0
 8008928:	f040 8084 	bne.w	8008a34 <_dtoa_r+0x4cc>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1d2      	bne.n	80088d6 <_dtoa_r+0x36e>
 8008930:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008934:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 8087 	beq.w	8008a4e <_dtoa_r+0x4e6>
 8008940:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008944:	2200      	movs	r2, #0
 8008946:	4b6f      	ldr	r3, [pc, #444]	; (8008b04 <_dtoa_r+0x59c>)
 8008948:	f7f8 f838 	bl	80009bc <__aeabi_dcmplt>
 800894c:	2800      	cmp	r0, #0
 800894e:	d07e      	beq.n	8008a4e <_dtoa_r+0x4e6>
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d07b      	beq.n	8008a4e <_dtoa_r+0x4e6>
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dd38      	ble.n	80089ce <_dtoa_r+0x466>
 800895c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008960:	2200      	movs	r2, #0
 8008962:	4b69      	ldr	r3, [pc, #420]	; (8008b08 <_dtoa_r+0x5a0>)
 8008964:	f7f7 fdb8 	bl	80004d8 <__aeabi_dmul>
 8008968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800896c:	9c06      	ldr	r4, [sp, #24]
 800896e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008972:	3701      	adds	r7, #1
 8008974:	4638      	mov	r0, r7
 8008976:	f7f7 fd45 	bl	8000404 <__aeabi_i2d>
 800897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897e:	f7f7 fdab 	bl	80004d8 <__aeabi_dmul>
 8008982:	2200      	movs	r2, #0
 8008984:	4b61      	ldr	r3, [pc, #388]	; (8008b0c <_dtoa_r+0x5a4>)
 8008986:	f7f7 fbf1 	bl	800016c <__adddf3>
 800898a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800898e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008992:	9611      	str	r6, [sp, #68]	; 0x44
 8008994:	2c00      	cmp	r4, #0
 8008996:	d15d      	bne.n	8008a54 <_dtoa_r+0x4ec>
 8008998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800899c:	2200      	movs	r2, #0
 800899e:	4b5c      	ldr	r3, [pc, #368]	; (8008b10 <_dtoa_r+0x5a8>)
 80089a0:	f7f7 fbe2 	bl	8000168 <__aeabi_dsub>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089ac:	4633      	mov	r3, r6
 80089ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089b0:	f7f8 f822 	bl	80009f8 <__aeabi_dcmpgt>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f040 8295 	bne.w	8008ee4 <_dtoa_r+0x97c>
 80089ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089c4:	f7f7 fffa 	bl	80009bc <__aeabi_dcmplt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f040 8289 	bne.w	8008ee0 <_dtoa_r+0x978>
 80089ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80089d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f2c0 8151 	blt.w	8008c80 <_dtoa_r+0x718>
 80089de:	f1bb 0f0e 	cmp.w	fp, #14
 80089e2:	f300 814d 	bgt.w	8008c80 <_dtoa_r+0x718>
 80089e6:	4b45      	ldr	r3, [pc, #276]	; (8008afc <_dtoa_r+0x594>)
 80089e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f280 80da 	bge.w	8008bb0 <_dtoa_r+0x648>
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f300 80d6 	bgt.w	8008bb0 <_dtoa_r+0x648>
 8008a04:	f040 826b 	bne.w	8008ede <_dtoa_r+0x976>
 8008a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4b40      	ldr	r3, [pc, #256]	; (8008b10 <_dtoa_r+0x5a8>)
 8008a10:	f7f7 fd62 	bl	80004d8 <__aeabi_dmul>
 8008a14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a18:	f7f7 ffe4 	bl	80009e4 <__aeabi_dcmpge>
 8008a1c:	9c08      	ldr	r4, [sp, #32]
 8008a1e:	4626      	mov	r6, r4
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f040 8241 	bne.w	8008ea8 <_dtoa_r+0x940>
 8008a26:	2331      	movs	r3, #49	; 0x31
 8008a28:	9f03      	ldr	r7, [sp, #12]
 8008a2a:	f10b 0b01 	add.w	fp, fp, #1
 8008a2e:	f807 3b01 	strb.w	r3, [r7], #1
 8008a32:	e23d      	b.n	8008eb0 <_dtoa_r+0x948>
 8008a34:	07e2      	lsls	r2, r4, #31
 8008a36:	d505      	bpl.n	8008a44 <_dtoa_r+0x4dc>
 8008a38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a3c:	f7f7 fd4c 	bl	80004d8 <__aeabi_dmul>
 8008a40:	2301      	movs	r3, #1
 8008a42:	3701      	adds	r7, #1
 8008a44:	1064      	asrs	r4, r4, #1
 8008a46:	3608      	adds	r6, #8
 8008a48:	e76d      	b.n	8008926 <_dtoa_r+0x3be>
 8008a4a:	2702      	movs	r7, #2
 8008a4c:	e770      	b.n	8008930 <_dtoa_r+0x3c8>
 8008a4e:	46d8      	mov	r8, fp
 8008a50:	9c08      	ldr	r4, [sp, #32]
 8008a52:	e78f      	b.n	8008974 <_dtoa_r+0x40c>
 8008a54:	9903      	ldr	r1, [sp, #12]
 8008a56:	4b29      	ldr	r3, [pc, #164]	; (8008afc <_dtoa_r+0x594>)
 8008a58:	4421      	add	r1, r4
 8008a5a:	9112      	str	r1, [sp, #72]	; 0x48
 8008a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	d054      	beq.n	8008b18 <_dtoa_r+0x5b0>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	4928      	ldr	r1, [pc, #160]	; (8008b14 <_dtoa_r+0x5ac>)
 8008a72:	f7f7 fe5b 	bl	800072c <__aeabi_ddiv>
 8008a76:	463b      	mov	r3, r7
 8008a78:	4632      	mov	r2, r6
 8008a7a:	f7f7 fb75 	bl	8000168 <__aeabi_dsub>
 8008a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a82:	9f03      	ldr	r7, [sp, #12]
 8008a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a88:	f7f7 ffd6 	bl	8000a38 <__aeabi_d2iz>
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	f7f7 fcb9 	bl	8000404 <__aeabi_i2d>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a9a:	f7f7 fb65 	bl	8000168 <__aeabi_dsub>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	3430      	adds	r4, #48	; 0x30
 8008aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aac:	f807 4b01 	strb.w	r4, [r7], #1
 8008ab0:	f7f7 ff84 	bl	80009bc <__aeabi_dcmplt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d173      	bne.n	8008ba0 <_dtoa_r+0x638>
 8008ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008abc:	2000      	movs	r0, #0
 8008abe:	4911      	ldr	r1, [pc, #68]	; (8008b04 <_dtoa_r+0x59c>)
 8008ac0:	f7f7 fb52 	bl	8000168 <__aeabi_dsub>
 8008ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ac8:	f7f7 ff78 	bl	80009bc <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f040 80b6 	bne.w	8008c3e <_dtoa_r+0x6d6>
 8008ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ad4:	429f      	cmp	r7, r3
 8008ad6:	f43f af7a 	beq.w	80089ce <_dtoa_r+0x466>
 8008ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <_dtoa_r+0x5a0>)
 8008ae2:	f7f7 fcf9 	bl	80004d8 <__aeabi_dmul>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af0:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <_dtoa_r+0x5a0>)
 8008af2:	f7f7 fcf1 	bl	80004d8 <__aeabi_dmul>
 8008af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008afa:	e7c3      	b.n	8008a84 <_dtoa_r+0x51c>
 8008afc:	0800bb60 	.word	0x0800bb60
 8008b00:	0800bb38 	.word	0x0800bb38
 8008b04:	3ff00000 	.word	0x3ff00000
 8008b08:	40240000 	.word	0x40240000
 8008b0c:	401c0000 	.word	0x401c0000
 8008b10:	40140000 	.word	0x40140000
 8008b14:	3fe00000 	.word	0x3fe00000
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fcdc 	bl	80004d8 <__aeabi_dmul>
 8008b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b26:	9c03      	ldr	r4, [sp, #12]
 8008b28:	9314      	str	r3, [sp, #80]	; 0x50
 8008b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b2e:	f7f7 ff83 	bl	8000a38 <__aeabi_d2iz>
 8008b32:	9015      	str	r0, [sp, #84]	; 0x54
 8008b34:	f7f7 fc66 	bl	8000404 <__aeabi_i2d>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b40:	f7f7 fb12 	bl	8000168 <__aeabi_dsub>
 8008b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b46:	4606      	mov	r6, r0
 8008b48:	3330      	adds	r3, #48	; 0x30
 8008b4a:	f804 3b01 	strb.w	r3, [r4], #1
 8008b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b50:	460f      	mov	r7, r1
 8008b52:	429c      	cmp	r4, r3
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	d124      	bne.n	8008ba4 <_dtoa_r+0x63c>
 8008b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b5e:	4baf      	ldr	r3, [pc, #700]	; (8008e1c <_dtoa_r+0x8b4>)
 8008b60:	f7f7 fb04 	bl	800016c <__adddf3>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 ff44 	bl	80009f8 <__aeabi_dcmpgt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d163      	bne.n	8008c3c <_dtoa_r+0x6d4>
 8008b74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b78:	2000      	movs	r0, #0
 8008b7a:	49a8      	ldr	r1, [pc, #672]	; (8008e1c <_dtoa_r+0x8b4>)
 8008b7c:	f7f7 faf4 	bl	8000168 <__aeabi_dsub>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4630      	mov	r0, r6
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 ff18 	bl	80009bc <__aeabi_dcmplt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f43f af1e 	beq.w	80089ce <_dtoa_r+0x466>
 8008b92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b94:	1e7b      	subs	r3, r7, #1
 8008b96:	9314      	str	r3, [sp, #80]	; 0x50
 8008b98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b9c:	2b30      	cmp	r3, #48	; 0x30
 8008b9e:	d0f8      	beq.n	8008b92 <_dtoa_r+0x62a>
 8008ba0:	46c3      	mov	fp, r8
 8008ba2:	e03b      	b.n	8008c1c <_dtoa_r+0x6b4>
 8008ba4:	4b9e      	ldr	r3, [pc, #632]	; (8008e20 <_dtoa_r+0x8b8>)
 8008ba6:	f7f7 fc97 	bl	80004d8 <__aeabi_dmul>
 8008baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bae:	e7bc      	b.n	8008b2a <_dtoa_r+0x5c2>
 8008bb0:	9f03      	ldr	r7, [sp, #12]
 8008bb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008bb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 fdb5 	bl	800072c <__aeabi_ddiv>
 8008bc2:	f7f7 ff39 	bl	8000a38 <__aeabi_d2iz>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	f7f7 fc1c 	bl	8000404 <__aeabi_i2d>
 8008bcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bd0:	f7f7 fc82 	bl	80004d8 <__aeabi_dmul>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 fac4 	bl	8000168 <__aeabi_dsub>
 8008be0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008be4:	f807 6b01 	strb.w	r6, [r7], #1
 8008be8:	9e03      	ldr	r6, [sp, #12]
 8008bea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008bee:	1bbe      	subs	r6, r7, r6
 8008bf0:	45b4      	cmp	ip, r6
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	d136      	bne.n	8008c66 <_dtoa_r+0x6fe>
 8008bf8:	f7f7 fab8 	bl	800016c <__adddf3>
 8008bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c00:	4680      	mov	r8, r0
 8008c02:	4689      	mov	r9, r1
 8008c04:	f7f7 fef8 	bl	80009f8 <__aeabi_dcmpgt>
 8008c08:	bb58      	cbnz	r0, 8008c62 <_dtoa_r+0x6fa>
 8008c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	f7f7 fec9 	bl	80009a8 <__aeabi_dcmpeq>
 8008c16:	b108      	cbz	r0, 8008c1c <_dtoa_r+0x6b4>
 8008c18:	07e3      	lsls	r3, r4, #31
 8008c1a:	d422      	bmi.n	8008c62 <_dtoa_r+0x6fa>
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fb0e 	bl	8009240 <_Bfree>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c28:	703b      	strb	r3, [r7, #0]
 8008c2a:	f10b 0301 	add.w	r3, fp, #1
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f43f ace6 	beq.w	8008604 <_dtoa_r+0x9c>
 8008c38:	601f      	str	r7, [r3, #0]
 8008c3a:	e4e3      	b.n	8008604 <_dtoa_r+0x9c>
 8008c3c:	4627      	mov	r7, r4
 8008c3e:	463b      	mov	r3, r7
 8008c40:	461f      	mov	r7, r3
 8008c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c46:	2a39      	cmp	r2, #57	; 0x39
 8008c48:	d107      	bne.n	8008c5a <_dtoa_r+0x6f2>
 8008c4a:	9a03      	ldr	r2, [sp, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d1f7      	bne.n	8008c40 <_dtoa_r+0x6d8>
 8008c50:	2230      	movs	r2, #48	; 0x30
 8008c52:	9903      	ldr	r1, [sp, #12]
 8008c54:	f108 0801 	add.w	r8, r8, #1
 8008c58:	700a      	strb	r2, [r1, #0]
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	3201      	adds	r2, #1
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	e79e      	b.n	8008ba0 <_dtoa_r+0x638>
 8008c62:	46d8      	mov	r8, fp
 8008c64:	e7eb      	b.n	8008c3e <_dtoa_r+0x6d6>
 8008c66:	2200      	movs	r2, #0
 8008c68:	4b6d      	ldr	r3, [pc, #436]	; (8008e20 <_dtoa_r+0x8b8>)
 8008c6a:	f7f7 fc35 	bl	80004d8 <__aeabi_dmul>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2300      	movs	r3, #0
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	f7f7 fe97 	bl	80009a8 <__aeabi_dcmpeq>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d09b      	beq.n	8008bb6 <_dtoa_r+0x64e>
 8008c7e:	e7cd      	b.n	8008c1c <_dtoa_r+0x6b4>
 8008c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	f000 80c4 	beq.w	8008e10 <_dtoa_r+0x8a8>
 8008c88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	f300 80a8 	bgt.w	8008de0 <_dtoa_r+0x878>
 8008c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	f000 80a0 	beq.w	8008dd8 <_dtoa_r+0x870>
 8008c98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c9c:	464f      	mov	r7, r9
 8008c9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	441a      	add	r2, r3
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	4499      	add	r9, r3
 8008caa:	9209      	str	r2, [sp, #36]	; 0x24
 8008cac:	f000 fbc8 	bl	8009440 <__i2b>
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	b15f      	cbz	r7, 8008ccc <_dtoa_r+0x764>
 8008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd08      	ble.n	8008ccc <_dtoa_r+0x764>
 8008cba:	42bb      	cmp	r3, r7
 8008cbc:	bfa8      	it	ge
 8008cbe:	463b      	movge	r3, r7
 8008cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc2:	eba9 0903 	sub.w	r9, r9, r3
 8008cc6:	1aff      	subs	r7, r7, r3
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cce:	b1f3      	cbz	r3, 8008d0e <_dtoa_r+0x7a6>
 8008cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a0 	beq.w	8008e18 <_dtoa_r+0x8b0>
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	dd10      	ble.n	8008cfe <_dtoa_r+0x796>
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 fc6b 	bl	80095bc <__pow5mult>
 8008ce6:	4652      	mov	r2, sl
 8008ce8:	4601      	mov	r1, r0
 8008cea:	4606      	mov	r6, r0
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 fbbd 	bl	800946c <__multiply>
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4651      	mov	r1, sl
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f000 faa2 	bl	8009240 <_Bfree>
 8008cfc:	46c2      	mov	sl, r8
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	1b1a      	subs	r2, r3, r4
 8008d02:	d004      	beq.n	8008d0e <_dtoa_r+0x7a6>
 8008d04:	4651      	mov	r1, sl
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fc58 	bl	80095bc <__pow5mult>
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 fb95 	bl	8009440 <__i2b>
 8008d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d18:	4604      	mov	r4, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f340 8082 	ble.w	8008e24 <_dtoa_r+0x8bc>
 8008d20:	461a      	mov	r2, r3
 8008d22:	4601      	mov	r1, r0
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 fc49 	bl	80095bc <__pow5mult>
 8008d2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	dd7b      	ble.n	8008e2a <_dtoa_r+0x8c2>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d3c:	6918      	ldr	r0, [r3, #16]
 8008d3e:	f000 fb31 	bl	80093a4 <__hi0bits>
 8008d42:	f1c0 0020 	rsb	r0, r0, #32
 8008d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d48:	4418      	add	r0, r3
 8008d4a:	f010 001f 	ands.w	r0, r0, #31
 8008d4e:	f000 8092 	beq.w	8008e76 <_dtoa_r+0x90e>
 8008d52:	f1c0 0320 	rsb	r3, r0, #32
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	f340 8085 	ble.w	8008e66 <_dtoa_r+0x8fe>
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	f1c0 001c 	rsb	r0, r0, #28
 8008d62:	4403      	add	r3, r0
 8008d64:	4481      	add	r9, r0
 8008d66:	4407      	add	r7, r0
 8008d68:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6a:	f1b9 0f00 	cmp.w	r9, #0
 8008d6e:	dd05      	ble.n	8008d7c <_dtoa_r+0x814>
 8008d70:	4651      	mov	r1, sl
 8008d72:	464a      	mov	r2, r9
 8008d74:	4628      	mov	r0, r5
 8008d76:	f000 fc7b 	bl	8009670 <__lshift>
 8008d7a:	4682      	mov	sl, r0
 8008d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dd05      	ble.n	8008d8e <_dtoa_r+0x826>
 8008d82:	4621      	mov	r1, r4
 8008d84:	461a      	mov	r2, r3
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 fc72 	bl	8009670 <__lshift>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d072      	beq.n	8008e7a <_dtoa_r+0x912>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4650      	mov	r0, sl
 8008d98:	f000 fcd6 	bl	8009748 <__mcmp>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	da6c      	bge.n	8008e7a <_dtoa_r+0x912>
 8008da0:	2300      	movs	r3, #0
 8008da2:	4651      	mov	r1, sl
 8008da4:	220a      	movs	r2, #10
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 fa6c 	bl	8009284 <__multadd>
 8008dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dae:	4682      	mov	sl, r0
 8008db0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 81ac 	beq.w	8009112 <_dtoa_r+0xbaa>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	220a      	movs	r2, #10
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f000 fa5f 	bl	8009284 <__multadd>
 8008dc6:	9b06      	ldr	r3, [sp, #24]
 8008dc8:	4606      	mov	r6, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f300 8093 	bgt.w	8008ef6 <_dtoa_r+0x98e>
 8008dd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	dc59      	bgt.n	8008e8a <_dtoa_r+0x922>
 8008dd6:	e08e      	b.n	8008ef6 <_dtoa_r+0x98e>
 8008dd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dde:	e75d      	b.n	8008c9c <_dtoa_r+0x734>
 8008de0:	9b08      	ldr	r3, [sp, #32]
 8008de2:	1e5c      	subs	r4, r3, #1
 8008de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	bfbf      	itttt	lt
 8008dea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008dee:	1ae3      	sublt	r3, r4, r3
 8008df0:	18d2      	addlt	r2, r2, r3
 8008df2:	bfa8      	it	ge
 8008df4:	1b1c      	subge	r4, r3, r4
 8008df6:	9b08      	ldr	r3, [sp, #32]
 8008df8:	bfbe      	ittt	lt
 8008dfa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008dfc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008dfe:	2400      	movlt	r4, #0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bfb5      	itete	lt
 8008e04:	eba9 0703 	sublt.w	r7, r9, r3
 8008e08:	464f      	movge	r7, r9
 8008e0a:	2300      	movlt	r3, #0
 8008e0c:	9b08      	ldrge	r3, [sp, #32]
 8008e0e:	e747      	b.n	8008ca0 <_dtoa_r+0x738>
 8008e10:	464f      	mov	r7, r9
 8008e12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008e16:	e74c      	b.n	8008cb2 <_dtoa_r+0x74a>
 8008e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e1a:	e773      	b.n	8008d04 <_dtoa_r+0x79c>
 8008e1c:	3fe00000 	.word	0x3fe00000
 8008e20:	40240000 	.word	0x40240000
 8008e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	dc18      	bgt.n	8008e5c <_dtoa_r+0x8f4>
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	b9b3      	cbnz	r3, 8008e5c <_dtoa_r+0x8f4>
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e34:	b993      	cbnz	r3, 8008e5c <_dtoa_r+0x8f4>
 8008e36:	9b05      	ldr	r3, [sp, #20]
 8008e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	0d1b      	lsrs	r3, r3, #20
 8008e3e:	051b      	lsls	r3, r3, #20
 8008e40:	b17b      	cbz	r3, 8008e62 <_dtoa_r+0x8fa>
 8008e42:	f04f 0801 	mov.w	r8, #1
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	f109 0901 	add.w	r9, r9, #1
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f47f af6f 	bne.w	8008d36 <_dtoa_r+0x7ce>
 8008e58:	2001      	movs	r0, #1
 8008e5a:	e774      	b.n	8008d46 <_dtoa_r+0x7de>
 8008e5c:	f04f 0800 	mov.w	r8, #0
 8008e60:	e7f6      	b.n	8008e50 <_dtoa_r+0x8e8>
 8008e62:	4698      	mov	r8, r3
 8008e64:	e7f4      	b.n	8008e50 <_dtoa_r+0x8e8>
 8008e66:	d080      	beq.n	8008d6a <_dtoa_r+0x802>
 8008e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e6a:	331c      	adds	r3, #28
 8008e6c:	441a      	add	r2, r3
 8008e6e:	4499      	add	r9, r3
 8008e70:	441f      	add	r7, r3
 8008e72:	9209      	str	r2, [sp, #36]	; 0x24
 8008e74:	e779      	b.n	8008d6a <_dtoa_r+0x802>
 8008e76:	4603      	mov	r3, r0
 8008e78:	e7f6      	b.n	8008e68 <_dtoa_r+0x900>
 8008e7a:	9b08      	ldr	r3, [sp, #32]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	dc34      	bgt.n	8008eea <_dtoa_r+0x982>
 8008e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	dd31      	ble.n	8008eea <_dtoa_r+0x982>
 8008e86:	9b08      	ldr	r3, [sp, #32]
 8008e88:	9306      	str	r3, [sp, #24]
 8008e8a:	9b06      	ldr	r3, [sp, #24]
 8008e8c:	b963      	cbnz	r3, 8008ea8 <_dtoa_r+0x940>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	2205      	movs	r2, #5
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f9f6 	bl	8009284 <__multadd>
 8008e98:	4601      	mov	r1, r0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f000 fc53 	bl	8009748 <__mcmp>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f73f adbf 	bgt.w	8008a26 <_dtoa_r+0x4be>
 8008ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008eaa:	9f03      	ldr	r7, [sp, #12]
 8008eac:	ea6f 0b03 	mvn.w	fp, r3
 8008eb0:	f04f 0800 	mov.w	r8, #0
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f9c2 	bl	8009240 <_Bfree>
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	f43f aead 	beq.w	8008c1c <_dtoa_r+0x6b4>
 8008ec2:	f1b8 0f00 	cmp.w	r8, #0
 8008ec6:	d005      	beq.n	8008ed4 <_dtoa_r+0x96c>
 8008ec8:	45b0      	cmp	r8, r6
 8008eca:	d003      	beq.n	8008ed4 <_dtoa_r+0x96c>
 8008ecc:	4641      	mov	r1, r8
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 f9b6 	bl	8009240 <_Bfree>
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f9b2 	bl	8009240 <_Bfree>
 8008edc:	e69e      	b.n	8008c1c <_dtoa_r+0x6b4>
 8008ede:	2400      	movs	r4, #0
 8008ee0:	4626      	mov	r6, r4
 8008ee2:	e7e1      	b.n	8008ea8 <_dtoa_r+0x940>
 8008ee4:	46c3      	mov	fp, r8
 8008ee6:	4626      	mov	r6, r4
 8008ee8:	e59d      	b.n	8008a26 <_dtoa_r+0x4be>
 8008eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80c8 	beq.w	8009082 <_dtoa_r+0xb1a>
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	9306      	str	r3, [sp, #24]
 8008ef6:	2f00      	cmp	r7, #0
 8008ef8:	dd05      	ble.n	8008f06 <_dtoa_r+0x99e>
 8008efa:	4631      	mov	r1, r6
 8008efc:	463a      	mov	r2, r7
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fbb6 	bl	8009670 <__lshift>
 8008f04:	4606      	mov	r6, r0
 8008f06:	f1b8 0f00 	cmp.w	r8, #0
 8008f0a:	d05b      	beq.n	8008fc4 <_dtoa_r+0xa5c>
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	6871      	ldr	r1, [r6, #4]
 8008f10:	f000 f956 	bl	80091c0 <_Balloc>
 8008f14:	4607      	mov	r7, r0
 8008f16:	b928      	cbnz	r0, 8008f24 <_dtoa_r+0x9bc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f1e:	4b81      	ldr	r3, [pc, #516]	; (8009124 <_dtoa_r+0xbbc>)
 8008f20:	f7ff bb36 	b.w	8008590 <_dtoa_r+0x28>
 8008f24:	6932      	ldr	r2, [r6, #16]
 8008f26:	f106 010c 	add.w	r1, r6, #12
 8008f2a:	3202      	adds	r2, #2
 8008f2c:	0092      	lsls	r2, r2, #2
 8008f2e:	300c      	adds	r0, #12
 8008f30:	f7ff fa7d 	bl	800842e <memcpy>
 8008f34:	2201      	movs	r2, #1
 8008f36:	4639      	mov	r1, r7
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 fb99 	bl	8009670 <__lshift>
 8008f3e:	46b0      	mov	r8, r6
 8008f40:	4606      	mov	r6, r0
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	9a03      	ldr	r2, [sp, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f50:	9b04      	ldr	r3, [sp, #16]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	930a      	str	r3, [sp, #40]	; 0x28
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4650      	mov	r0, sl
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	f7ff fa77 	bl	8008454 <quorem>
 8008f66:	4641      	mov	r1, r8
 8008f68:	9006      	str	r0, [sp, #24]
 8008f6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f6e:	4650      	mov	r0, sl
 8008f70:	f000 fbea 	bl	8009748 <__mcmp>
 8008f74:	4632      	mov	r2, r6
 8008f76:	9009      	str	r0, [sp, #36]	; 0x24
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f000 fc00 	bl	8009780 <__mdiff>
 8008f80:	68c2      	ldr	r2, [r0, #12]
 8008f82:	4607      	mov	r7, r0
 8008f84:	bb02      	cbnz	r2, 8008fc8 <_dtoa_r+0xa60>
 8008f86:	4601      	mov	r1, r0
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f000 fbdd 	bl	8009748 <__mcmp>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	4639      	mov	r1, r7
 8008f92:	4628      	mov	r0, r5
 8008f94:	920c      	str	r2, [sp, #48]	; 0x30
 8008f96:	f000 f953 	bl	8009240 <_Bfree>
 8008f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9e:	9f08      	ldr	r7, [sp, #32]
 8008fa0:	ea43 0102 	orr.w	r1, r3, r2
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa6:	4319      	orrs	r1, r3
 8008fa8:	d110      	bne.n	8008fcc <_dtoa_r+0xa64>
 8008faa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fae:	d029      	beq.n	8009004 <_dtoa_r+0xa9c>
 8008fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd02      	ble.n	8008fbc <_dtoa_r+0xa54>
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	f883 9000 	strb.w	r9, [r3]
 8008fc2:	e777      	b.n	8008eb4 <_dtoa_r+0x94c>
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	e7ba      	b.n	8008f3e <_dtoa_r+0x9d6>
 8008fc8:	2201      	movs	r2, #1
 8008fca:	e7e1      	b.n	8008f90 <_dtoa_r+0xa28>
 8008fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	db04      	blt.n	8008fdc <_dtoa_r+0xa74>
 8008fd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	d120      	bne.n	800901e <_dtoa_r+0xab6>
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	dded      	ble.n	8008fbc <_dtoa_r+0xa54>
 8008fe0:	4651      	mov	r1, sl
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f000 fb43 	bl	8009670 <__lshift>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4682      	mov	sl, r0
 8008fee:	f000 fbab 	bl	8009748 <__mcmp>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	dc03      	bgt.n	8008ffe <_dtoa_r+0xa96>
 8008ff6:	d1e1      	bne.n	8008fbc <_dtoa_r+0xa54>
 8008ff8:	f019 0f01 	tst.w	r9, #1
 8008ffc:	d0de      	beq.n	8008fbc <_dtoa_r+0xa54>
 8008ffe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009002:	d1d8      	bne.n	8008fb6 <_dtoa_r+0xa4e>
 8009004:	2339      	movs	r3, #57	; 0x39
 8009006:	9a04      	ldr	r2, [sp, #16]
 8009008:	7013      	strb	r3, [r2, #0]
 800900a:	463b      	mov	r3, r7
 800900c:	461f      	mov	r7, r3
 800900e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009012:	3b01      	subs	r3, #1
 8009014:	2a39      	cmp	r2, #57	; 0x39
 8009016:	d06b      	beq.n	80090f0 <_dtoa_r+0xb88>
 8009018:	3201      	adds	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	e74a      	b.n	8008eb4 <_dtoa_r+0x94c>
 800901e:	2a00      	cmp	r2, #0
 8009020:	dd07      	ble.n	8009032 <_dtoa_r+0xaca>
 8009022:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009026:	d0ed      	beq.n	8009004 <_dtoa_r+0xa9c>
 8009028:	9a04      	ldr	r2, [sp, #16]
 800902a:	f109 0301 	add.w	r3, r9, #1
 800902e:	7013      	strb	r3, [r2, #0]
 8009030:	e740      	b.n	8008eb4 <_dtoa_r+0x94c>
 8009032:	9b08      	ldr	r3, [sp, #32]
 8009034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009036:	f803 9c01 	strb.w	r9, [r3, #-1]
 800903a:	4293      	cmp	r3, r2
 800903c:	d042      	beq.n	80090c4 <_dtoa_r+0xb5c>
 800903e:	4651      	mov	r1, sl
 8009040:	2300      	movs	r3, #0
 8009042:	220a      	movs	r2, #10
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f91d 	bl	8009284 <__multadd>
 800904a:	45b0      	cmp	r8, r6
 800904c:	4682      	mov	sl, r0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	f04f 020a 	mov.w	r2, #10
 8009056:	4641      	mov	r1, r8
 8009058:	4628      	mov	r0, r5
 800905a:	d107      	bne.n	800906c <_dtoa_r+0xb04>
 800905c:	f000 f912 	bl	8009284 <__multadd>
 8009060:	4680      	mov	r8, r0
 8009062:	4606      	mov	r6, r0
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	3301      	adds	r3, #1
 8009068:	9308      	str	r3, [sp, #32]
 800906a:	e775      	b.n	8008f58 <_dtoa_r+0x9f0>
 800906c:	f000 f90a 	bl	8009284 <__multadd>
 8009070:	4631      	mov	r1, r6
 8009072:	4680      	mov	r8, r0
 8009074:	2300      	movs	r3, #0
 8009076:	220a      	movs	r2, #10
 8009078:	4628      	mov	r0, r5
 800907a:	f000 f903 	bl	8009284 <__multadd>
 800907e:	4606      	mov	r6, r0
 8009080:	e7f0      	b.n	8009064 <_dtoa_r+0xafc>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	9306      	str	r3, [sp, #24]
 8009086:	9f03      	ldr	r7, [sp, #12]
 8009088:	4621      	mov	r1, r4
 800908a:	4650      	mov	r0, sl
 800908c:	f7ff f9e2 	bl	8008454 <quorem>
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009096:	f807 9b01 	strb.w	r9, [r7], #1
 800909a:	1afa      	subs	r2, r7, r3
 800909c:	9b06      	ldr	r3, [sp, #24]
 800909e:	4293      	cmp	r3, r2
 80090a0:	dd07      	ble.n	80090b2 <_dtoa_r+0xb4a>
 80090a2:	4651      	mov	r1, sl
 80090a4:	2300      	movs	r3, #0
 80090a6:	220a      	movs	r2, #10
 80090a8:	4628      	mov	r0, r5
 80090aa:	f000 f8eb 	bl	8009284 <__multadd>
 80090ae:	4682      	mov	sl, r0
 80090b0:	e7ea      	b.n	8009088 <_dtoa_r+0xb20>
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	f04f 0800 	mov.w	r8, #0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfcc      	ite	gt
 80090bc:	461f      	movgt	r7, r3
 80090be:	2701      	movle	r7, #1
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	441f      	add	r7, r3
 80090c4:	4651      	mov	r1, sl
 80090c6:	2201      	movs	r2, #1
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 fad1 	bl	8009670 <__lshift>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4682      	mov	sl, r0
 80090d2:	f000 fb39 	bl	8009748 <__mcmp>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	dc97      	bgt.n	800900a <_dtoa_r+0xaa2>
 80090da:	d102      	bne.n	80090e2 <_dtoa_r+0xb7a>
 80090dc:	f019 0f01 	tst.w	r9, #1
 80090e0:	d193      	bne.n	800900a <_dtoa_r+0xaa2>
 80090e2:	463b      	mov	r3, r7
 80090e4:	461f      	mov	r7, r3
 80090e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ea:	2a30      	cmp	r2, #48	; 0x30
 80090ec:	d0fa      	beq.n	80090e4 <_dtoa_r+0xb7c>
 80090ee:	e6e1      	b.n	8008eb4 <_dtoa_r+0x94c>
 80090f0:	9a03      	ldr	r2, [sp, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d18a      	bne.n	800900c <_dtoa_r+0xaa4>
 80090f6:	2331      	movs	r3, #49	; 0x31
 80090f8:	f10b 0b01 	add.w	fp, fp, #1
 80090fc:	e797      	b.n	800902e <_dtoa_r+0xac6>
 80090fe:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <_dtoa_r+0xbc0>)
 8009100:	f7ff ba9f 	b.w	8008642 <_dtoa_r+0xda>
 8009104:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009106:	2b00      	cmp	r3, #0
 8009108:	f47f aa77 	bne.w	80085fa <_dtoa_r+0x92>
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <_dtoa_r+0xbc4>)
 800910e:	f7ff ba98 	b.w	8008642 <_dtoa_r+0xda>
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dcb6      	bgt.n	8009086 <_dtoa_r+0xb1e>
 8009118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800911a:	2b02      	cmp	r3, #2
 800911c:	f73f aeb5 	bgt.w	8008e8a <_dtoa_r+0x922>
 8009120:	e7b1      	b.n	8009086 <_dtoa_r+0xb1e>
 8009122:	bf00      	nop
 8009124:	0800bac7 	.word	0x0800bac7
 8009128:	0800ba22 	.word	0x0800ba22
 800912c:	0800ba4b 	.word	0x0800ba4b

08009130 <_free_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4605      	mov	r5, r0
 8009134:	2900      	cmp	r1, #0
 8009136:	d040      	beq.n	80091ba <_free_r+0x8a>
 8009138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913c:	1f0c      	subs	r4, r1, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfb8      	it	lt
 8009142:	18e4      	addlt	r4, r4, r3
 8009144:	f7fe f938 	bl	80073b8 <__malloc_lock>
 8009148:	4a1c      	ldr	r2, [pc, #112]	; (80091bc <_free_r+0x8c>)
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	b933      	cbnz	r3, 800915c <_free_r+0x2c>
 800914e:	6063      	str	r3, [r4, #4]
 8009150:	6014      	str	r4, [r2, #0]
 8009152:	4628      	mov	r0, r5
 8009154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009158:	f7fe b934 	b.w	80073c4 <__malloc_unlock>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d908      	bls.n	8009172 <_free_r+0x42>
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	1821      	adds	r1, r4, r0
 8009164:	428b      	cmp	r3, r1
 8009166:	bf01      	itttt	eq
 8009168:	6819      	ldreq	r1, [r3, #0]
 800916a:	685b      	ldreq	r3, [r3, #4]
 800916c:	1809      	addeq	r1, r1, r0
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	e7ed      	b.n	800914e <_free_r+0x1e>
 8009172:	461a      	mov	r2, r3
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b10b      	cbz	r3, 800917c <_free_r+0x4c>
 8009178:	42a3      	cmp	r3, r4
 800917a:	d9fa      	bls.n	8009172 <_free_r+0x42>
 800917c:	6811      	ldr	r1, [r2, #0]
 800917e:	1850      	adds	r0, r2, r1
 8009180:	42a0      	cmp	r0, r4
 8009182:	d10b      	bne.n	800919c <_free_r+0x6c>
 8009184:	6820      	ldr	r0, [r4, #0]
 8009186:	4401      	add	r1, r0
 8009188:	1850      	adds	r0, r2, r1
 800918a:	4283      	cmp	r3, r0
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	d1e0      	bne.n	8009152 <_free_r+0x22>
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4408      	add	r0, r1
 8009196:	6010      	str	r0, [r2, #0]
 8009198:	6053      	str	r3, [r2, #4]
 800919a:	e7da      	b.n	8009152 <_free_r+0x22>
 800919c:	d902      	bls.n	80091a4 <_free_r+0x74>
 800919e:	230c      	movs	r3, #12
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	e7d6      	b.n	8009152 <_free_r+0x22>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	1821      	adds	r1, r4, r0
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf01      	itttt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	1809      	addeq	r1, r1, r0
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	6063      	str	r3, [r4, #4]
 80091b6:	6054      	str	r4, [r2, #4]
 80091b8:	e7cb      	b.n	8009152 <_free_r+0x22>
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20000928 	.word	0x20000928

080091c0 <_Balloc>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	69c6      	ldr	r6, [r0, #28]
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	b976      	cbnz	r6, 80091e8 <_Balloc+0x28>
 80091ca:	2010      	movs	r0, #16
 80091cc:	f7fe f84c 	bl	8007268 <malloc>
 80091d0:	4602      	mov	r2, r0
 80091d2:	61e0      	str	r0, [r4, #28]
 80091d4:	b920      	cbnz	r0, 80091e0 <_Balloc+0x20>
 80091d6:	216b      	movs	r1, #107	; 0x6b
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <_Balloc+0x78>)
 80091da:	4818      	ldr	r0, [pc, #96]	; (800923c <_Balloc+0x7c>)
 80091dc:	f001 fd5e 	bl	800ac9c <__assert_func>
 80091e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e4:	6006      	str	r6, [r0, #0]
 80091e6:	60c6      	str	r6, [r0, #12]
 80091e8:	69e6      	ldr	r6, [r4, #28]
 80091ea:	68f3      	ldr	r3, [r6, #12]
 80091ec:	b183      	cbz	r3, 8009210 <_Balloc+0x50>
 80091ee:	69e3      	ldr	r3, [r4, #28]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f6:	b9b8      	cbnz	r0, 8009228 <_Balloc+0x68>
 80091f8:	2101      	movs	r1, #1
 80091fa:	fa01 f605 	lsl.w	r6, r1, r5
 80091fe:	1d72      	adds	r2, r6, #5
 8009200:	4620      	mov	r0, r4
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	f001 fd68 	bl	800acd8 <_calloc_r>
 8009208:	b160      	cbz	r0, 8009224 <_Balloc+0x64>
 800920a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920e:	e00e      	b.n	800922e <_Balloc+0x6e>
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	2104      	movs	r1, #4
 8009214:	4620      	mov	r0, r4
 8009216:	f001 fd5f 	bl	800acd8 <_calloc_r>
 800921a:	69e3      	ldr	r3, [r4, #28]
 800921c:	60f0      	str	r0, [r6, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e4      	bne.n	80091ee <_Balloc+0x2e>
 8009224:	2000      	movs	r0, #0
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922e:	2300      	movs	r3, #0
 8009230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009234:	e7f7      	b.n	8009226 <_Balloc+0x66>
 8009236:	bf00      	nop
 8009238:	0800ba58 	.word	0x0800ba58
 800923c:	0800bad8 	.word	0x0800bad8

08009240 <_Bfree>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	69c6      	ldr	r6, [r0, #28]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b976      	cbnz	r6, 8009268 <_Bfree+0x28>
 800924a:	2010      	movs	r0, #16
 800924c:	f7fe f80c 	bl	8007268 <malloc>
 8009250:	4602      	mov	r2, r0
 8009252:	61e8      	str	r0, [r5, #28]
 8009254:	b920      	cbnz	r0, 8009260 <_Bfree+0x20>
 8009256:	218f      	movs	r1, #143	; 0x8f
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <_Bfree+0x3c>)
 800925a:	4809      	ldr	r0, [pc, #36]	; (8009280 <_Bfree+0x40>)
 800925c:	f001 fd1e 	bl	800ac9c <__assert_func>
 8009260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009264:	6006      	str	r6, [r0, #0]
 8009266:	60c6      	str	r6, [r0, #12]
 8009268:	b13c      	cbz	r4, 800927a <_Bfree+0x3a>
 800926a:	69eb      	ldr	r3, [r5, #28]
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009274:	6021      	str	r1, [r4, #0]
 8009276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0800ba58 	.word	0x0800ba58
 8009280:	0800bad8 	.word	0x0800bad8

08009284 <__multadd>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	4607      	mov	r7, r0
 800928a:	460c      	mov	r4, r1
 800928c:	461e      	mov	r6, r3
 800928e:	2000      	movs	r0, #0
 8009290:	690d      	ldr	r5, [r1, #16]
 8009292:	f101 0c14 	add.w	ip, r1, #20
 8009296:	f8dc 3000 	ldr.w	r3, [ip]
 800929a:	3001      	adds	r0, #1
 800929c:	b299      	uxth	r1, r3
 800929e:	fb02 6101 	mla	r1, r2, r1, r6
 80092a2:	0c1e      	lsrs	r6, r3, #16
 80092a4:	0c0b      	lsrs	r3, r1, #16
 80092a6:	fb02 3306 	mla	r3, r2, r6, r3
 80092aa:	b289      	uxth	r1, r1
 80092ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092b0:	4285      	cmp	r5, r0
 80092b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b6:	f84c 1b04 	str.w	r1, [ip], #4
 80092ba:	dcec      	bgt.n	8009296 <__multadd+0x12>
 80092bc:	b30e      	cbz	r6, 8009302 <__multadd+0x7e>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dc19      	bgt.n	80092f8 <__multadd+0x74>
 80092c4:	6861      	ldr	r1, [r4, #4]
 80092c6:	4638      	mov	r0, r7
 80092c8:	3101      	adds	r1, #1
 80092ca:	f7ff ff79 	bl	80091c0 <_Balloc>
 80092ce:	4680      	mov	r8, r0
 80092d0:	b928      	cbnz	r0, 80092de <__multadd+0x5a>
 80092d2:	4602      	mov	r2, r0
 80092d4:	21ba      	movs	r1, #186	; 0xba
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <__multadd+0x84>)
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <__multadd+0x88>)
 80092da:	f001 fcdf 	bl	800ac9c <__assert_func>
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	f104 010c 	add.w	r1, r4, #12
 80092e4:	3202      	adds	r2, #2
 80092e6:	0092      	lsls	r2, r2, #2
 80092e8:	300c      	adds	r0, #12
 80092ea:	f7ff f8a0 	bl	800842e <memcpy>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff ffa5 	bl	8009240 <_Bfree>
 80092f6:	4644      	mov	r4, r8
 80092f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092fc:	3501      	adds	r5, #1
 80092fe:	615e      	str	r6, [r3, #20]
 8009300:	6125      	str	r5, [r4, #16]
 8009302:	4620      	mov	r0, r4
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	0800bac7 	.word	0x0800bac7
 800930c:	0800bad8 	.word	0x0800bad8

08009310 <__s2b>:
 8009310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009314:	4615      	mov	r5, r2
 8009316:	2209      	movs	r2, #9
 8009318:	461f      	mov	r7, r3
 800931a:	3308      	adds	r3, #8
 800931c:	460c      	mov	r4, r1
 800931e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009322:	4606      	mov	r6, r0
 8009324:	2201      	movs	r2, #1
 8009326:	2100      	movs	r1, #0
 8009328:	429a      	cmp	r2, r3
 800932a:	db09      	blt.n	8009340 <__s2b+0x30>
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff ff47 	bl	80091c0 <_Balloc>
 8009332:	b940      	cbnz	r0, 8009346 <__s2b+0x36>
 8009334:	4602      	mov	r2, r0
 8009336:	21d3      	movs	r1, #211	; 0xd3
 8009338:	4b18      	ldr	r3, [pc, #96]	; (800939c <__s2b+0x8c>)
 800933a:	4819      	ldr	r0, [pc, #100]	; (80093a0 <__s2b+0x90>)
 800933c:	f001 fcae 	bl	800ac9c <__assert_func>
 8009340:	0052      	lsls	r2, r2, #1
 8009342:	3101      	adds	r1, #1
 8009344:	e7f0      	b.n	8009328 <__s2b+0x18>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	2d09      	cmp	r5, #9
 800934a:	6143      	str	r3, [r0, #20]
 800934c:	f04f 0301 	mov.w	r3, #1
 8009350:	6103      	str	r3, [r0, #16]
 8009352:	dd16      	ble.n	8009382 <__s2b+0x72>
 8009354:	f104 0909 	add.w	r9, r4, #9
 8009358:	46c8      	mov	r8, r9
 800935a:	442c      	add	r4, r5
 800935c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009360:	4601      	mov	r1, r0
 8009362:	220a      	movs	r2, #10
 8009364:	4630      	mov	r0, r6
 8009366:	3b30      	subs	r3, #48	; 0x30
 8009368:	f7ff ff8c 	bl	8009284 <__multadd>
 800936c:	45a0      	cmp	r8, r4
 800936e:	d1f5      	bne.n	800935c <__s2b+0x4c>
 8009370:	f1a5 0408 	sub.w	r4, r5, #8
 8009374:	444c      	add	r4, r9
 8009376:	1b2d      	subs	r5, r5, r4
 8009378:	1963      	adds	r3, r4, r5
 800937a:	42bb      	cmp	r3, r7
 800937c:	db04      	blt.n	8009388 <__s2b+0x78>
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	2509      	movs	r5, #9
 8009384:	340a      	adds	r4, #10
 8009386:	e7f6      	b.n	8009376 <__s2b+0x66>
 8009388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800938c:	4601      	mov	r1, r0
 800938e:	220a      	movs	r2, #10
 8009390:	4630      	mov	r0, r6
 8009392:	3b30      	subs	r3, #48	; 0x30
 8009394:	f7ff ff76 	bl	8009284 <__multadd>
 8009398:	e7ee      	b.n	8009378 <__s2b+0x68>
 800939a:	bf00      	nop
 800939c:	0800bac7 	.word	0x0800bac7
 80093a0:	0800bad8 	.word	0x0800bad8

080093a4 <__hi0bits>:
 80093a4:	0c02      	lsrs	r2, r0, #16
 80093a6:	0412      	lsls	r2, r2, #16
 80093a8:	4603      	mov	r3, r0
 80093aa:	b9ca      	cbnz	r2, 80093e0 <__hi0bits+0x3c>
 80093ac:	0403      	lsls	r3, r0, #16
 80093ae:	2010      	movs	r0, #16
 80093b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093b4:	bf04      	itt	eq
 80093b6:	021b      	lsleq	r3, r3, #8
 80093b8:	3008      	addeq	r0, #8
 80093ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093be:	bf04      	itt	eq
 80093c0:	011b      	lsleq	r3, r3, #4
 80093c2:	3004      	addeq	r0, #4
 80093c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093c8:	bf04      	itt	eq
 80093ca:	009b      	lsleq	r3, r3, #2
 80093cc:	3002      	addeq	r0, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	db05      	blt.n	80093de <__hi0bits+0x3a>
 80093d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80093d6:	f100 0001 	add.w	r0, r0, #1
 80093da:	bf08      	it	eq
 80093dc:	2020      	moveq	r0, #32
 80093de:	4770      	bx	lr
 80093e0:	2000      	movs	r0, #0
 80093e2:	e7e5      	b.n	80093b0 <__hi0bits+0xc>

080093e4 <__lo0bits>:
 80093e4:	6803      	ldr	r3, [r0, #0]
 80093e6:	4602      	mov	r2, r0
 80093e8:	f013 0007 	ands.w	r0, r3, #7
 80093ec:	d00b      	beq.n	8009406 <__lo0bits+0x22>
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d421      	bmi.n	8009436 <__lo0bits+0x52>
 80093f2:	0798      	lsls	r0, r3, #30
 80093f4:	bf49      	itett	mi
 80093f6:	085b      	lsrmi	r3, r3, #1
 80093f8:	089b      	lsrpl	r3, r3, #2
 80093fa:	2001      	movmi	r0, #1
 80093fc:	6013      	strmi	r3, [r2, #0]
 80093fe:	bf5c      	itt	pl
 8009400:	2002      	movpl	r0, #2
 8009402:	6013      	strpl	r3, [r2, #0]
 8009404:	4770      	bx	lr
 8009406:	b299      	uxth	r1, r3
 8009408:	b909      	cbnz	r1, 800940e <__lo0bits+0x2a>
 800940a:	2010      	movs	r0, #16
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	b2d9      	uxtb	r1, r3
 8009410:	b909      	cbnz	r1, 8009416 <__lo0bits+0x32>
 8009412:	3008      	adds	r0, #8
 8009414:	0a1b      	lsrs	r3, r3, #8
 8009416:	0719      	lsls	r1, r3, #28
 8009418:	bf04      	itt	eq
 800941a:	091b      	lsreq	r3, r3, #4
 800941c:	3004      	addeq	r0, #4
 800941e:	0799      	lsls	r1, r3, #30
 8009420:	bf04      	itt	eq
 8009422:	089b      	lsreq	r3, r3, #2
 8009424:	3002      	addeq	r0, #2
 8009426:	07d9      	lsls	r1, r3, #31
 8009428:	d403      	bmi.n	8009432 <__lo0bits+0x4e>
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	f100 0001 	add.w	r0, r0, #1
 8009430:	d003      	beq.n	800943a <__lo0bits+0x56>
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	4770      	bx	lr
 8009436:	2000      	movs	r0, #0
 8009438:	4770      	bx	lr
 800943a:	2020      	movs	r0, #32
 800943c:	4770      	bx	lr
	...

08009440 <__i2b>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	2101      	movs	r1, #1
 8009446:	f7ff febb 	bl	80091c0 <_Balloc>
 800944a:	4602      	mov	r2, r0
 800944c:	b928      	cbnz	r0, 800945a <__i2b+0x1a>
 800944e:	f240 1145 	movw	r1, #325	; 0x145
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <__i2b+0x24>)
 8009454:	4804      	ldr	r0, [pc, #16]	; (8009468 <__i2b+0x28>)
 8009456:	f001 fc21 	bl	800ac9c <__assert_func>
 800945a:	2301      	movs	r3, #1
 800945c:	6144      	str	r4, [r0, #20]
 800945e:	6103      	str	r3, [r0, #16]
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop
 8009464:	0800bac7 	.word	0x0800bac7
 8009468:	0800bad8 	.word	0x0800bad8

0800946c <__multiply>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	4691      	mov	r9, r2
 8009472:	690a      	ldr	r2, [r1, #16]
 8009474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009478:	460c      	mov	r4, r1
 800947a:	429a      	cmp	r2, r3
 800947c:	bfbe      	ittt	lt
 800947e:	460b      	movlt	r3, r1
 8009480:	464c      	movlt	r4, r9
 8009482:	4699      	movlt	r9, r3
 8009484:	6927      	ldr	r7, [r4, #16]
 8009486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	eb07 060a 	add.w	r6, r7, sl
 8009492:	42b3      	cmp	r3, r6
 8009494:	b085      	sub	sp, #20
 8009496:	bfb8      	it	lt
 8009498:	3101      	addlt	r1, #1
 800949a:	f7ff fe91 	bl	80091c0 <_Balloc>
 800949e:	b930      	cbnz	r0, 80094ae <__multiply+0x42>
 80094a0:	4602      	mov	r2, r0
 80094a2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80094a6:	4b43      	ldr	r3, [pc, #268]	; (80095b4 <__multiply+0x148>)
 80094a8:	4843      	ldr	r0, [pc, #268]	; (80095b8 <__multiply+0x14c>)
 80094aa:	f001 fbf7 	bl	800ac9c <__assert_func>
 80094ae:	f100 0514 	add.w	r5, r0, #20
 80094b2:	462b      	mov	r3, r5
 80094b4:	2200      	movs	r2, #0
 80094b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094ba:	4543      	cmp	r3, r8
 80094bc:	d321      	bcc.n	8009502 <__multiply+0x96>
 80094be:	f104 0314 	add.w	r3, r4, #20
 80094c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094c6:	f109 0314 	add.w	r3, r9, #20
 80094ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094ce:	9202      	str	r2, [sp, #8]
 80094d0:	1b3a      	subs	r2, r7, r4
 80094d2:	3a15      	subs	r2, #21
 80094d4:	f022 0203 	bic.w	r2, r2, #3
 80094d8:	3204      	adds	r2, #4
 80094da:	f104 0115 	add.w	r1, r4, #21
 80094de:	428f      	cmp	r7, r1
 80094e0:	bf38      	it	cc
 80094e2:	2204      	movcc	r2, #4
 80094e4:	9201      	str	r2, [sp, #4]
 80094e6:	9a02      	ldr	r2, [sp, #8]
 80094e8:	9303      	str	r3, [sp, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d80c      	bhi.n	8009508 <__multiply+0x9c>
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	dd03      	ble.n	80094fa <__multiply+0x8e>
 80094f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d05a      	beq.n	80095b0 <__multiply+0x144>
 80094fa:	6106      	str	r6, [r0, #16]
 80094fc:	b005      	add	sp, #20
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	f843 2b04 	str.w	r2, [r3], #4
 8009506:	e7d8      	b.n	80094ba <__multiply+0x4e>
 8009508:	f8b3 a000 	ldrh.w	sl, [r3]
 800950c:	f1ba 0f00 	cmp.w	sl, #0
 8009510:	d023      	beq.n	800955a <__multiply+0xee>
 8009512:	46a9      	mov	r9, r5
 8009514:	f04f 0c00 	mov.w	ip, #0
 8009518:	f104 0e14 	add.w	lr, r4, #20
 800951c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009520:	f8d9 1000 	ldr.w	r1, [r9]
 8009524:	fa1f fb82 	uxth.w	fp, r2
 8009528:	b289      	uxth	r1, r1
 800952a:	fb0a 110b 	mla	r1, sl, fp, r1
 800952e:	4461      	add	r1, ip
 8009530:	f8d9 c000 	ldr.w	ip, [r9]
 8009534:	0c12      	lsrs	r2, r2, #16
 8009536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800953a:	fb0a c202 	mla	r2, sl, r2, ip
 800953e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009542:	b289      	uxth	r1, r1
 8009544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009548:	4577      	cmp	r7, lr
 800954a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800954e:	f849 1b04 	str.w	r1, [r9], #4
 8009552:	d8e3      	bhi.n	800951c <__multiply+0xb0>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	f845 c002 	str.w	ip, [r5, r2]
 800955a:	9a03      	ldr	r2, [sp, #12]
 800955c:	3304      	adds	r3, #4
 800955e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009562:	f1b9 0f00 	cmp.w	r9, #0
 8009566:	d021      	beq.n	80095ac <__multiply+0x140>
 8009568:	46ae      	mov	lr, r5
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	6829      	ldr	r1, [r5, #0]
 8009570:	f104 0c14 	add.w	ip, r4, #20
 8009574:	f8bc b000 	ldrh.w	fp, [ip]
 8009578:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800957c:	b289      	uxth	r1, r1
 800957e:	fb09 220b 	mla	r2, r9, fp, r2
 8009582:	4452      	add	r2, sl
 8009584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009588:	f84e 1b04 	str.w	r1, [lr], #4
 800958c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009590:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009594:	f8be 1000 	ldrh.w	r1, [lr]
 8009598:	4567      	cmp	r7, ip
 800959a:	fb09 110a 	mla	r1, r9, sl, r1
 800959e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80095a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095a6:	d8e5      	bhi.n	8009574 <__multiply+0x108>
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	50a9      	str	r1, [r5, r2]
 80095ac:	3504      	adds	r5, #4
 80095ae:	e79a      	b.n	80094e6 <__multiply+0x7a>
 80095b0:	3e01      	subs	r6, #1
 80095b2:	e79c      	b.n	80094ee <__multiply+0x82>
 80095b4:	0800bac7 	.word	0x0800bac7
 80095b8:	0800bad8 	.word	0x0800bad8

080095bc <__pow5mult>:
 80095bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c0:	4615      	mov	r5, r2
 80095c2:	f012 0203 	ands.w	r2, r2, #3
 80095c6:	4606      	mov	r6, r0
 80095c8:	460f      	mov	r7, r1
 80095ca:	d007      	beq.n	80095dc <__pow5mult+0x20>
 80095cc:	4c25      	ldr	r4, [pc, #148]	; (8009664 <__pow5mult+0xa8>)
 80095ce:	3a01      	subs	r2, #1
 80095d0:	2300      	movs	r3, #0
 80095d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095d6:	f7ff fe55 	bl	8009284 <__multadd>
 80095da:	4607      	mov	r7, r0
 80095dc:	10ad      	asrs	r5, r5, #2
 80095de:	d03d      	beq.n	800965c <__pow5mult+0xa0>
 80095e0:	69f4      	ldr	r4, [r6, #28]
 80095e2:	b97c      	cbnz	r4, 8009604 <__pow5mult+0x48>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f7fd fe3f 	bl	8007268 <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	61f0      	str	r0, [r6, #28]
 80095ee:	b928      	cbnz	r0, 80095fc <__pow5mult+0x40>
 80095f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <__pow5mult+0xac>)
 80095f6:	481d      	ldr	r0, [pc, #116]	; (800966c <__pow5mult+0xb0>)
 80095f8:	f001 fb50 	bl	800ac9c <__assert_func>
 80095fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009600:	6004      	str	r4, [r0, #0]
 8009602:	60c4      	str	r4, [r0, #12]
 8009604:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800960c:	b94c      	cbnz	r4, 8009622 <__pow5mult+0x66>
 800960e:	f240 2171 	movw	r1, #625	; 0x271
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ff14 	bl	8009440 <__i2b>
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	f04f 0900 	mov.w	r9, #0
 8009626:	07eb      	lsls	r3, r5, #31
 8009628:	d50a      	bpl.n	8009640 <__pow5mult+0x84>
 800962a:	4639      	mov	r1, r7
 800962c:	4622      	mov	r2, r4
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ff1c 	bl	800946c <__multiply>
 8009634:	4680      	mov	r8, r0
 8009636:	4639      	mov	r1, r7
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fe01 	bl	8009240 <_Bfree>
 800963e:	4647      	mov	r7, r8
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	d00b      	beq.n	800965c <__pow5mult+0xa0>
 8009644:	6820      	ldr	r0, [r4, #0]
 8009646:	b938      	cbnz	r0, 8009658 <__pow5mult+0x9c>
 8009648:	4622      	mov	r2, r4
 800964a:	4621      	mov	r1, r4
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ff0d 	bl	800946c <__multiply>
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	f8c0 9000 	str.w	r9, [r0]
 8009658:	4604      	mov	r4, r0
 800965a:	e7e4      	b.n	8009626 <__pow5mult+0x6a>
 800965c:	4638      	mov	r0, r7
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	bf00      	nop
 8009664:	0800bc28 	.word	0x0800bc28
 8009668:	0800ba58 	.word	0x0800ba58
 800966c:	0800bad8 	.word	0x0800bad8

08009670 <__lshift>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	460c      	mov	r4, r1
 8009676:	4607      	mov	r7, r0
 8009678:	4691      	mov	r9, r2
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6849      	ldr	r1, [r1, #4]
 800967e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009688:	f108 0601 	add.w	r6, r8, #1
 800968c:	42b3      	cmp	r3, r6
 800968e:	db0b      	blt.n	80096a8 <__lshift+0x38>
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fd95 	bl	80091c0 <_Balloc>
 8009696:	4605      	mov	r5, r0
 8009698:	b948      	cbnz	r0, 80096ae <__lshift+0x3e>
 800969a:	4602      	mov	r2, r0
 800969c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80096a0:	4b27      	ldr	r3, [pc, #156]	; (8009740 <__lshift+0xd0>)
 80096a2:	4828      	ldr	r0, [pc, #160]	; (8009744 <__lshift+0xd4>)
 80096a4:	f001 fafa 	bl	800ac9c <__assert_func>
 80096a8:	3101      	adds	r1, #1
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	e7ee      	b.n	800968c <__lshift+0x1c>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f100 0114 	add.w	r1, r0, #20
 80096b4:	f100 0210 	add.w	r2, r0, #16
 80096b8:	4618      	mov	r0, r3
 80096ba:	4553      	cmp	r3, sl
 80096bc:	db33      	blt.n	8009726 <__lshift+0xb6>
 80096be:	6920      	ldr	r0, [r4, #16]
 80096c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096c4:	f104 0314 	add.w	r3, r4, #20
 80096c8:	f019 091f 	ands.w	r9, r9, #31
 80096cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096d4:	d02b      	beq.n	800972e <__lshift+0xbe>
 80096d6:	468a      	mov	sl, r1
 80096d8:	2200      	movs	r2, #0
 80096da:	f1c9 0e20 	rsb	lr, r9, #32
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	fa00 f009 	lsl.w	r0, r0, r9
 80096e4:	4310      	orrs	r0, r2
 80096e6:	f84a 0b04 	str.w	r0, [sl], #4
 80096ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ee:	459c      	cmp	ip, r3
 80096f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80096f4:	d8f3      	bhi.n	80096de <__lshift+0x6e>
 80096f6:	ebac 0304 	sub.w	r3, ip, r4
 80096fa:	3b15      	subs	r3, #21
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	3304      	adds	r3, #4
 8009702:	f104 0015 	add.w	r0, r4, #21
 8009706:	4584      	cmp	ip, r0
 8009708:	bf38      	it	cc
 800970a:	2304      	movcc	r3, #4
 800970c:	50ca      	str	r2, [r1, r3]
 800970e:	b10a      	cbz	r2, 8009714 <__lshift+0xa4>
 8009710:	f108 0602 	add.w	r6, r8, #2
 8009714:	3e01      	subs	r6, #1
 8009716:	4638      	mov	r0, r7
 8009718:	4621      	mov	r1, r4
 800971a:	612e      	str	r6, [r5, #16]
 800971c:	f7ff fd90 	bl	8009240 <_Bfree>
 8009720:	4628      	mov	r0, r5
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	f842 0f04 	str.w	r0, [r2, #4]!
 800972a:	3301      	adds	r3, #1
 800972c:	e7c5      	b.n	80096ba <__lshift+0x4a>
 800972e:	3904      	subs	r1, #4
 8009730:	f853 2b04 	ldr.w	r2, [r3], #4
 8009734:	459c      	cmp	ip, r3
 8009736:	f841 2f04 	str.w	r2, [r1, #4]!
 800973a:	d8f9      	bhi.n	8009730 <__lshift+0xc0>
 800973c:	e7ea      	b.n	8009714 <__lshift+0xa4>
 800973e:	bf00      	nop
 8009740:	0800bac7 	.word	0x0800bac7
 8009744:	0800bad8 	.word	0x0800bad8

08009748 <__mcmp>:
 8009748:	4603      	mov	r3, r0
 800974a:	690a      	ldr	r2, [r1, #16]
 800974c:	6900      	ldr	r0, [r0, #16]
 800974e:	b530      	push	{r4, r5, lr}
 8009750:	1a80      	subs	r0, r0, r2
 8009752:	d10d      	bne.n	8009770 <__mcmp+0x28>
 8009754:	3314      	adds	r3, #20
 8009756:	3114      	adds	r1, #20
 8009758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800975c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009768:	4295      	cmp	r5, r2
 800976a:	d002      	beq.n	8009772 <__mcmp+0x2a>
 800976c:	d304      	bcc.n	8009778 <__mcmp+0x30>
 800976e:	2001      	movs	r0, #1
 8009770:	bd30      	pop	{r4, r5, pc}
 8009772:	42a3      	cmp	r3, r4
 8009774:	d3f4      	bcc.n	8009760 <__mcmp+0x18>
 8009776:	e7fb      	b.n	8009770 <__mcmp+0x28>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	e7f8      	b.n	8009770 <__mcmp+0x28>
	...

08009780 <__mdiff>:
 8009780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	460d      	mov	r5, r1
 8009786:	4607      	mov	r7, r0
 8009788:	4611      	mov	r1, r2
 800978a:	4628      	mov	r0, r5
 800978c:	4614      	mov	r4, r2
 800978e:	f7ff ffdb 	bl	8009748 <__mcmp>
 8009792:	1e06      	subs	r6, r0, #0
 8009794:	d111      	bne.n	80097ba <__mdiff+0x3a>
 8009796:	4631      	mov	r1, r6
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff fd11 	bl	80091c0 <_Balloc>
 800979e:	4602      	mov	r2, r0
 80097a0:	b928      	cbnz	r0, 80097ae <__mdiff+0x2e>
 80097a2:	f240 2137 	movw	r1, #567	; 0x237
 80097a6:	4b3a      	ldr	r3, [pc, #232]	; (8009890 <__mdiff+0x110>)
 80097a8:	483a      	ldr	r0, [pc, #232]	; (8009894 <__mdiff+0x114>)
 80097aa:	f001 fa77 	bl	800ac9c <__assert_func>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097b4:	4610      	mov	r0, r2
 80097b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	bfa4      	itt	ge
 80097bc:	4623      	movge	r3, r4
 80097be:	462c      	movge	r4, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	6861      	ldr	r1, [r4, #4]
 80097c4:	bfa6      	itte	ge
 80097c6:	461d      	movge	r5, r3
 80097c8:	2600      	movge	r6, #0
 80097ca:	2601      	movlt	r6, #1
 80097cc:	f7ff fcf8 	bl	80091c0 <_Balloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	b918      	cbnz	r0, 80097dc <__mdiff+0x5c>
 80097d4:	f240 2145 	movw	r1, #581	; 0x245
 80097d8:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <__mdiff+0x110>)
 80097da:	e7e5      	b.n	80097a8 <__mdiff+0x28>
 80097dc:	f102 0814 	add.w	r8, r2, #20
 80097e0:	46c2      	mov	sl, r8
 80097e2:	f04f 0c00 	mov.w	ip, #0
 80097e6:	6927      	ldr	r7, [r4, #16]
 80097e8:	60c6      	str	r6, [r0, #12]
 80097ea:	692e      	ldr	r6, [r5, #16]
 80097ec:	f104 0014 	add.w	r0, r4, #20
 80097f0:	f105 0914 	add.w	r9, r5, #20
 80097f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80097f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097fc:	3410      	adds	r4, #16
 80097fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009802:	f859 3b04 	ldr.w	r3, [r9], #4
 8009806:	fa1f f18b 	uxth.w	r1, fp
 800980a:	4461      	add	r1, ip
 800980c:	fa1f fc83 	uxth.w	ip, r3
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	eba1 010c 	sub.w	r1, r1, ip
 8009816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800981a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800981e:	b289      	uxth	r1, r1
 8009820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009824:	454e      	cmp	r6, r9
 8009826:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800982a:	f84a 1b04 	str.w	r1, [sl], #4
 800982e:	d8e6      	bhi.n	80097fe <__mdiff+0x7e>
 8009830:	1b73      	subs	r3, r6, r5
 8009832:	3b15      	subs	r3, #21
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	3515      	adds	r5, #21
 800983a:	3304      	adds	r3, #4
 800983c:	42ae      	cmp	r6, r5
 800983e:	bf38      	it	cc
 8009840:	2304      	movcc	r3, #4
 8009842:	4418      	add	r0, r3
 8009844:	4443      	add	r3, r8
 8009846:	461e      	mov	r6, r3
 8009848:	4605      	mov	r5, r0
 800984a:	4575      	cmp	r5, lr
 800984c:	d30e      	bcc.n	800986c <__mdiff+0xec>
 800984e:	f10e 0103 	add.w	r1, lr, #3
 8009852:	1a09      	subs	r1, r1, r0
 8009854:	f021 0103 	bic.w	r1, r1, #3
 8009858:	3803      	subs	r0, #3
 800985a:	4586      	cmp	lr, r0
 800985c:	bf38      	it	cc
 800985e:	2100      	movcc	r1, #0
 8009860:	440b      	add	r3, r1
 8009862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009866:	b189      	cbz	r1, 800988c <__mdiff+0x10c>
 8009868:	6117      	str	r7, [r2, #16]
 800986a:	e7a3      	b.n	80097b4 <__mdiff+0x34>
 800986c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009870:	fa1f f188 	uxth.w	r1, r8
 8009874:	4461      	add	r1, ip
 8009876:	140c      	asrs	r4, r1, #16
 8009878:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800987c:	b289      	uxth	r1, r1
 800987e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009882:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009886:	f846 1b04 	str.w	r1, [r6], #4
 800988a:	e7de      	b.n	800984a <__mdiff+0xca>
 800988c:	3f01      	subs	r7, #1
 800988e:	e7e8      	b.n	8009862 <__mdiff+0xe2>
 8009890:	0800bac7 	.word	0x0800bac7
 8009894:	0800bad8 	.word	0x0800bad8

08009898 <__ulp>:
 8009898:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <__ulp+0x3c>)
 800989a:	400b      	ands	r3, r1
 800989c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dc08      	bgt.n	80098b6 <__ulp+0x1e>
 80098a4:	425b      	negs	r3, r3
 80098a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80098aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098ae:	da04      	bge.n	80098ba <__ulp+0x22>
 80098b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098b4:	4113      	asrs	r3, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	e008      	b.n	80098cc <__ulp+0x34>
 80098ba:	f1a2 0314 	sub.w	r3, r2, #20
 80098be:	2b1e      	cmp	r3, #30
 80098c0:	bfd6      	itet	le
 80098c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80098c6:	2201      	movgt	r2, #1
 80098c8:	40da      	lsrle	r2, r3
 80098ca:	2300      	movs	r3, #0
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	7ff00000 	.word	0x7ff00000

080098d8 <__b2d>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	6905      	ldr	r5, [r0, #16]
 80098dc:	f100 0714 	add.w	r7, r0, #20
 80098e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80098e4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80098e8:	1f2e      	subs	r6, r5, #4
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff fd5a 	bl	80093a4 <__hi0bits>
 80098f0:	f1c0 0220 	rsb	r2, r0, #32
 80098f4:	280a      	cmp	r0, #10
 80098f6:	4603      	mov	r3, r0
 80098f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009964 <__b2d+0x8c>
 80098fc:	600a      	str	r2, [r1, #0]
 80098fe:	dc12      	bgt.n	8009926 <__b2d+0x4e>
 8009900:	f1c0 0e0b 	rsb	lr, r0, #11
 8009904:	fa24 f20e 	lsr.w	r2, r4, lr
 8009908:	42b7      	cmp	r7, r6
 800990a:	ea42 010c 	orr.w	r1, r2, ip
 800990e:	bf2c      	ite	cs
 8009910:	2200      	movcs	r2, #0
 8009912:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009916:	3315      	adds	r3, #21
 8009918:	fa04 f303 	lsl.w	r3, r4, r3
 800991c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009920:	431a      	orrs	r2, r3
 8009922:	4610      	mov	r0, r2
 8009924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009926:	42b7      	cmp	r7, r6
 8009928:	bf2e      	itee	cs
 800992a:	2200      	movcs	r2, #0
 800992c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009930:	f1a5 0608 	subcc.w	r6, r5, #8
 8009934:	3b0b      	subs	r3, #11
 8009936:	d012      	beq.n	800995e <__b2d+0x86>
 8009938:	f1c3 0520 	rsb	r5, r3, #32
 800993c:	fa22 f105 	lsr.w	r1, r2, r5
 8009940:	409c      	lsls	r4, r3
 8009942:	430c      	orrs	r4, r1
 8009944:	42be      	cmp	r6, r7
 8009946:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800994a:	bf94      	ite	ls
 800994c:	2400      	movls	r4, #0
 800994e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009952:	409a      	lsls	r2, r3
 8009954:	40ec      	lsrs	r4, r5
 8009956:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800995a:	4322      	orrs	r2, r4
 800995c:	e7e1      	b.n	8009922 <__b2d+0x4a>
 800995e:	ea44 010c 	orr.w	r1, r4, ip
 8009962:	e7de      	b.n	8009922 <__b2d+0x4a>
 8009964:	3ff00000 	.word	0x3ff00000

08009968 <__d2b>:
 8009968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996a:	2101      	movs	r1, #1
 800996c:	4617      	mov	r7, r2
 800996e:	461c      	mov	r4, r3
 8009970:	9e08      	ldr	r6, [sp, #32]
 8009972:	f7ff fc25 	bl	80091c0 <_Balloc>
 8009976:	4605      	mov	r5, r0
 8009978:	b930      	cbnz	r0, 8009988 <__d2b+0x20>
 800997a:	4602      	mov	r2, r0
 800997c:	f240 310f 	movw	r1, #783	; 0x30f
 8009980:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <__d2b+0xa4>)
 8009982:	4823      	ldr	r0, [pc, #140]	; (8009a10 <__d2b+0xa8>)
 8009984:	f001 f98a 	bl	800ac9c <__assert_func>
 8009988:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800998c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009990:	bb24      	cbnz	r4, 80099dc <__d2b+0x74>
 8009992:	2f00      	cmp	r7, #0
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	d026      	beq.n	80099e6 <__d2b+0x7e>
 8009998:	4668      	mov	r0, sp
 800999a:	9700      	str	r7, [sp, #0]
 800999c:	f7ff fd22 	bl	80093e4 <__lo0bits>
 80099a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099a4:	b1e8      	cbz	r0, 80099e2 <__d2b+0x7a>
 80099a6:	f1c0 0320 	rsb	r3, r0, #32
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	430b      	orrs	r3, r1
 80099b0:	40c2      	lsrs	r2, r0
 80099b2:	616b      	str	r3, [r5, #20]
 80099b4:	9201      	str	r2, [sp, #4]
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bf14      	ite	ne
 80099bc:	2102      	movne	r1, #2
 80099be:	2101      	moveq	r1, #1
 80099c0:	61ab      	str	r3, [r5, #24]
 80099c2:	6129      	str	r1, [r5, #16]
 80099c4:	b1bc      	cbz	r4, 80099f6 <__d2b+0x8e>
 80099c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099ca:	4404      	add	r4, r0
 80099cc:	6034      	str	r4, [r6, #0]
 80099ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d4:	6018      	str	r0, [r3, #0]
 80099d6:	4628      	mov	r0, r5
 80099d8:	b003      	add	sp, #12
 80099da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099e0:	e7d7      	b.n	8009992 <__d2b+0x2a>
 80099e2:	6169      	str	r1, [r5, #20]
 80099e4:	e7e7      	b.n	80099b6 <__d2b+0x4e>
 80099e6:	a801      	add	r0, sp, #4
 80099e8:	f7ff fcfc 	bl	80093e4 <__lo0bits>
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	2101      	movs	r1, #1
 80099f0:	616b      	str	r3, [r5, #20]
 80099f2:	3020      	adds	r0, #32
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x5a>
 80099f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80099fe:	6030      	str	r0, [r6, #0]
 8009a00:	6918      	ldr	r0, [r3, #16]
 8009a02:	f7ff fccf 	bl	80093a4 <__hi0bits>
 8009a06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a0a:	e7e2      	b.n	80099d2 <__d2b+0x6a>
 8009a0c:	0800bac7 	.word	0x0800bac7
 8009a10:	0800bad8 	.word	0x0800bad8

08009a14 <__ratio>:
 8009a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4688      	mov	r8, r1
 8009a1a:	4669      	mov	r1, sp
 8009a1c:	4681      	mov	r9, r0
 8009a1e:	f7ff ff5b 	bl	80098d8 <__b2d>
 8009a22:	460f      	mov	r7, r1
 8009a24:	4604      	mov	r4, r0
 8009a26:	460d      	mov	r5, r1
 8009a28:	4640      	mov	r0, r8
 8009a2a:	a901      	add	r1, sp, #4
 8009a2c:	f7ff ff54 	bl	80098d8 <__b2d>
 8009a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a38:	468b      	mov	fp, r1
 8009a3a:	eba3 0c02 	sub.w	ip, r3, r2
 8009a3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bfd5      	itete	le
 8009a4c:	460a      	movle	r2, r1
 8009a4e:	462a      	movgt	r2, r5
 8009a50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a54:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a58:	bfd8      	it	le
 8009a5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a5e:	465b      	mov	r3, fp
 8009a60:	4602      	mov	r2, r0
 8009a62:	4639      	mov	r1, r7
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7f6 fe61 	bl	800072c <__aeabi_ddiv>
 8009a6a:	b003      	add	sp, #12
 8009a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a70 <__copybits>:
 8009a70:	3901      	subs	r1, #1
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	1149      	asrs	r1, r1, #5
 8009a76:	6914      	ldr	r4, [r2, #16]
 8009a78:	3101      	adds	r1, #1
 8009a7a:	f102 0314 	add.w	r3, r2, #20
 8009a7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a86:	1f05      	subs	r5, r0, #4
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d30c      	bcc.n	8009aa6 <__copybits+0x36>
 8009a8c:	1aa3      	subs	r3, r4, r2
 8009a8e:	3b11      	subs	r3, #17
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	3211      	adds	r2, #17
 8009a96:	42a2      	cmp	r2, r4
 8009a98:	bf88      	it	hi
 8009a9a:	2300      	movhi	r3, #0
 8009a9c:	4418      	add	r0, r3
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4288      	cmp	r0, r1
 8009aa2:	d305      	bcc.n	8009ab0 <__copybits+0x40>
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aaa:	f845 6f04 	str.w	r6, [r5, #4]!
 8009aae:	e7eb      	b.n	8009a88 <__copybits+0x18>
 8009ab0:	f840 3b04 	str.w	r3, [r0], #4
 8009ab4:	e7f4      	b.n	8009aa0 <__copybits+0x30>

08009ab6 <__any_on>:
 8009ab6:	f100 0214 	add.w	r2, r0, #20
 8009aba:	6900      	ldr	r0, [r0, #16]
 8009abc:	114b      	asrs	r3, r1, #5
 8009abe:	4298      	cmp	r0, r3
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	db11      	blt.n	8009ae8 <__any_on+0x32>
 8009ac4:	dd0a      	ble.n	8009adc <__any_on+0x26>
 8009ac6:	f011 011f 	ands.w	r1, r1, #31
 8009aca:	d007      	beq.n	8009adc <__any_on+0x26>
 8009acc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ad0:	fa24 f001 	lsr.w	r0, r4, r1
 8009ad4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ad8:	428c      	cmp	r4, r1
 8009ada:	d10b      	bne.n	8009af4 <__any_on+0x3e>
 8009adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d803      	bhi.n	8009aec <__any_on+0x36>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	4603      	mov	r3, r0
 8009aea:	e7f7      	b.n	8009adc <__any_on+0x26>
 8009aec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d0f5      	beq.n	8009ae0 <__any_on+0x2a>
 8009af4:	2001      	movs	r0, #1
 8009af6:	e7f6      	b.n	8009ae6 <__any_on+0x30>

08009af8 <sulp>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	460f      	mov	r7, r1
 8009afe:	4690      	mov	r8, r2
 8009b00:	f7ff feca 	bl	8009898 <__ulp>
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	f1b8 0f00 	cmp.w	r8, #0
 8009b0c:	d011      	beq.n	8009b32 <sulp+0x3a>
 8009b0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd0b      	ble.n	8009b32 <sulp+0x3a>
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	051b      	lsls	r3, r3, #20
 8009b1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b26:	4622      	mov	r2, r4
 8009b28:	462b      	mov	r3, r5
 8009b2a:	f7f6 fcd5 	bl	80004d8 <__aeabi_dmul>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	4620      	mov	r0, r4
 8009b34:	4629      	mov	r1, r5
 8009b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3a:	0000      	movs	r0, r0
 8009b3c:	0000      	movs	r0, r0
	...

08009b40 <_strtod_l>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	b09f      	sub	sp, #124	; 0x7c
 8009b46:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	921a      	str	r2, [sp, #104]	; 0x68
 8009b4e:	460d      	mov	r5, r1
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	f04f 0900 	mov.w	r9, #0
 8009b58:	460a      	mov	r2, r1
 8009b5a:	9219      	str	r2, [sp, #100]	; 0x64
 8009b5c:	7811      	ldrb	r1, [r2, #0]
 8009b5e:	292b      	cmp	r1, #43	; 0x2b
 8009b60:	d04a      	beq.n	8009bf8 <_strtod_l+0xb8>
 8009b62:	d838      	bhi.n	8009bd6 <_strtod_l+0x96>
 8009b64:	290d      	cmp	r1, #13
 8009b66:	d832      	bhi.n	8009bce <_strtod_l+0x8e>
 8009b68:	2908      	cmp	r1, #8
 8009b6a:	d832      	bhi.n	8009bd2 <_strtod_l+0x92>
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d03b      	beq.n	8009be8 <_strtod_l+0xa8>
 8009b70:	2200      	movs	r2, #0
 8009b72:	920e      	str	r2, [sp, #56]	; 0x38
 8009b74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b76:	7832      	ldrb	r2, [r6, #0]
 8009b78:	2a30      	cmp	r2, #48	; 0x30
 8009b7a:	f040 80b2 	bne.w	8009ce2 <_strtod_l+0x1a2>
 8009b7e:	7872      	ldrb	r2, [r6, #1]
 8009b80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b84:	2a58      	cmp	r2, #88	; 0x58
 8009b86:	d16e      	bne.n	8009c66 <_strtod_l+0x126>
 8009b88:	9302      	str	r3, [sp, #8]
 8009b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	ab1a      	add	r3, sp, #104	; 0x68
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	4a8c      	ldr	r2, [pc, #560]	; (8009dc8 <_strtod_l+0x288>)
 8009b96:	ab1b      	add	r3, sp, #108	; 0x6c
 8009b98:	a919      	add	r1, sp, #100	; 0x64
 8009b9a:	f001 f919 	bl	800add0 <__gethex>
 8009b9e:	f010 070f 	ands.w	r7, r0, #15
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	d005      	beq.n	8009bb2 <_strtod_l+0x72>
 8009ba6:	2f06      	cmp	r7, #6
 8009ba8:	d128      	bne.n	8009bfc <_strtod_l+0xbc>
 8009baa:	2300      	movs	r3, #0
 8009bac:	3601      	adds	r6, #1
 8009bae:	9619      	str	r6, [sp, #100]	; 0x64
 8009bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 85a0 	bne.w	800a6fa <_strtod_l+0xbba>
 8009bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbc:	b1cb      	cbz	r3, 8009bf2 <_strtod_l+0xb2>
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	b01f      	add	sp, #124	; 0x7c
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	2920      	cmp	r1, #32
 8009bd0:	d1ce      	bne.n	8009b70 <_strtod_l+0x30>
 8009bd2:	3201      	adds	r2, #1
 8009bd4:	e7c1      	b.n	8009b5a <_strtod_l+0x1a>
 8009bd6:	292d      	cmp	r1, #45	; 0x2d
 8009bd8:	d1ca      	bne.n	8009b70 <_strtod_l+0x30>
 8009bda:	2101      	movs	r1, #1
 8009bdc:	910e      	str	r1, [sp, #56]	; 0x38
 8009bde:	1c51      	adds	r1, r2, #1
 8009be0:	9119      	str	r1, [sp, #100]	; 0x64
 8009be2:	7852      	ldrb	r2, [r2, #1]
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d1c5      	bne.n	8009b74 <_strtod_l+0x34>
 8009be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bea:	9519      	str	r5, [sp, #100]	; 0x64
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 8582 	bne.w	800a6f6 <_strtod_l+0xbb6>
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	e7e5      	b.n	8009bc4 <_strtod_l+0x84>
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	e7ef      	b.n	8009bdc <_strtod_l+0x9c>
 8009bfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bfe:	b13a      	cbz	r2, 8009c10 <_strtod_l+0xd0>
 8009c00:	2135      	movs	r1, #53	; 0x35
 8009c02:	a81c      	add	r0, sp, #112	; 0x70
 8009c04:	f7ff ff34 	bl	8009a70 <__copybits>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c0c:	f7ff fb18 	bl	8009240 <_Bfree>
 8009c10:	3f01      	subs	r7, #1
 8009c12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c14:	2f04      	cmp	r7, #4
 8009c16:	d806      	bhi.n	8009c26 <_strtod_l+0xe6>
 8009c18:	e8df f007 	tbb	[pc, r7]
 8009c1c:	201d0314 	.word	0x201d0314
 8009c20:	14          	.byte	0x14
 8009c21:	00          	.byte	0x00
 8009c22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009c26:	05e9      	lsls	r1, r5, #23
 8009c28:	bf48      	it	mi
 8009c2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c32:	0d1b      	lsrs	r3, r3, #20
 8009c34:	051b      	lsls	r3, r3, #20
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1bb      	bne.n	8009bb2 <_strtod_l+0x72>
 8009c3a:	f7fe fbbd 	bl	80083b8 <__errno>
 8009c3e:	2322      	movs	r3, #34	; 0x22
 8009c40:	6003      	str	r3, [r0, #0]
 8009c42:	e7b6      	b.n	8009bb2 <_strtod_l+0x72>
 8009c44:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c48:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c54:	e7e7      	b.n	8009c26 <_strtod_l+0xe6>
 8009c56:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009dcc <_strtod_l+0x28c>
 8009c5a:	e7e4      	b.n	8009c26 <_strtod_l+0xe6>
 8009c5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c60:	f04f 38ff 	mov.w	r8, #4294967295
 8009c64:	e7df      	b.n	8009c26 <_strtod_l+0xe6>
 8009c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	9219      	str	r2, [sp, #100]	; 0x64
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b30      	cmp	r3, #48	; 0x30
 8009c70:	d0f9      	beq.n	8009c66 <_strtod_l+0x126>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d09d      	beq.n	8009bb2 <_strtod_l+0x72>
 8009c76:	2301      	movs	r3, #1
 8009c78:	f04f 0a00 	mov.w	sl, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	46d3      	mov	fp, sl
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c84:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009c8c:	7806      	ldrb	r6, [r0, #0]
 8009c8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c92:	b2d9      	uxtb	r1, r3
 8009c94:	2909      	cmp	r1, #9
 8009c96:	d926      	bls.n	8009ce6 <_strtod_l+0x1a6>
 8009c98:	2201      	movs	r2, #1
 8009c9a:	494d      	ldr	r1, [pc, #308]	; (8009dd0 <_strtod_l+0x290>)
 8009c9c:	f000 ffe6 	bl	800ac6c <strncmp>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d030      	beq.n	8009d06 <_strtod_l+0x1c6>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4603      	mov	r3, r0
 8009caa:	465e      	mov	r6, fp
 8009cac:	9008      	str	r0, [sp, #32]
 8009cae:	2a65      	cmp	r2, #101	; 0x65
 8009cb0:	d001      	beq.n	8009cb6 <_strtod_l+0x176>
 8009cb2:	2a45      	cmp	r2, #69	; 0x45
 8009cb4:	d113      	bne.n	8009cde <_strtod_l+0x19e>
 8009cb6:	b91e      	cbnz	r6, 8009cc0 <_strtod_l+0x180>
 8009cb8:	9a05      	ldr	r2, [sp, #20]
 8009cba:	4302      	orrs	r2, r0
 8009cbc:	d094      	beq.n	8009be8 <_strtod_l+0xa8>
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009cc2:	1c6a      	adds	r2, r5, #1
 8009cc4:	9219      	str	r2, [sp, #100]	; 0x64
 8009cc6:	786a      	ldrb	r2, [r5, #1]
 8009cc8:	2a2b      	cmp	r2, #43	; 0x2b
 8009cca:	d074      	beq.n	8009db6 <_strtod_l+0x276>
 8009ccc:	2a2d      	cmp	r2, #45	; 0x2d
 8009cce:	d078      	beq.n	8009dc2 <_strtod_l+0x282>
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009cd8:	2909      	cmp	r1, #9
 8009cda:	d97f      	bls.n	8009ddc <_strtod_l+0x29c>
 8009cdc:	9519      	str	r5, [sp, #100]	; 0x64
 8009cde:	2700      	movs	r7, #0
 8009ce0:	e09e      	b.n	8009e20 <_strtod_l+0x2e0>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e7c8      	b.n	8009c78 <_strtod_l+0x138>
 8009ce6:	f1bb 0f08 	cmp.w	fp, #8
 8009cea:	bfd8      	it	le
 8009cec:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009cee:	f100 0001 	add.w	r0, r0, #1
 8009cf2:	bfd6      	itet	le
 8009cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cf8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009cfc:	930a      	strle	r3, [sp, #40]	; 0x28
 8009cfe:	f10b 0b01 	add.w	fp, fp, #1
 8009d02:	9019      	str	r0, [sp, #100]	; 0x64
 8009d04:	e7c1      	b.n	8009c8a <_strtod_l+0x14a>
 8009d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	9219      	str	r2, [sp, #100]	; 0x64
 8009d0c:	785a      	ldrb	r2, [r3, #1]
 8009d0e:	f1bb 0f00 	cmp.w	fp, #0
 8009d12:	d037      	beq.n	8009d84 <_strtod_l+0x244>
 8009d14:	465e      	mov	r6, fp
 8009d16:	9008      	str	r0, [sp, #32]
 8009d18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	d912      	bls.n	8009d46 <_strtod_l+0x206>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e7c4      	b.n	8009cae <_strtod_l+0x16e>
 8009d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d26:	3001      	adds	r0, #1
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	9219      	str	r2, [sp, #100]	; 0x64
 8009d2c:	785a      	ldrb	r2, [r3, #1]
 8009d2e:	2a30      	cmp	r2, #48	; 0x30
 8009d30:	d0f8      	beq.n	8009d24 <_strtod_l+0x1e4>
 8009d32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d36:	2b08      	cmp	r3, #8
 8009d38:	f200 84e4 	bhi.w	800a704 <_strtod_l+0xbc4>
 8009d3c:	9008      	str	r0, [sp, #32]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	4606      	mov	r6, r0
 8009d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d46:	3a30      	subs	r2, #48	; 0x30
 8009d48:	f100 0301 	add.w	r3, r0, #1
 8009d4c:	d014      	beq.n	8009d78 <_strtod_l+0x238>
 8009d4e:	9908      	ldr	r1, [sp, #32]
 8009d50:	eb00 0c06 	add.w	ip, r0, r6
 8009d54:	4419      	add	r1, r3
 8009d56:	9108      	str	r1, [sp, #32]
 8009d58:	4633      	mov	r3, r6
 8009d5a:	210a      	movs	r1, #10
 8009d5c:	4563      	cmp	r3, ip
 8009d5e:	d113      	bne.n	8009d88 <_strtod_l+0x248>
 8009d60:	1833      	adds	r3, r6, r0
 8009d62:	2b08      	cmp	r3, #8
 8009d64:	f106 0601 	add.w	r6, r6, #1
 8009d68:	4406      	add	r6, r0
 8009d6a:	dc1a      	bgt.n	8009da2 <_strtod_l+0x262>
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d70:	fb03 2301 	mla	r3, r3, r1, r2
 8009d74:	930a      	str	r3, [sp, #40]	; 0x28
 8009d76:	2300      	movs	r3, #0
 8009d78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	1c51      	adds	r1, r2, #1
 8009d7e:	9119      	str	r1, [sp, #100]	; 0x64
 8009d80:	7852      	ldrb	r2, [r2, #1]
 8009d82:	e7c9      	b.n	8009d18 <_strtod_l+0x1d8>
 8009d84:	4658      	mov	r0, fp
 8009d86:	e7d2      	b.n	8009d2e <_strtod_l+0x1ee>
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	f103 0301 	add.w	r3, r3, #1
 8009d8e:	dc03      	bgt.n	8009d98 <_strtod_l+0x258>
 8009d90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009d92:	434f      	muls	r7, r1
 8009d94:	970a      	str	r7, [sp, #40]	; 0x28
 8009d96:	e7e1      	b.n	8009d5c <_strtod_l+0x21c>
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	bfd8      	it	le
 8009d9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009da0:	e7dc      	b.n	8009d5c <_strtod_l+0x21c>
 8009da2:	2e10      	cmp	r6, #16
 8009da4:	bfdc      	itt	le
 8009da6:	230a      	movle	r3, #10
 8009da8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009dac:	e7e3      	b.n	8009d76 <_strtod_l+0x236>
 8009dae:	2300      	movs	r3, #0
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	2301      	movs	r3, #1
 8009db4:	e780      	b.n	8009cb8 <_strtod_l+0x178>
 8009db6:	f04f 0c00 	mov.w	ip, #0
 8009dba:	1caa      	adds	r2, r5, #2
 8009dbc:	9219      	str	r2, [sp, #100]	; 0x64
 8009dbe:	78aa      	ldrb	r2, [r5, #2]
 8009dc0:	e788      	b.n	8009cd4 <_strtod_l+0x194>
 8009dc2:	f04f 0c01 	mov.w	ip, #1
 8009dc6:	e7f8      	b.n	8009dba <_strtod_l+0x27a>
 8009dc8:	0800bc38 	.word	0x0800bc38
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	0800bc34 	.word	0x0800bc34
 8009dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dd6:	1c51      	adds	r1, r2, #1
 8009dd8:	9119      	str	r1, [sp, #100]	; 0x64
 8009dda:	7852      	ldrb	r2, [r2, #1]
 8009ddc:	2a30      	cmp	r2, #48	; 0x30
 8009dde:	d0f9      	beq.n	8009dd4 <_strtod_l+0x294>
 8009de0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009de4:	2908      	cmp	r1, #8
 8009de6:	f63f af7a 	bhi.w	8009cde <_strtod_l+0x19e>
 8009dea:	3a30      	subs	r2, #48	; 0x30
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df0:	920c      	str	r2, [sp, #48]	; 0x30
 8009df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df4:	1c57      	adds	r7, r2, #1
 8009df6:	9719      	str	r7, [sp, #100]	; 0x64
 8009df8:	7852      	ldrb	r2, [r2, #1]
 8009dfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009dfe:	f1be 0f09 	cmp.w	lr, #9
 8009e02:	d938      	bls.n	8009e76 <_strtod_l+0x336>
 8009e04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e06:	1a7f      	subs	r7, r7, r1
 8009e08:	2f08      	cmp	r7, #8
 8009e0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e0e:	dc03      	bgt.n	8009e18 <_strtod_l+0x2d8>
 8009e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e12:	428f      	cmp	r7, r1
 8009e14:	bfa8      	it	ge
 8009e16:	460f      	movge	r7, r1
 8009e18:	f1bc 0f00 	cmp.w	ip, #0
 8009e1c:	d000      	beq.n	8009e20 <_strtod_l+0x2e0>
 8009e1e:	427f      	negs	r7, r7
 8009e20:	2e00      	cmp	r6, #0
 8009e22:	d14f      	bne.n	8009ec4 <_strtod_l+0x384>
 8009e24:	9905      	ldr	r1, [sp, #20]
 8009e26:	4301      	orrs	r1, r0
 8009e28:	f47f aec3 	bne.w	8009bb2 <_strtod_l+0x72>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f47f aedb 	bne.w	8009be8 <_strtod_l+0xa8>
 8009e32:	2a69      	cmp	r2, #105	; 0x69
 8009e34:	d029      	beq.n	8009e8a <_strtod_l+0x34a>
 8009e36:	dc26      	bgt.n	8009e86 <_strtod_l+0x346>
 8009e38:	2a49      	cmp	r2, #73	; 0x49
 8009e3a:	d026      	beq.n	8009e8a <_strtod_l+0x34a>
 8009e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8009e3e:	f47f aed3 	bne.w	8009be8 <_strtod_l+0xa8>
 8009e42:	499a      	ldr	r1, [pc, #616]	; (800a0ac <_strtod_l+0x56c>)
 8009e44:	a819      	add	r0, sp, #100	; 0x64
 8009e46:	f001 fa05 	bl	800b254 <__match>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f43f aecc 	beq.w	8009be8 <_strtod_l+0xa8>
 8009e50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b28      	cmp	r3, #40	; 0x28
 8009e56:	d12f      	bne.n	8009eb8 <_strtod_l+0x378>
 8009e58:	4995      	ldr	r1, [pc, #596]	; (800a0b0 <_strtod_l+0x570>)
 8009e5a:	aa1c      	add	r2, sp, #112	; 0x70
 8009e5c:	a819      	add	r0, sp, #100	; 0x64
 8009e5e:	f001 fa0d 	bl	800b27c <__hexnan>
 8009e62:	2805      	cmp	r0, #5
 8009e64:	d128      	bne.n	8009eb8 <_strtod_l+0x378>
 8009e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009e6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e74:	e69d      	b.n	8009bb2 <_strtod_l+0x72>
 8009e76:	210a      	movs	r1, #10
 8009e78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e7a:	fb01 2107 	mla	r1, r1, r7, r2
 8009e7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e82:	9209      	str	r2, [sp, #36]	; 0x24
 8009e84:	e7b5      	b.n	8009df2 <_strtod_l+0x2b2>
 8009e86:	2a6e      	cmp	r2, #110	; 0x6e
 8009e88:	e7d9      	b.n	8009e3e <_strtod_l+0x2fe>
 8009e8a:	498a      	ldr	r1, [pc, #552]	; (800a0b4 <_strtod_l+0x574>)
 8009e8c:	a819      	add	r0, sp, #100	; 0x64
 8009e8e:	f001 f9e1 	bl	800b254 <__match>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f43f aea8 	beq.w	8009be8 <_strtod_l+0xa8>
 8009e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e9a:	4987      	ldr	r1, [pc, #540]	; (800a0b8 <_strtod_l+0x578>)
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	a819      	add	r0, sp, #100	; 0x64
 8009ea0:	9319      	str	r3, [sp, #100]	; 0x64
 8009ea2:	f001 f9d7 	bl	800b254 <__match>
 8009ea6:	b910      	cbnz	r0, 8009eae <_strtod_l+0x36e>
 8009ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eaa:	3301      	adds	r3, #1
 8009eac:	9319      	str	r3, [sp, #100]	; 0x64
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a0bc <_strtod_l+0x57c>
 8009eb6:	e67c      	b.n	8009bb2 <_strtod_l+0x72>
 8009eb8:	4881      	ldr	r0, [pc, #516]	; (800a0c0 <_strtod_l+0x580>)
 8009eba:	f000 fee9 	bl	800ac90 <nan>
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	e676      	b.n	8009bb2 <_strtod_l+0x72>
 8009ec4:	9b08      	ldr	r3, [sp, #32]
 8009ec6:	f1bb 0f00 	cmp.w	fp, #0
 8009eca:	bf08      	it	eq
 8009ecc:	46b3      	moveq	fp, r6
 8009ece:	1afb      	subs	r3, r7, r3
 8009ed0:	2e10      	cmp	r6, #16
 8009ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ed4:	4635      	mov	r5, r6
 8009ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed8:	bfa8      	it	ge
 8009eda:	2510      	movge	r5, #16
 8009edc:	f7f6 fa82 	bl	80003e4 <__aeabi_ui2d>
 8009ee0:	2e09      	cmp	r6, #9
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	4689      	mov	r9, r1
 8009ee6:	dd13      	ble.n	8009f10 <_strtod_l+0x3d0>
 8009ee8:	4b76      	ldr	r3, [pc, #472]	; (800a0c4 <_strtod_l+0x584>)
 8009eea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009eee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	4680      	mov	r8, r0
 8009ef8:	4650      	mov	r0, sl
 8009efa:	4689      	mov	r9, r1
 8009efc:	f7f6 fa72 	bl	80003e4 <__aeabi_ui2d>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 f930 	bl	800016c <__adddf3>
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	2e0f      	cmp	r6, #15
 8009f12:	dc36      	bgt.n	8009f82 <_strtod_l+0x442>
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f43f ae4b 	beq.w	8009bb2 <_strtod_l+0x72>
 8009f1c:	dd22      	ble.n	8009f64 <_strtod_l+0x424>
 8009f1e:	2b16      	cmp	r3, #22
 8009f20:	dc09      	bgt.n	8009f36 <_strtod_l+0x3f6>
 8009f22:	4968      	ldr	r1, [pc, #416]	; (800a0c4 <_strtod_l+0x584>)
 8009f24:	4642      	mov	r2, r8
 8009f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f30:	f7f6 fad2 	bl	80004d8 <__aeabi_dmul>
 8009f34:	e7c3      	b.n	8009ebe <_strtod_l+0x37e>
 8009f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f38:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	db20      	blt.n	8009f82 <_strtod_l+0x442>
 8009f40:	4c60      	ldr	r4, [pc, #384]	; (800a0c4 <_strtod_l+0x584>)
 8009f42:	f1c6 060f 	rsb	r6, r6, #15
 8009f46:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f50:	464b      	mov	r3, r9
 8009f52:	f7f6 fac1 	bl	80004d8 <__aeabi_dmul>
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	1b9e      	subs	r6, r3, r6
 8009f5a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009f5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f62:	e7e5      	b.n	8009f30 <_strtod_l+0x3f0>
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	3316      	adds	r3, #22
 8009f68:	db0b      	blt.n	8009f82 <_strtod_l+0x442>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	1bdf      	subs	r7, r3, r7
 8009f70:	4b54      	ldr	r3, [pc, #336]	; (800a0c4 <_strtod_l+0x584>)
 8009f72:	4649      	mov	r1, r9
 8009f74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7c:	f7f6 fbd6 	bl	800072c <__aeabi_ddiv>
 8009f80:	e79d      	b.n	8009ebe <_strtod_l+0x37e>
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	1b75      	subs	r5, r6, r5
 8009f86:	441d      	add	r5, r3
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	dd70      	ble.n	800a06e <_strtod_l+0x52e>
 8009f8c:	f015 030f 	ands.w	r3, r5, #15
 8009f90:	d00a      	beq.n	8009fa8 <_strtod_l+0x468>
 8009f92:	494c      	ldr	r1, [pc, #304]	; (800a0c4 <_strtod_l+0x584>)
 8009f94:	4642      	mov	r2, r8
 8009f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	f7f6 fa9a 	bl	80004d8 <__aeabi_dmul>
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	f035 050f 	bics.w	r5, r5, #15
 8009fac:	d04d      	beq.n	800a04a <_strtod_l+0x50a>
 8009fae:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009fb2:	dd22      	ble.n	8009ffa <_strtod_l+0x4ba>
 8009fb4:	2600      	movs	r6, #0
 8009fb6:	46b3      	mov	fp, r6
 8009fb8:	960b      	str	r6, [sp, #44]	; 0x2c
 8009fba:	9608      	str	r6, [sp, #32]
 8009fbc:	2322      	movs	r3, #34	; 0x22
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a0bc <_strtod_l+0x57c>
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f43f adf1 	beq.w	8009bb2 <_strtod_l+0x72>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fd4:	f7ff f934 	bl	8009240 <_Bfree>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	9908      	ldr	r1, [sp, #32]
 8009fdc:	f7ff f930 	bl	8009240 <_Bfree>
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff f92c 	bl	8009240 <_Bfree>
 8009fe8:	4620      	mov	r0, r4
 8009fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fec:	f7ff f928 	bl	8009240 <_Bfree>
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff f924 	bl	8009240 <_Bfree>
 8009ff8:	e5db      	b.n	8009bb2 <_strtod_l+0x72>
 8009ffa:	4b33      	ldr	r3, [pc, #204]	; (800a0c8 <_strtod_l+0x588>)
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	9305      	str	r3, [sp, #20]
 800a000:	2300      	movs	r3, #0
 800a002:	4649      	mov	r1, r9
 800a004:	469a      	mov	sl, r3
 800a006:	112d      	asrs	r5, r5, #4
 800a008:	2d01      	cmp	r5, #1
 800a00a:	dc21      	bgt.n	800a050 <_strtod_l+0x510>
 800a00c:	b10b      	cbz	r3, 800a012 <_strtod_l+0x4d2>
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	492d      	ldr	r1, [pc, #180]	; (800a0c8 <_strtod_l+0x588>)
 800a014:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a018:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a01c:	4642      	mov	r2, r8
 800a01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a022:	464b      	mov	r3, r9
 800a024:	f7f6 fa58 	bl	80004d8 <__aeabi_dmul>
 800a028:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <_strtod_l+0x57c>)
 800a02a:	460a      	mov	r2, r1
 800a02c:	400b      	ands	r3, r1
 800a02e:	4927      	ldr	r1, [pc, #156]	; (800a0cc <_strtod_l+0x58c>)
 800a030:	4680      	mov	r8, r0
 800a032:	428b      	cmp	r3, r1
 800a034:	d8be      	bhi.n	8009fb4 <_strtod_l+0x474>
 800a036:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a03a:	428b      	cmp	r3, r1
 800a03c:	bf86      	itte	hi
 800a03e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a042:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a0d0 <_strtod_l+0x590>
 800a046:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a04a:	2300      	movs	r3, #0
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	e07b      	b.n	800a148 <_strtod_l+0x608>
 800a050:	07ea      	lsls	r2, r5, #31
 800a052:	d505      	bpl.n	800a060 <_strtod_l+0x520>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	2301      	movs	r3, #1
 800a060:	9a05      	ldr	r2, [sp, #20]
 800a062:	f10a 0a01 	add.w	sl, sl, #1
 800a066:	3208      	adds	r2, #8
 800a068:	106d      	asrs	r5, r5, #1
 800a06a:	9205      	str	r2, [sp, #20]
 800a06c:	e7cc      	b.n	800a008 <_strtod_l+0x4c8>
 800a06e:	d0ec      	beq.n	800a04a <_strtod_l+0x50a>
 800a070:	426d      	negs	r5, r5
 800a072:	f015 020f 	ands.w	r2, r5, #15
 800a076:	d00a      	beq.n	800a08e <_strtod_l+0x54e>
 800a078:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <_strtod_l+0x584>)
 800a07a:	4640      	mov	r0, r8
 800a07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a080:	4649      	mov	r1, r9
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fb51 	bl	800072c <__aeabi_ddiv>
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	112d      	asrs	r5, r5, #4
 800a090:	d0db      	beq.n	800a04a <_strtod_l+0x50a>
 800a092:	2d1f      	cmp	r5, #31
 800a094:	dd1e      	ble.n	800a0d4 <_strtod_l+0x594>
 800a096:	2600      	movs	r6, #0
 800a098:	46b3      	mov	fp, r6
 800a09a:	960b      	str	r6, [sp, #44]	; 0x2c
 800a09c:	9608      	str	r6, [sp, #32]
 800a09e:	2322      	movs	r3, #34	; 0x22
 800a0a0:	f04f 0800 	mov.w	r8, #0
 800a0a4:	f04f 0900 	mov.w	r9, #0
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	e78d      	b.n	8009fc8 <_strtod_l+0x488>
 800a0ac:	0800ba1f 	.word	0x0800ba1f
 800a0b0:	0800bc4c 	.word	0x0800bc4c
 800a0b4:	0800ba17 	.word	0x0800ba17
 800a0b8:	0800ba4e 	.word	0x0800ba4e
 800a0bc:	7ff00000 	.word	0x7ff00000
 800a0c0:	0800bddd 	.word	0x0800bddd
 800a0c4:	0800bb60 	.word	0x0800bb60
 800a0c8:	0800bb38 	.word	0x0800bb38
 800a0cc:	7ca00000 	.word	0x7ca00000
 800a0d0:	7fefffff 	.word	0x7fefffff
 800a0d4:	f015 0310 	ands.w	r3, r5, #16
 800a0d8:	bf18      	it	ne
 800a0da:	236a      	movne	r3, #106	; 0x6a
 800a0dc:	4640      	mov	r0, r8
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a3b0 <_strtod_l+0x870>
 800a0e8:	07ea      	lsls	r2, r5, #31
 800a0ea:	d504      	bpl.n	800a0f6 <_strtod_l+0x5b6>
 800a0ec:	e9da 2300 	ldrd	r2, r3, [sl]
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	106d      	asrs	r5, r5, #1
 800a0f8:	f10a 0a08 	add.w	sl, sl, #8
 800a0fc:	d1f4      	bne.n	800a0e8 <_strtod_l+0x5a8>
 800a0fe:	b10b      	cbz	r3, 800a104 <_strtod_l+0x5c4>
 800a100:	4680      	mov	r8, r0
 800a102:	4689      	mov	r9, r1
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	b1bb      	cbz	r3, 800a138 <_strtod_l+0x5f8>
 800a108:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a10c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a110:	2b00      	cmp	r3, #0
 800a112:	4649      	mov	r1, r9
 800a114:	dd10      	ble.n	800a138 <_strtod_l+0x5f8>
 800a116:	2b1f      	cmp	r3, #31
 800a118:	f340 8128 	ble.w	800a36c <_strtod_l+0x82c>
 800a11c:	2b34      	cmp	r3, #52	; 0x34
 800a11e:	bfd8      	it	le
 800a120:	f04f 33ff 	movle.w	r3, #4294967295
 800a124:	f04f 0800 	mov.w	r8, #0
 800a128:	bfcf      	iteee	gt
 800a12a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a12e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a132:	4093      	lslle	r3, r2
 800a134:	ea03 0901 	andle.w	r9, r3, r1
 800a138:	2200      	movs	r2, #0
 800a13a:	2300      	movs	r3, #0
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 fc32 	bl	80009a8 <__aeabi_dcmpeq>
 800a144:	2800      	cmp	r0, #0
 800a146:	d1a6      	bne.n	800a096 <_strtod_l+0x556>
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	465a      	mov	r2, fp
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4620      	mov	r0, r4
 800a150:	4633      	mov	r3, r6
 800a152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a154:	f7ff f8dc 	bl	8009310 <__s2b>
 800a158:	900b      	str	r0, [sp, #44]	; 0x2c
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f af2a 	beq.w	8009fb4 <_strtod_l+0x474>
 800a160:	2600      	movs	r6, #0
 800a162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a164:	9b08      	ldr	r3, [sp, #32]
 800a166:	2a00      	cmp	r2, #0
 800a168:	eba3 0307 	sub.w	r3, r3, r7
 800a16c:	bfa8      	it	ge
 800a16e:	2300      	movge	r3, #0
 800a170:	46b3      	mov	fp, r6
 800a172:	9312      	str	r3, [sp, #72]	; 0x48
 800a174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a178:	9316      	str	r3, [sp, #88]	; 0x58
 800a17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17c:	4620      	mov	r0, r4
 800a17e:	6859      	ldr	r1, [r3, #4]
 800a180:	f7ff f81e 	bl	80091c0 <_Balloc>
 800a184:	9008      	str	r0, [sp, #32]
 800a186:	2800      	cmp	r0, #0
 800a188:	f43f af18 	beq.w	8009fbc <_strtod_l+0x47c>
 800a18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18e:	300c      	adds	r0, #12
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	f103 010c 	add.w	r1, r3, #12
 800a196:	3202      	adds	r2, #2
 800a198:	0092      	lsls	r2, r2, #2
 800a19a:	f7fe f948 	bl	800842e <memcpy>
 800a19e:	ab1c      	add	r3, sp, #112	; 0x70
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	ab1b      	add	r3, sp, #108	; 0x6c
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a1b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a1b4:	f7ff fbd8 	bl	8009968 <__d2b>
 800a1b8:	901a      	str	r0, [sp, #104]	; 0x68
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f aefe 	beq.w	8009fbc <_strtod_l+0x47c>
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff f93c 	bl	8009440 <__i2b>
 800a1c8:	4683      	mov	fp, r0
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f43f aef6 	beq.w	8009fbc <_strtod_l+0x47c>
 800a1d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a1d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1d4:	2f00      	cmp	r7, #0
 800a1d6:	bfab      	itete	ge
 800a1d8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a1da:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1dc:	eb07 0a03 	addge.w	sl, r7, r3
 800a1e0:	1bdd      	sublt	r5, r3, r7
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	bfa8      	it	ge
 800a1e6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a1e8:	eba7 0703 	sub.w	r7, r7, r3
 800a1ec:	4417      	add	r7, r2
 800a1ee:	4b71      	ldr	r3, [pc, #452]	; (800a3b4 <_strtod_l+0x874>)
 800a1f0:	f107 37ff 	add.w	r7, r7, #4294967295
 800a1f4:	bfb8      	it	lt
 800a1f6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a1fa:	429f      	cmp	r7, r3
 800a1fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a200:	f280 80c7 	bge.w	800a392 <_strtod_l+0x852>
 800a204:	1bdb      	subs	r3, r3, r7
 800a206:	2b1f      	cmp	r3, #31
 800a208:	f04f 0101 	mov.w	r1, #1
 800a20c:	eba2 0203 	sub.w	r2, r2, r3
 800a210:	f300 80b3 	bgt.w	800a37a <_strtod_l+0x83a>
 800a214:	fa01 f303 	lsl.w	r3, r1, r3
 800a218:	9313      	str	r3, [sp, #76]	; 0x4c
 800a21a:	2300      	movs	r3, #0
 800a21c:	9310      	str	r3, [sp, #64]	; 0x40
 800a21e:	eb0a 0702 	add.w	r7, sl, r2
 800a222:	9b05      	ldr	r3, [sp, #20]
 800a224:	45ba      	cmp	sl, r7
 800a226:	4415      	add	r5, r2
 800a228:	441d      	add	r5, r3
 800a22a:	4653      	mov	r3, sl
 800a22c:	bfa8      	it	ge
 800a22e:	463b      	movge	r3, r7
 800a230:	42ab      	cmp	r3, r5
 800a232:	bfa8      	it	ge
 800a234:	462b      	movge	r3, r5
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfc2      	ittt	gt
 800a23a:	1aff      	subgt	r7, r7, r3
 800a23c:	1aed      	subgt	r5, r5, r3
 800a23e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a242:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd17      	ble.n	800a278 <_strtod_l+0x738>
 800a248:	4659      	mov	r1, fp
 800a24a:	461a      	mov	r2, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7ff f9b5 	bl	80095bc <__pow5mult>
 800a252:	4683      	mov	fp, r0
 800a254:	2800      	cmp	r0, #0
 800a256:	f43f aeb1 	beq.w	8009fbc <_strtod_l+0x47c>
 800a25a:	4601      	mov	r1, r0
 800a25c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff f904 	bl	800946c <__multiply>
 800a264:	900a      	str	r0, [sp, #40]	; 0x28
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aea8 	beq.w	8009fbc <_strtod_l+0x47c>
 800a26c:	4620      	mov	r0, r4
 800a26e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a270:	f7fe ffe6 	bl	8009240 <_Bfree>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	931a      	str	r3, [sp, #104]	; 0x68
 800a278:	2f00      	cmp	r7, #0
 800a27a:	f300 808f 	bgt.w	800a39c <_strtod_l+0x85c>
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd08      	ble.n	800a296 <_strtod_l+0x756>
 800a284:	4620      	mov	r0, r4
 800a286:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a288:	9908      	ldr	r1, [sp, #32]
 800a28a:	f7ff f997 	bl	80095bc <__pow5mult>
 800a28e:	9008      	str	r0, [sp, #32]
 800a290:	2800      	cmp	r0, #0
 800a292:	f43f ae93 	beq.w	8009fbc <_strtod_l+0x47c>
 800a296:	2d00      	cmp	r5, #0
 800a298:	dd08      	ble.n	800a2ac <_strtod_l+0x76c>
 800a29a:	462a      	mov	r2, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	9908      	ldr	r1, [sp, #32]
 800a2a0:	f7ff f9e6 	bl	8009670 <__lshift>
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f ae88 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2ac:	f1ba 0f00 	cmp.w	sl, #0
 800a2b0:	dd08      	ble.n	800a2c4 <_strtod_l+0x784>
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7ff f9da 	bl	8009670 <__lshift>
 800a2bc:	4683      	mov	fp, r0
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f ae7c 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	9a08      	ldr	r2, [sp, #32]
 800a2c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2ca:	f7ff fa59 	bl	8009780 <__mdiff>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f43f ae73 	beq.w	8009fbc <_strtod_l+0x47c>
 800a2d6:	2500      	movs	r5, #0
 800a2d8:	68c3      	ldr	r3, [r0, #12]
 800a2da:	4659      	mov	r1, fp
 800a2dc:	60c5      	str	r5, [r0, #12]
 800a2de:	930a      	str	r3, [sp, #40]	; 0x28
 800a2e0:	f7ff fa32 	bl	8009748 <__mcmp>
 800a2e4:	42a8      	cmp	r0, r5
 800a2e6:	da6b      	bge.n	800a3c0 <_strtod_l+0x880>
 800a2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ea:	ea53 0308 	orrs.w	r3, r3, r8
 800a2ee:	f040 808f 	bne.w	800a410 <_strtod_l+0x8d0>
 800a2f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 808a 	bne.w	800a410 <_strtod_l+0x8d0>
 800a2fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a300:	0d1b      	lsrs	r3, r3, #20
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a308:	f240 8082 	bls.w	800a410 <_strtod_l+0x8d0>
 800a30c:	6973      	ldr	r3, [r6, #20]
 800a30e:	b913      	cbnz	r3, 800a316 <_strtod_l+0x7d6>
 800a310:	6933      	ldr	r3, [r6, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	dd7c      	ble.n	800a410 <_strtod_l+0x8d0>
 800a316:	4631      	mov	r1, r6
 800a318:	2201      	movs	r2, #1
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff f9a8 	bl	8009670 <__lshift>
 800a320:	4659      	mov	r1, fp
 800a322:	4606      	mov	r6, r0
 800a324:	f7ff fa10 	bl	8009748 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dd71      	ble.n	800a410 <_strtod_l+0x8d0>
 800a32c:	9905      	ldr	r1, [sp, #20]
 800a32e:	464b      	mov	r3, r9
 800a330:	4a21      	ldr	r2, [pc, #132]	; (800a3b8 <_strtod_l+0x878>)
 800a332:	2900      	cmp	r1, #0
 800a334:	f000 808d 	beq.w	800a452 <_strtod_l+0x912>
 800a338:	ea02 0109 	and.w	r1, r2, r9
 800a33c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a340:	f300 8087 	bgt.w	800a452 <_strtod_l+0x912>
 800a344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a348:	f77f aea9 	ble.w	800a09e <_strtod_l+0x55e>
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <_strtod_l+0x87c>)
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f8c0 	bl	80004d8 <__aeabi_dmul>
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <_strtod_l+0x878>)
 800a35a:	4680      	mov	r8, r0
 800a35c:	400b      	ands	r3, r1
 800a35e:	4689      	mov	r9, r1
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f ae35 	bne.w	8009fd0 <_strtod_l+0x490>
 800a366:	2322      	movs	r3, #34	; 0x22
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	e631      	b.n	8009fd0 <_strtod_l+0x490>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	ea03 0808 	and.w	r8, r3, r8
 800a378:	e6de      	b.n	800a138 <_strtod_l+0x5f8>
 800a37a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a37e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a382:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a386:	37e2      	adds	r7, #226	; 0xe2
 800a388:	fa01 f307 	lsl.w	r3, r1, r7
 800a38c:	9310      	str	r3, [sp, #64]	; 0x40
 800a38e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a390:	e745      	b.n	800a21e <_strtod_l+0x6de>
 800a392:	2300      	movs	r3, #0
 800a394:	9310      	str	r3, [sp, #64]	; 0x40
 800a396:	2301      	movs	r3, #1
 800a398:	9313      	str	r3, [sp, #76]	; 0x4c
 800a39a:	e740      	b.n	800a21e <_strtod_l+0x6de>
 800a39c:	463a      	mov	r2, r7
 800a39e:	4620      	mov	r0, r4
 800a3a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3a2:	f7ff f965 	bl	8009670 <__lshift>
 800a3a6:	901a      	str	r0, [sp, #104]	; 0x68
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f47f af68 	bne.w	800a27e <_strtod_l+0x73e>
 800a3ae:	e605      	b.n	8009fbc <_strtod_l+0x47c>
 800a3b0:	0800bc60 	.word	0x0800bc60
 800a3b4:	fffffc02 	.word	0xfffffc02
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	39500000 	.word	0x39500000
 800a3c0:	46ca      	mov	sl, r9
 800a3c2:	d165      	bne.n	800a490 <_strtod_l+0x950>
 800a3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ca:	b352      	cbz	r2, 800a422 <_strtod_l+0x8e2>
 800a3cc:	4a9e      	ldr	r2, [pc, #632]	; (800a648 <_strtod_l+0xb08>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d12a      	bne.n	800a428 <_strtod_l+0x8e8>
 800a3d2:	9b05      	ldr	r3, [sp, #20]
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	b1fb      	cbz	r3, 800a418 <_strtod_l+0x8d8>
 800a3d8:	4b9c      	ldr	r3, [pc, #624]	; (800a64c <_strtod_l+0xb0c>)
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	ea09 0303 	and.w	r3, r9, r3
 800a3e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3e6:	d81a      	bhi.n	800a41e <_strtod_l+0x8de>
 800a3e8:	0d1b      	lsrs	r3, r3, #20
 800a3ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d118      	bne.n	800a428 <_strtod_l+0x8e8>
 800a3f6:	4b96      	ldr	r3, [pc, #600]	; (800a650 <_strtod_l+0xb10>)
 800a3f8:	459a      	cmp	sl, r3
 800a3fa:	d102      	bne.n	800a402 <_strtod_l+0x8c2>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	f43f addd 	beq.w	8009fbc <_strtod_l+0x47c>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	4b91      	ldr	r3, [pc, #580]	; (800a64c <_strtod_l+0xb0c>)
 800a408:	ea0a 0303 	and.w	r3, sl, r3
 800a40c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d19a      	bne.n	800a34c <_strtod_l+0x80c>
 800a416:	e5db      	b.n	8009fd0 <_strtod_l+0x490>
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e7e9      	b.n	800a3f2 <_strtod_l+0x8b2>
 800a41e:	4613      	mov	r3, r2
 800a420:	e7e7      	b.n	800a3f2 <_strtod_l+0x8b2>
 800a422:	ea53 0308 	orrs.w	r3, r3, r8
 800a426:	d081      	beq.n	800a32c <_strtod_l+0x7ec>
 800a428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a42a:	b1e3      	cbz	r3, 800a466 <_strtod_l+0x926>
 800a42c:	ea13 0f0a 	tst.w	r3, sl
 800a430:	d0ee      	beq.n	800a410 <_strtod_l+0x8d0>
 800a432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	9a05      	ldr	r2, [sp, #20]
 800a43a:	b1c3      	cbz	r3, 800a46e <_strtod_l+0x92e>
 800a43c:	f7ff fb5c 	bl	8009af8 <sulp>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a446:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a448:	f7f5 fe90 	bl	800016c <__adddf3>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	e7de      	b.n	800a410 <_strtod_l+0x8d0>
 800a452:	4013      	ands	r3, r2
 800a454:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a458:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a45c:	f04f 38ff 	mov.w	r8, #4294967295
 800a460:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a464:	e7d4      	b.n	800a410 <_strtod_l+0x8d0>
 800a466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a468:	ea13 0f08 	tst.w	r3, r8
 800a46c:	e7e0      	b.n	800a430 <_strtod_l+0x8f0>
 800a46e:	f7ff fb43 	bl	8009af8 <sulp>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a478:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a47a:	f7f5 fe75 	bl	8000168 <__aeabi_dsub>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	4680      	mov	r8, r0
 800a484:	4689      	mov	r9, r1
 800a486:	f7f6 fa8f 	bl	80009a8 <__aeabi_dcmpeq>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d0c0      	beq.n	800a410 <_strtod_l+0x8d0>
 800a48e:	e606      	b.n	800a09e <_strtod_l+0x55e>
 800a490:	4659      	mov	r1, fp
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff fabe 	bl	8009a14 <__ratio>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4a6:	f7f6 fa93 	bl	80009d0 <__aeabi_dcmple>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d06f      	beq.n	800a58e <_strtod_l+0xa4e>
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d17c      	bne.n	800a5ae <_strtod_l+0xa6e>
 800a4b4:	f1b8 0f00 	cmp.w	r8, #0
 800a4b8:	d159      	bne.n	800a56e <_strtod_l+0xa2e>
 800a4ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d17b      	bne.n	800a5ba <_strtod_l+0xa7a>
 800a4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4b62      	ldr	r3, [pc, #392]	; (800a654 <_strtod_l+0xb14>)
 800a4ca:	f7f6 fa77 	bl	80009bc <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d15a      	bne.n	800a588 <_strtod_l+0xa48>
 800a4d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4b5f      	ldr	r3, [pc, #380]	; (800a658 <_strtod_l+0xb18>)
 800a4da:	f7f5 fffd 	bl	80004d8 <__aeabi_dmul>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a4e6:	9506      	str	r5, [sp, #24]
 800a4e8:	9307      	str	r3, [sp, #28]
 800a4ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4f2:	4b56      	ldr	r3, [pc, #344]	; (800a64c <_strtod_l+0xb0c>)
 800a4f4:	4a55      	ldr	r2, [pc, #340]	; (800a64c <_strtod_l+0xb0c>)
 800a4f6:	ea0a 0303 	and.w	r3, sl, r3
 800a4fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4fc:	4b57      	ldr	r3, [pc, #348]	; (800a65c <_strtod_l+0xb1c>)
 800a4fe:	ea0a 0202 	and.w	r2, sl, r2
 800a502:	429a      	cmp	r2, r3
 800a504:	f040 80b0 	bne.w	800a668 <_strtod_l+0xb28>
 800a508:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7ff f9c2 	bl	8009898 <__ulp>
 800a514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a518:	f7f5 ffde 	bl	80004d8 <__aeabi_dmul>
 800a51c:	4642      	mov	r2, r8
 800a51e:	464b      	mov	r3, r9
 800a520:	f7f5 fe24 	bl	800016c <__adddf3>
 800a524:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a64c <_strtod_l+0xb0c>
 800a528:	4a4d      	ldr	r2, [pc, #308]	; (800a660 <_strtod_l+0xb20>)
 800a52a:	ea01 0a0a 	and.w	sl, r1, sl
 800a52e:	4592      	cmp	sl, r2
 800a530:	4680      	mov	r8, r0
 800a532:	d948      	bls.n	800a5c6 <_strtod_l+0xa86>
 800a534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a536:	4b46      	ldr	r3, [pc, #280]	; (800a650 <_strtod_l+0xb10>)
 800a538:	429a      	cmp	r2, r3
 800a53a:	d103      	bne.n	800a544 <_strtod_l+0xa04>
 800a53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53e:	3301      	adds	r3, #1
 800a540:	f43f ad3c 	beq.w	8009fbc <_strtod_l+0x47c>
 800a544:	f04f 38ff 	mov.w	r8, #4294967295
 800a548:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a650 <_strtod_l+0xb10>
 800a54c:	4620      	mov	r0, r4
 800a54e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a550:	f7fe fe76 	bl	8009240 <_Bfree>
 800a554:	4620      	mov	r0, r4
 800a556:	9908      	ldr	r1, [sp, #32]
 800a558:	f7fe fe72 	bl	8009240 <_Bfree>
 800a55c:	4659      	mov	r1, fp
 800a55e:	4620      	mov	r0, r4
 800a560:	f7fe fe6e 	bl	8009240 <_Bfree>
 800a564:	4631      	mov	r1, r6
 800a566:	4620      	mov	r0, r4
 800a568:	f7fe fe6a 	bl	8009240 <_Bfree>
 800a56c:	e605      	b.n	800a17a <_strtod_l+0x63a>
 800a56e:	f1b8 0f01 	cmp.w	r8, #1
 800a572:	d103      	bne.n	800a57c <_strtod_l+0xa3c>
 800a574:	f1b9 0f00 	cmp.w	r9, #0
 800a578:	f43f ad91 	beq.w	800a09e <_strtod_l+0x55e>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b39      	ldr	r3, [pc, #228]	; (800a664 <_strtod_l+0xb24>)
 800a580:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a582:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a586:	e016      	b.n	800a5b6 <_strtod_l+0xa76>
 800a588:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a58a:	4f33      	ldr	r7, [pc, #204]	; (800a658 <_strtod_l+0xb18>)
 800a58c:	e7a9      	b.n	800a4e2 <_strtod_l+0x9a2>
 800a58e:	4b32      	ldr	r3, [pc, #200]	; (800a658 <_strtod_l+0xb18>)
 800a590:	2200      	movs	r2, #0
 800a592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a596:	f7f5 ff9f 	bl	80004d8 <__aeabi_dmul>
 800a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59c:	4605      	mov	r5, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d09e      	beq.n	800a4e2 <_strtod_l+0x9a2>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ac:	e79d      	b.n	800a4ea <_strtod_l+0x9aa>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <_strtod_l+0xb14>)
 800a5b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5b6:	4f27      	ldr	r7, [pc, #156]	; (800a654 <_strtod_l+0xb14>)
 800a5b8:	e797      	b.n	800a4ea <_strtod_l+0x9aa>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4b29      	ldr	r3, [pc, #164]	; (800a664 <_strtod_l+0xb24>)
 800a5be:	4645      	mov	r5, r8
 800a5c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5c4:	e7f7      	b.n	800a5b6 <_strtod_l+0xa76>
 800a5c6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	46ca      	mov	sl, r9
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1bc      	bne.n	800a54c <_strtod_l+0xa0c>
 800a5d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d1b5      	bne.n	800a54c <_strtod_l+0xa0c>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fdb4 	bl	8001150 <__aeabi_d2lz>
 800a5e8:	f7f5 ff48 	bl	800047c <__aeabi_l2d>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f5 fdb8 	bl	8000168 <__aeabi_dsub>
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a600:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a606:	ea4a 0a08 	orr.w	sl, sl, r8
 800a60a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a60e:	d06c      	beq.n	800a6ea <_strtod_l+0xbaa>
 800a610:	a309      	add	r3, pc, #36	; (adr r3, 800a638 <_strtod_l+0xaf8>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f6 f9d1 	bl	80009bc <__aeabi_dcmplt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f47f acd8 	bne.w	8009fd0 <_strtod_l+0x490>
 800a620:	a307      	add	r3, pc, #28	; (adr r3, 800a640 <_strtod_l+0xb00>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a62a:	f7f6 f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d08c      	beq.n	800a54c <_strtod_l+0xa0c>
 800a632:	e4cd      	b.n	8009fd0 <_strtod_l+0x490>
 800a634:	f3af 8000 	nop.w
 800a638:	94a03595 	.word	0x94a03595
 800a63c:	3fdfffff 	.word	0x3fdfffff
 800a640:	35afe535 	.word	0x35afe535
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	000fffff 	.word	0x000fffff
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	7fefffff 	.word	0x7fefffff
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	7fe00000 	.word	0x7fe00000
 800a660:	7c9fffff 	.word	0x7c9fffff
 800a664:	bff00000 	.word	0xbff00000
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	b333      	cbz	r3, 800a6ba <_strtod_l+0xb7a>
 800a66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a66e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a672:	d822      	bhi.n	800a6ba <_strtod_l+0xb7a>
 800a674:	a328      	add	r3, pc, #160	; (adr r3, 800a718 <_strtod_l+0xbd8>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	4628      	mov	r0, r5
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f6 f9a7 	bl	80009d0 <__aeabi_dcmple>
 800a682:	b1a0      	cbz	r0, 800a6ae <_strtod_l+0xb6e>
 800a684:	4639      	mov	r1, r7
 800a686:	4628      	mov	r0, r5
 800a688:	f7f6 f9fe 	bl	8000a88 <__aeabi_d2uiz>
 800a68c:	2801      	cmp	r0, #1
 800a68e:	bf38      	it	cc
 800a690:	2001      	movcc	r0, #1
 800a692:	f7f5 fea7 	bl	80003e4 <__aeabi_ui2d>
 800a696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a698:	4605      	mov	r5, r0
 800a69a:	460f      	mov	r7, r1
 800a69c:	bb03      	cbnz	r3, 800a6e0 <_strtod_l+0xba0>
 800a69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6a2:	9014      	str	r0, [sp, #80]	; 0x50
 800a6a4:	9315      	str	r3, [sp, #84]	; 0x54
 800a6a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6b2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	9311      	str	r3, [sp, #68]	; 0x44
 800a6ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6be:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a6c2:	f7ff f8e9 	bl	8009898 <__ulp>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d6:	f7f5 fd49 	bl	800016c <__adddf3>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	4689      	mov	r9, r1
 800a6de:	e774      	b.n	800a5ca <_strtod_l+0xa8a>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a6e8:	e7dd      	b.n	800a6a6 <_strtod_l+0xb66>
 800a6ea:	a30d      	add	r3, pc, #52	; (adr r3, 800a720 <_strtod_l+0xbe0>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f7f6 f964 	bl	80009bc <__aeabi_dcmplt>
 800a6f4:	e79b      	b.n	800a62e <_strtod_l+0xaee>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	f7ff ba5b 	b.w	8009bba <_strtod_l+0x7a>
 800a704:	2a65      	cmp	r2, #101	; 0x65
 800a706:	f43f ab52 	beq.w	8009dae <_strtod_l+0x26e>
 800a70a:	2a45      	cmp	r2, #69	; 0x45
 800a70c:	f43f ab4f 	beq.w	8009dae <_strtod_l+0x26e>
 800a710:	2301      	movs	r3, #1
 800a712:	f7ff bb87 	b.w	8009e24 <_strtod_l+0x2e4>
 800a716:	bf00      	nop
 800a718:	ffc00000 	.word	0xffc00000
 800a71c:	41dfffff 	.word	0x41dfffff
 800a720:	94a03595 	.word	0x94a03595
 800a724:	3fcfffff 	.word	0x3fcfffff

0800a728 <_strtod_r>:
 800a728:	4b01      	ldr	r3, [pc, #4]	; (800a730 <_strtod_r+0x8>)
 800a72a:	f7ff ba09 	b.w	8009b40 <_strtod_l>
 800a72e:	bf00      	nop
 800a730:	20000068 	.word	0x20000068

0800a734 <_strtol_l.constprop.0>:
 800a734:	2b01      	cmp	r3, #1
 800a736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73a:	4686      	mov	lr, r0
 800a73c:	4690      	mov	r8, r2
 800a73e:	d001      	beq.n	800a744 <_strtol_l.constprop.0+0x10>
 800a740:	2b24      	cmp	r3, #36	; 0x24
 800a742:	d906      	bls.n	800a752 <_strtol_l.constprop.0+0x1e>
 800a744:	f7fd fe38 	bl	80083b8 <__errno>
 800a748:	2316      	movs	r3, #22
 800a74a:	6003      	str	r3, [r0, #0]
 800a74c:	2000      	movs	r0, #0
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	460d      	mov	r5, r1
 800a754:	4835      	ldr	r0, [pc, #212]	; (800a82c <_strtol_l.constprop.0+0xf8>)
 800a756:	462a      	mov	r2, r5
 800a758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a75c:	5d06      	ldrb	r6, [r0, r4]
 800a75e:	f016 0608 	ands.w	r6, r6, #8
 800a762:	d1f8      	bne.n	800a756 <_strtol_l.constprop.0+0x22>
 800a764:	2c2d      	cmp	r4, #45	; 0x2d
 800a766:	d12e      	bne.n	800a7c6 <_strtol_l.constprop.0+0x92>
 800a768:	2601      	movs	r6, #1
 800a76a:	782c      	ldrb	r4, [r5, #0]
 800a76c:	1c95      	adds	r5, r2, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d057      	beq.n	800a822 <_strtol_l.constprop.0+0xee>
 800a772:	2b10      	cmp	r3, #16
 800a774:	d109      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a776:	2c30      	cmp	r4, #48	; 0x30
 800a778:	d107      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a77a:	782a      	ldrb	r2, [r5, #0]
 800a77c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a780:	2a58      	cmp	r2, #88	; 0x58
 800a782:	d149      	bne.n	800a818 <_strtol_l.constprop.0+0xe4>
 800a784:	2310      	movs	r3, #16
 800a786:	786c      	ldrb	r4, [r5, #1]
 800a788:	3502      	adds	r5, #2
 800a78a:	2200      	movs	r2, #0
 800a78c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a790:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a794:	fbbc f9f3 	udiv	r9, ip, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a79e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a7a2:	2f09      	cmp	r7, #9
 800a7a4:	d814      	bhi.n	800a7d0 <_strtol_l.constprop.0+0x9c>
 800a7a6:	463c      	mov	r4, r7
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	dd20      	ble.n	800a7ee <_strtol_l.constprop.0+0xba>
 800a7ac:	1c57      	adds	r7, r2, #1
 800a7ae:	d007      	beq.n	800a7c0 <_strtol_l.constprop.0+0x8c>
 800a7b0:	4581      	cmp	r9, r0
 800a7b2:	d319      	bcc.n	800a7e8 <_strtol_l.constprop.0+0xb4>
 800a7b4:	d101      	bne.n	800a7ba <_strtol_l.constprop.0+0x86>
 800a7b6:	45a2      	cmp	sl, r4
 800a7b8:	db16      	blt.n	800a7e8 <_strtol_l.constprop.0+0xb4>
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	fb00 4003 	mla	r0, r0, r3, r4
 800a7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7c4:	e7eb      	b.n	800a79e <_strtol_l.constprop.0+0x6a>
 800a7c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a7c8:	bf04      	itt	eq
 800a7ca:	782c      	ldrbeq	r4, [r5, #0]
 800a7cc:	1c95      	addeq	r5, r2, #2
 800a7ce:	e7ce      	b.n	800a76e <_strtol_l.constprop.0+0x3a>
 800a7d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7d4:	2f19      	cmp	r7, #25
 800a7d6:	d801      	bhi.n	800a7dc <_strtol_l.constprop.0+0xa8>
 800a7d8:	3c37      	subs	r4, #55	; 0x37
 800a7da:	e7e5      	b.n	800a7a8 <_strtol_l.constprop.0+0x74>
 800a7dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7e0:	2f19      	cmp	r7, #25
 800a7e2:	d804      	bhi.n	800a7ee <_strtol_l.constprop.0+0xba>
 800a7e4:	3c57      	subs	r4, #87	; 0x57
 800a7e6:	e7df      	b.n	800a7a8 <_strtol_l.constprop.0+0x74>
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	e7e8      	b.n	800a7c0 <_strtol_l.constprop.0+0x8c>
 800a7ee:	1c53      	adds	r3, r2, #1
 800a7f0:	d108      	bne.n	800a804 <_strtol_l.constprop.0+0xd0>
 800a7f2:	2322      	movs	r3, #34	; 0x22
 800a7f4:	4660      	mov	r0, ip
 800a7f6:	f8ce 3000 	str.w	r3, [lr]
 800a7fa:	f1b8 0f00 	cmp.w	r8, #0
 800a7fe:	d0a6      	beq.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a800:	1e69      	subs	r1, r5, #1
 800a802:	e006      	b.n	800a812 <_strtol_l.constprop.0+0xde>
 800a804:	b106      	cbz	r6, 800a808 <_strtol_l.constprop.0+0xd4>
 800a806:	4240      	negs	r0, r0
 800a808:	f1b8 0f00 	cmp.w	r8, #0
 800a80c:	d09f      	beq.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d1f6      	bne.n	800a800 <_strtol_l.constprop.0+0xcc>
 800a812:	f8c8 1000 	str.w	r1, [r8]
 800a816:	e79a      	b.n	800a74e <_strtol_l.constprop.0+0x1a>
 800a818:	2430      	movs	r4, #48	; 0x30
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1b5      	bne.n	800a78a <_strtol_l.constprop.0+0x56>
 800a81e:	2308      	movs	r3, #8
 800a820:	e7b3      	b.n	800a78a <_strtol_l.constprop.0+0x56>
 800a822:	2c30      	cmp	r4, #48	; 0x30
 800a824:	d0a9      	beq.n	800a77a <_strtol_l.constprop.0+0x46>
 800a826:	230a      	movs	r3, #10
 800a828:	e7af      	b.n	800a78a <_strtol_l.constprop.0+0x56>
 800a82a:	bf00      	nop
 800a82c:	0800bc89 	.word	0x0800bc89

0800a830 <_strtol_r>:
 800a830:	f7ff bf80 	b.w	800a734 <_strtol_l.constprop.0>

0800a834 <__ssputs_r>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	461f      	mov	r7, r3
 800a83a:	688e      	ldr	r6, [r1, #8]
 800a83c:	4682      	mov	sl, r0
 800a83e:	42be      	cmp	r6, r7
 800a840:	460c      	mov	r4, r1
 800a842:	4690      	mov	r8, r2
 800a844:	680b      	ldr	r3, [r1, #0]
 800a846:	d82c      	bhi.n	800a8a2 <__ssputs_r+0x6e>
 800a848:	898a      	ldrh	r2, [r1, #12]
 800a84a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a84e:	d026      	beq.n	800a89e <__ssputs_r+0x6a>
 800a850:	6965      	ldr	r5, [r4, #20]
 800a852:	6909      	ldr	r1, [r1, #16]
 800a854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a858:	eba3 0901 	sub.w	r9, r3, r1
 800a85c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a860:	1c7b      	adds	r3, r7, #1
 800a862:	444b      	add	r3, r9
 800a864:	106d      	asrs	r5, r5, #1
 800a866:	429d      	cmp	r5, r3
 800a868:	bf38      	it	cc
 800a86a:	461d      	movcc	r5, r3
 800a86c:	0553      	lsls	r3, r2, #21
 800a86e:	d527      	bpl.n	800a8c0 <__ssputs_r+0x8c>
 800a870:	4629      	mov	r1, r5
 800a872:	f7fc fd21 	bl	80072b8 <_malloc_r>
 800a876:	4606      	mov	r6, r0
 800a878:	b360      	cbz	r0, 800a8d4 <__ssputs_r+0xa0>
 800a87a:	464a      	mov	r2, r9
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	f7fd fdd6 	bl	800842e <memcpy>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	6126      	str	r6, [r4, #16]
 800a890:	444e      	add	r6, r9
 800a892:	6026      	str	r6, [r4, #0]
 800a894:	463e      	mov	r6, r7
 800a896:	6165      	str	r5, [r4, #20]
 800a898:	eba5 0509 	sub.w	r5, r5, r9
 800a89c:	60a5      	str	r5, [r4, #8]
 800a89e:	42be      	cmp	r6, r7
 800a8a0:	d900      	bls.n	800a8a4 <__ssputs_r+0x70>
 800a8a2:	463e      	mov	r6, r7
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	f000 f9c5 	bl	800ac38 <memmove>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	1b9b      	subs	r3, r3, r6
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4433      	add	r3, r6
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	f000 fd88 	bl	800b3d6 <_realloc_r>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1e0      	bne.n	800a88e <__ssputs_r+0x5a>
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	6921      	ldr	r1, [r4, #16]
 800a8d0:	f7fe fc2e 	bl	8009130 <_free_r>
 800a8d4:	230c      	movs	r3, #12
 800a8d6:	f8ca 3000 	str.w	r3, [sl]
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	e7e9      	b.n	800a8bc <__ssputs_r+0x88>

0800a8e8 <_svfiprintf_r>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	4698      	mov	r8, r3
 800a8ee:	898b      	ldrh	r3, [r1, #12]
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	b09d      	sub	sp, #116	; 0x74
 800a8fa:	d50e      	bpl.n	800a91a <_svfiprintf_r+0x32>
 800a8fc:	690b      	ldr	r3, [r1, #16]
 800a8fe:	b963      	cbnz	r3, 800a91a <_svfiprintf_r+0x32>
 800a900:	2140      	movs	r1, #64	; 0x40
 800a902:	f7fc fcd9 	bl	80072b8 <_malloc_r>
 800a906:	6028      	str	r0, [r5, #0]
 800a908:	6128      	str	r0, [r5, #16]
 800a90a:	b920      	cbnz	r0, 800a916 <_svfiprintf_r+0x2e>
 800a90c:	230c      	movs	r3, #12
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e0d0      	b.n	800aab8 <_svfiprintf_r+0x1d0>
 800a916:	2340      	movs	r3, #64	; 0x40
 800a918:	616b      	str	r3, [r5, #20]
 800a91a:	2300      	movs	r3, #0
 800a91c:	9309      	str	r3, [sp, #36]	; 0x24
 800a91e:	2320      	movs	r3, #32
 800a920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a924:	2330      	movs	r3, #48	; 0x30
 800a926:	f04f 0901 	mov.w	r9, #1
 800a92a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aad0 <_svfiprintf_r+0x1e8>
 800a932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a936:	4623      	mov	r3, r4
 800a938:	469a      	mov	sl, r3
 800a93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93e:	b10a      	cbz	r2, 800a944 <_svfiprintf_r+0x5c>
 800a940:	2a25      	cmp	r2, #37	; 0x25
 800a942:	d1f9      	bne.n	800a938 <_svfiprintf_r+0x50>
 800a944:	ebba 0b04 	subs.w	fp, sl, r4
 800a948:	d00b      	beq.n	800a962 <_svfiprintf_r+0x7a>
 800a94a:	465b      	mov	r3, fp
 800a94c:	4622      	mov	r2, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff ff6f 	bl	800a834 <__ssputs_r>
 800a956:	3001      	adds	r0, #1
 800a958:	f000 80a9 	beq.w	800aaae <_svfiprintf_r+0x1c6>
 800a95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95e:	445a      	add	r2, fp
 800a960:	9209      	str	r2, [sp, #36]	; 0x24
 800a962:	f89a 3000 	ldrb.w	r3, [sl]
 800a966:	2b00      	cmp	r3, #0
 800a968:	f000 80a1 	beq.w	800aaae <_svfiprintf_r+0x1c6>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a976:	f10a 0a01 	add.w	sl, sl, #1
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	9307      	str	r3, [sp, #28]
 800a97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a982:	931a      	str	r3, [sp, #104]	; 0x68
 800a984:	4654      	mov	r4, sl
 800a986:	2205      	movs	r2, #5
 800a988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98c:	4850      	ldr	r0, [pc, #320]	; (800aad0 <_svfiprintf_r+0x1e8>)
 800a98e:	f7fd fd40 	bl	8008412 <memchr>
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	b9d8      	cbnz	r0, 800a9ce <_svfiprintf_r+0xe6>
 800a996:	06d0      	lsls	r0, r2, #27
 800a998:	bf44      	itt	mi
 800a99a:	2320      	movmi	r3, #32
 800a99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a0:	0711      	lsls	r1, r2, #28
 800a9a2:	bf44      	itt	mi
 800a9a4:	232b      	movmi	r3, #43	; 0x2b
 800a9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b0:	d015      	beq.n	800a9de <_svfiprintf_r+0xf6>
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f04f 0c0a 	mov.w	ip, #10
 800a9ba:	9a07      	ldr	r2, [sp, #28]
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c2:	3b30      	subs	r3, #48	; 0x30
 800a9c4:	2b09      	cmp	r3, #9
 800a9c6:	d94d      	bls.n	800aa64 <_svfiprintf_r+0x17c>
 800a9c8:	b1b0      	cbz	r0, 800a9f8 <_svfiprintf_r+0x110>
 800a9ca:	9207      	str	r2, [sp, #28]
 800a9cc:	e014      	b.n	800a9f8 <_svfiprintf_r+0x110>
 800a9ce:	eba0 0308 	sub.w	r3, r0, r8
 800a9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	46a2      	mov	sl, r4
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	e7d2      	b.n	800a984 <_svfiprintf_r+0x9c>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9103      	str	r1, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfbb      	ittet	lt
 800a9ea:	425b      	neglt	r3, r3
 800a9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f0:	9307      	strge	r3, [sp, #28]
 800a9f2:	9307      	strlt	r3, [sp, #28]
 800a9f4:	bfb8      	it	lt
 800a9f6:	9204      	strlt	r2, [sp, #16]
 800a9f8:	7823      	ldrb	r3, [r4, #0]
 800a9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fc:	d10c      	bne.n	800aa18 <_svfiprintf_r+0x130>
 800a9fe:	7863      	ldrb	r3, [r4, #1]
 800aa00:	2b2a      	cmp	r3, #42	; 0x2a
 800aa02:	d134      	bne.n	800aa6e <_svfiprintf_r+0x186>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	3402      	adds	r4, #2
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfb8      	it	lt
 800aa12:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aad4 <_svfiprintf_r+0x1ec>
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	4650      	mov	r0, sl
 800aa20:	7821      	ldrb	r1, [r4, #0]
 800aa22:	f7fd fcf6 	bl	8008412 <memchr>
 800aa26:	b138      	cbz	r0, 800aa38 <_svfiprintf_r+0x150>
 800aa28:	2240      	movs	r2, #64	; 0x40
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	eba0 000a 	sub.w	r0, r0, sl
 800aa30:	4082      	lsls	r2, r0
 800aa32:	4313      	orrs	r3, r2
 800aa34:	3401      	adds	r4, #1
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	4826      	ldr	r0, [pc, #152]	; (800aad8 <_svfiprintf_r+0x1f0>)
 800aa40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa44:	f7fd fce5 	bl	8008412 <memchr>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d038      	beq.n	800aabe <_svfiprintf_r+0x1d6>
 800aa4c:	4b23      	ldr	r3, [pc, #140]	; (800aadc <_svfiprintf_r+0x1f4>)
 800aa4e:	bb1b      	cbnz	r3, 800aa98 <_svfiprintf_r+0x1b0>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	3307      	adds	r3, #7
 800aa54:	f023 0307 	bic.w	r3, r3, #7
 800aa58:	3308      	adds	r3, #8
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	4433      	add	r3, r6
 800aa60:	9309      	str	r3, [sp, #36]	; 0x24
 800aa62:	e768      	b.n	800a936 <_svfiprintf_r+0x4e>
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	e7a6      	b.n	800a9bc <_svfiprintf_r+0xd4>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4619      	mov	r1, r3
 800aa76:	3401      	adds	r4, #1
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa80:	3a30      	subs	r2, #48	; 0x30
 800aa82:	2a09      	cmp	r2, #9
 800aa84:	d903      	bls.n	800aa8e <_svfiprintf_r+0x1a6>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c6      	beq.n	800aa18 <_svfiprintf_r+0x130>
 800aa8a:	9105      	str	r1, [sp, #20]
 800aa8c:	e7c4      	b.n	800aa18 <_svfiprintf_r+0x130>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	e7f0      	b.n	800aa7a <_svfiprintf_r+0x192>
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <_svfiprintf_r+0x1f8>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	f7fc fd30 	bl	8007508 <_printf_float>
 800aaa8:	1c42      	adds	r2, r0, #1
 800aaaa:	4606      	mov	r6, r0
 800aaac:	d1d6      	bne.n	800aa5c <_svfiprintf_r+0x174>
 800aaae:	89ab      	ldrh	r3, [r5, #12]
 800aab0:	065b      	lsls	r3, r3, #25
 800aab2:	f53f af2d 	bmi.w	800a910 <_svfiprintf_r+0x28>
 800aab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab8:	b01d      	add	sp, #116	; 0x74
 800aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabe:	ab03      	add	r3, sp, #12
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	462a      	mov	r2, r5
 800aac4:	4638      	mov	r0, r7
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <_svfiprintf_r+0x1f8>)
 800aac8:	a904      	add	r1, sp, #16
 800aaca:	f7fc ffbd 	bl	8007a48 <_printf_i>
 800aace:	e7eb      	b.n	800aaa8 <_svfiprintf_r+0x1c0>
 800aad0:	0800bd89 	.word	0x0800bd89
 800aad4:	0800bd8f 	.word	0x0800bd8f
 800aad8:	0800bd93 	.word	0x0800bd93
 800aadc:	08007509 	.word	0x08007509
 800aae0:	0800a835 	.word	0x0800a835

0800aae4 <__sflush_r>:
 800aae4:	898a      	ldrh	r2, [r1, #12]
 800aae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae8:	4605      	mov	r5, r0
 800aaea:	0710      	lsls	r0, r2, #28
 800aaec:	460c      	mov	r4, r1
 800aaee:	d457      	bmi.n	800aba0 <__sflush_r+0xbc>
 800aaf0:	684b      	ldr	r3, [r1, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dc04      	bgt.n	800ab00 <__sflush_r+0x1c>
 800aaf6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc01      	bgt.n	800ab00 <__sflush_r+0x1c>
 800aafc:	2000      	movs	r0, #0
 800aafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	d0fa      	beq.n	800aafc <__sflush_r+0x18>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab0c:	682f      	ldr	r7, [r5, #0]
 800ab0e:	6a21      	ldr	r1, [r4, #32]
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	d032      	beq.n	800ab7a <__sflush_r+0x96>
 800ab14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	075a      	lsls	r2, r3, #29
 800ab1a:	d505      	bpl.n	800ab28 <__sflush_r+0x44>
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	1ac0      	subs	r0, r0, r3
 800ab20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab22:	b10b      	cbz	r3, 800ab28 <__sflush_r+0x44>
 800ab24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab26:	1ac0      	subs	r0, r0, r3
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab2e:	4628      	mov	r0, r5
 800ab30:	6a21      	ldr	r1, [r4, #32]
 800ab32:	47b0      	blx	r6
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	d106      	bne.n	800ab48 <__sflush_r+0x64>
 800ab3a:	6829      	ldr	r1, [r5, #0]
 800ab3c:	291d      	cmp	r1, #29
 800ab3e:	d82b      	bhi.n	800ab98 <__sflush_r+0xb4>
 800ab40:	4a28      	ldr	r2, [pc, #160]	; (800abe4 <__sflush_r+0x100>)
 800ab42:	410a      	asrs	r2, r1
 800ab44:	07d6      	lsls	r6, r2, #31
 800ab46:	d427      	bmi.n	800ab98 <__sflush_r+0xb4>
 800ab48:	2200      	movs	r2, #0
 800ab4a:	6062      	str	r2, [r4, #4]
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	04d9      	lsls	r1, r3, #19
 800ab50:	6022      	str	r2, [r4, #0]
 800ab52:	d504      	bpl.n	800ab5e <__sflush_r+0x7a>
 800ab54:	1c42      	adds	r2, r0, #1
 800ab56:	d101      	bne.n	800ab5c <__sflush_r+0x78>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b903      	cbnz	r3, 800ab5e <__sflush_r+0x7a>
 800ab5c:	6560      	str	r0, [r4, #84]	; 0x54
 800ab5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab60:	602f      	str	r7, [r5, #0]
 800ab62:	2900      	cmp	r1, #0
 800ab64:	d0ca      	beq.n	800aafc <__sflush_r+0x18>
 800ab66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	d002      	beq.n	800ab74 <__sflush_r+0x90>
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f7fe fade 	bl	8009130 <_free_r>
 800ab74:	2000      	movs	r0, #0
 800ab76:	6360      	str	r0, [r4, #52]	; 0x34
 800ab78:	e7c1      	b.n	800aafe <__sflush_r+0x1a>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b0      	blx	r6
 800ab80:	1c41      	adds	r1, r0, #1
 800ab82:	d1c8      	bne.n	800ab16 <__sflush_r+0x32>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0c5      	beq.n	800ab16 <__sflush_r+0x32>
 800ab8a:	2b1d      	cmp	r3, #29
 800ab8c:	d001      	beq.n	800ab92 <__sflush_r+0xae>
 800ab8e:	2b16      	cmp	r3, #22
 800ab90:	d101      	bne.n	800ab96 <__sflush_r+0xb2>
 800ab92:	602f      	str	r7, [r5, #0]
 800ab94:	e7b2      	b.n	800aafc <__sflush_r+0x18>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	e7ae      	b.n	800aafe <__sflush_r+0x1a>
 800aba0:	690f      	ldr	r7, [r1, #16]
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	d0aa      	beq.n	800aafc <__sflush_r+0x18>
 800aba6:	0793      	lsls	r3, r2, #30
 800aba8:	bf18      	it	ne
 800abaa:	2300      	movne	r3, #0
 800abac:	680e      	ldr	r6, [r1, #0]
 800abae:	bf08      	it	eq
 800abb0:	694b      	ldreq	r3, [r1, #20]
 800abb2:	1bf6      	subs	r6, r6, r7
 800abb4:	600f      	str	r7, [r1, #0]
 800abb6:	608b      	str	r3, [r1, #8]
 800abb8:	2e00      	cmp	r6, #0
 800abba:	dd9f      	ble.n	800aafc <__sflush_r+0x18>
 800abbc:	4633      	mov	r3, r6
 800abbe:	463a      	mov	r2, r7
 800abc0:	4628      	mov	r0, r5
 800abc2:	6a21      	ldr	r1, [r4, #32]
 800abc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800abc8:	47e0      	blx	ip
 800abca:	2800      	cmp	r0, #0
 800abcc:	dc06      	bgt.n	800abdc <__sflush_r+0xf8>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295
 800abd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	e790      	b.n	800aafe <__sflush_r+0x1a>
 800abdc:	4407      	add	r7, r0
 800abde:	1a36      	subs	r6, r6, r0
 800abe0:	e7ea      	b.n	800abb8 <__sflush_r+0xd4>
 800abe2:	bf00      	nop
 800abe4:	dfbffffe 	.word	0xdfbffffe

0800abe8 <_fflush_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	690b      	ldr	r3, [r1, #16]
 800abec:	4605      	mov	r5, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	b913      	cbnz	r3, 800abf8 <_fflush_r+0x10>
 800abf2:	2500      	movs	r5, #0
 800abf4:	4628      	mov	r0, r5
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	b118      	cbz	r0, 800ac02 <_fflush_r+0x1a>
 800abfa:	6a03      	ldr	r3, [r0, #32]
 800abfc:	b90b      	cbnz	r3, 800ac02 <_fflush_r+0x1a>
 800abfe:	f7fd fadf 	bl	80081c0 <__sinit>
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f3      	beq.n	800abf2 <_fflush_r+0xa>
 800ac0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac0c:	07d0      	lsls	r0, r2, #31
 800ac0e:	d404      	bmi.n	800ac1a <_fflush_r+0x32>
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_fflush_r+0x32>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f7fd fbfa 	bl	800840e <__retarget_lock_acquire_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	f7ff ff61 	bl	800aae4 <__sflush_r>
 800ac22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac24:	4605      	mov	r5, r0
 800ac26:	07da      	lsls	r2, r3, #31
 800ac28:	d4e4      	bmi.n	800abf4 <_fflush_r+0xc>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	059b      	lsls	r3, r3, #22
 800ac2e:	d4e1      	bmi.n	800abf4 <_fflush_r+0xc>
 800ac30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac32:	f7fd fbed 	bl	8008410 <__retarget_lock_release_recursive>
 800ac36:	e7dd      	b.n	800abf4 <_fflush_r+0xc>

0800ac38 <memmove>:
 800ac38:	4288      	cmp	r0, r1
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	eb01 0402 	add.w	r4, r1, r2
 800ac40:	d902      	bls.n	800ac48 <memmove+0x10>
 800ac42:	4284      	cmp	r4, r0
 800ac44:	4623      	mov	r3, r4
 800ac46:	d807      	bhi.n	800ac58 <memmove+0x20>
 800ac48:	1e43      	subs	r3, r0, #1
 800ac4a:	42a1      	cmp	r1, r4
 800ac4c:	d008      	beq.n	800ac60 <memmove+0x28>
 800ac4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac56:	e7f8      	b.n	800ac4a <memmove+0x12>
 800ac58:	4601      	mov	r1, r0
 800ac5a:	4402      	add	r2, r0
 800ac5c:	428a      	cmp	r2, r1
 800ac5e:	d100      	bne.n	800ac62 <memmove+0x2a>
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac6a:	e7f7      	b.n	800ac5c <memmove+0x24>

0800ac6c <strncmp>:
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	b16a      	cbz	r2, 800ac8c <strncmp+0x20>
 800ac70:	3901      	subs	r1, #1
 800ac72:	1884      	adds	r4, r0, r2
 800ac74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d103      	bne.n	800ac88 <strncmp+0x1c>
 800ac80:	42a0      	cmp	r0, r4
 800ac82:	d001      	beq.n	800ac88 <strncmp+0x1c>
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	d1f5      	bne.n	800ac74 <strncmp+0x8>
 800ac88:	1ad0      	subs	r0, r2, r3
 800ac8a:	bd10      	pop	{r4, pc}
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	e7fc      	b.n	800ac8a <strncmp+0x1e>

0800ac90 <nan>:
 800ac90:	2000      	movs	r0, #0
 800ac92:	4901      	ldr	r1, [pc, #4]	; (800ac98 <nan+0x8>)
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	7ff80000 	.word	0x7ff80000

0800ac9c <__assert_func>:
 800ac9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac9e:	4614      	mov	r4, r2
 800aca0:	461a      	mov	r2, r3
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <__assert_func+0x2c>)
 800aca4:	4605      	mov	r5, r0
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68d8      	ldr	r0, [r3, #12]
 800acaa:	b14c      	cbz	r4, 800acc0 <__assert_func+0x24>
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <__assert_func+0x30>)
 800acae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acb2:	9100      	str	r1, [sp, #0]
 800acb4:	462b      	mov	r3, r5
 800acb6:	4906      	ldr	r1, [pc, #24]	; (800acd0 <__assert_func+0x34>)
 800acb8:	f000 fbca 	bl	800b450 <fiprintf>
 800acbc:	f000 fbda 	bl	800b474 <abort>
 800acc0:	4b04      	ldr	r3, [pc, #16]	; (800acd4 <__assert_func+0x38>)
 800acc2:	461c      	mov	r4, r3
 800acc4:	e7f3      	b.n	800acae <__assert_func+0x12>
 800acc6:	bf00      	nop
 800acc8:	20000064 	.word	0x20000064
 800accc:	0800bda2 	.word	0x0800bda2
 800acd0:	0800bdaf 	.word	0x0800bdaf
 800acd4:	0800bddd 	.word	0x0800bddd

0800acd8 <_calloc_r>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	fba1 5402 	umull	r5, r4, r1, r2
 800acde:	b934      	cbnz	r4, 800acee <_calloc_r+0x16>
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7fc fae9 	bl	80072b8 <_malloc_r>
 800ace6:	4606      	mov	r6, r0
 800ace8:	b928      	cbnz	r0, 800acf6 <_calloc_r+0x1e>
 800acea:	4630      	mov	r0, r6
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	220c      	movs	r2, #12
 800acf0:	2600      	movs	r6, #0
 800acf2:	6002      	str	r2, [r0, #0]
 800acf4:	e7f9      	b.n	800acea <_calloc_r+0x12>
 800acf6:	462a      	mov	r2, r5
 800acf8:	4621      	mov	r1, r4
 800acfa:	f7fd fafa 	bl	80082f2 <memset>
 800acfe:	e7f4      	b.n	800acea <_calloc_r+0x12>

0800ad00 <rshift>:
 800ad00:	6903      	ldr	r3, [r0, #16]
 800ad02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad0a:	f100 0414 	add.w	r4, r0, #20
 800ad0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad12:	dd46      	ble.n	800ada2 <rshift+0xa2>
 800ad14:	f011 011f 	ands.w	r1, r1, #31
 800ad18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad20:	d10c      	bne.n	800ad3c <rshift+0x3c>
 800ad22:	4629      	mov	r1, r5
 800ad24:	f100 0710 	add.w	r7, r0, #16
 800ad28:	42b1      	cmp	r1, r6
 800ad2a:	d335      	bcc.n	800ad98 <rshift+0x98>
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	1eea      	subs	r2, r5, #3
 800ad32:	4296      	cmp	r6, r2
 800ad34:	bf38      	it	cc
 800ad36:	2300      	movcc	r3, #0
 800ad38:	4423      	add	r3, r4
 800ad3a:	e015      	b.n	800ad68 <rshift+0x68>
 800ad3c:	46a1      	mov	r9, r4
 800ad3e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad42:	f1c1 0820 	rsb	r8, r1, #32
 800ad46:	40cf      	lsrs	r7, r1
 800ad48:	f105 0e04 	add.w	lr, r5, #4
 800ad4c:	4576      	cmp	r6, lr
 800ad4e:	46f4      	mov	ip, lr
 800ad50:	d816      	bhi.n	800ad80 <rshift+0x80>
 800ad52:	1a9a      	subs	r2, r3, r2
 800ad54:	0092      	lsls	r2, r2, #2
 800ad56:	3a04      	subs	r2, #4
 800ad58:	3501      	adds	r5, #1
 800ad5a:	42ae      	cmp	r6, r5
 800ad5c:	bf38      	it	cc
 800ad5e:	2200      	movcc	r2, #0
 800ad60:	18a3      	adds	r3, r4, r2
 800ad62:	50a7      	str	r7, [r4, r2]
 800ad64:	b107      	cbz	r7, 800ad68 <rshift+0x68>
 800ad66:	3304      	adds	r3, #4
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	eba3 0204 	sub.w	r2, r3, r4
 800ad6e:	bf08      	it	eq
 800ad70:	2300      	moveq	r3, #0
 800ad72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad76:	6102      	str	r2, [r0, #16]
 800ad78:	bf08      	it	eq
 800ad7a:	6143      	streq	r3, [r0, #20]
 800ad7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad80:	f8dc c000 	ldr.w	ip, [ip]
 800ad84:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad88:	ea4c 0707 	orr.w	r7, ip, r7
 800ad8c:	f849 7b04 	str.w	r7, [r9], #4
 800ad90:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad94:	40cf      	lsrs	r7, r1
 800ad96:	e7d9      	b.n	800ad4c <rshift+0x4c>
 800ad98:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad9c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ada0:	e7c2      	b.n	800ad28 <rshift+0x28>
 800ada2:	4623      	mov	r3, r4
 800ada4:	e7e0      	b.n	800ad68 <rshift+0x68>

0800ada6 <__hexdig_fun>:
 800ada6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adaa:	2b09      	cmp	r3, #9
 800adac:	d802      	bhi.n	800adb4 <__hexdig_fun+0xe>
 800adae:	3820      	subs	r0, #32
 800adb0:	b2c0      	uxtb	r0, r0
 800adb2:	4770      	bx	lr
 800adb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adb8:	2b05      	cmp	r3, #5
 800adba:	d801      	bhi.n	800adc0 <__hexdig_fun+0x1a>
 800adbc:	3847      	subs	r0, #71	; 0x47
 800adbe:	e7f7      	b.n	800adb0 <__hexdig_fun+0xa>
 800adc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d801      	bhi.n	800adcc <__hexdig_fun+0x26>
 800adc8:	3827      	subs	r0, #39	; 0x27
 800adca:	e7f1      	b.n	800adb0 <__hexdig_fun+0xa>
 800adcc:	2000      	movs	r0, #0
 800adce:	4770      	bx	lr

0800add0 <__gethex>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4681      	mov	r9, r0
 800add6:	468a      	mov	sl, r1
 800add8:	4617      	mov	r7, r2
 800adda:	680a      	ldr	r2, [r1, #0]
 800addc:	b085      	sub	sp, #20
 800adde:	f102 0b02 	add.w	fp, r2, #2
 800ade2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ade6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800adea:	9302      	str	r3, [sp, #8]
 800adec:	32fe      	adds	r2, #254	; 0xfe
 800adee:	eb02 030b 	add.w	r3, r2, fp
 800adf2:	46d8      	mov	r8, fp
 800adf4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	2830      	cmp	r0, #48	; 0x30
 800adfc:	d0f7      	beq.n	800adee <__gethex+0x1e>
 800adfe:	f7ff ffd2 	bl	800ada6 <__hexdig_fun>
 800ae02:	4604      	mov	r4, r0
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d138      	bne.n	800ae7a <__gethex+0xaa>
 800ae08:	2201      	movs	r2, #1
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	49a7      	ldr	r1, [pc, #668]	; (800b0ac <__gethex+0x2dc>)
 800ae0e:	f7ff ff2d 	bl	800ac6c <strncmp>
 800ae12:	4606      	mov	r6, r0
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d169      	bne.n	800aeec <__gethex+0x11c>
 800ae18:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ae1c:	465d      	mov	r5, fp
 800ae1e:	f7ff ffc2 	bl	800ada6 <__hexdig_fun>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d064      	beq.n	800aef0 <__gethex+0x120>
 800ae26:	465a      	mov	r2, fp
 800ae28:	7810      	ldrb	r0, [r2, #0]
 800ae2a:	4690      	mov	r8, r2
 800ae2c:	2830      	cmp	r0, #48	; 0x30
 800ae2e:	f102 0201 	add.w	r2, r2, #1
 800ae32:	d0f9      	beq.n	800ae28 <__gethex+0x58>
 800ae34:	f7ff ffb7 	bl	800ada6 <__hexdig_fun>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	fab0 f480 	clz	r4, r0
 800ae3e:	465e      	mov	r6, fp
 800ae40:	0964      	lsrs	r4, r4, #5
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	4642      	mov	r2, r8
 800ae46:	4615      	mov	r5, r2
 800ae48:	7828      	ldrb	r0, [r5, #0]
 800ae4a:	3201      	adds	r2, #1
 800ae4c:	f7ff ffab 	bl	800ada6 <__hexdig_fun>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1f8      	bne.n	800ae46 <__gethex+0x76>
 800ae54:	2201      	movs	r2, #1
 800ae56:	4628      	mov	r0, r5
 800ae58:	4994      	ldr	r1, [pc, #592]	; (800b0ac <__gethex+0x2dc>)
 800ae5a:	f7ff ff07 	bl	800ac6c <strncmp>
 800ae5e:	b978      	cbnz	r0, 800ae80 <__gethex+0xb0>
 800ae60:	b946      	cbnz	r6, 800ae74 <__gethex+0xa4>
 800ae62:	1c6e      	adds	r6, r5, #1
 800ae64:	4632      	mov	r2, r6
 800ae66:	4615      	mov	r5, r2
 800ae68:	7828      	ldrb	r0, [r5, #0]
 800ae6a:	3201      	adds	r2, #1
 800ae6c:	f7ff ff9b 	bl	800ada6 <__hexdig_fun>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d1f8      	bne.n	800ae66 <__gethex+0x96>
 800ae74:	1b73      	subs	r3, r6, r5
 800ae76:	009e      	lsls	r6, r3, #2
 800ae78:	e004      	b.n	800ae84 <__gethex+0xb4>
 800ae7a:	2400      	movs	r4, #0
 800ae7c:	4626      	mov	r6, r4
 800ae7e:	e7e1      	b.n	800ae44 <__gethex+0x74>
 800ae80:	2e00      	cmp	r6, #0
 800ae82:	d1f7      	bne.n	800ae74 <__gethex+0xa4>
 800ae84:	782b      	ldrb	r3, [r5, #0]
 800ae86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae8a:	2b50      	cmp	r3, #80	; 0x50
 800ae8c:	d13d      	bne.n	800af0a <__gethex+0x13a>
 800ae8e:	786b      	ldrb	r3, [r5, #1]
 800ae90:	2b2b      	cmp	r3, #43	; 0x2b
 800ae92:	d02f      	beq.n	800aef4 <__gethex+0x124>
 800ae94:	2b2d      	cmp	r3, #45	; 0x2d
 800ae96:	d031      	beq.n	800aefc <__gethex+0x12c>
 800ae98:	f04f 0b00 	mov.w	fp, #0
 800ae9c:	1c69      	adds	r1, r5, #1
 800ae9e:	7808      	ldrb	r0, [r1, #0]
 800aea0:	f7ff ff81 	bl	800ada6 <__hexdig_fun>
 800aea4:	1e42      	subs	r2, r0, #1
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	2a18      	cmp	r2, #24
 800aeaa:	d82e      	bhi.n	800af0a <__gethex+0x13a>
 800aeac:	f1a0 0210 	sub.w	r2, r0, #16
 800aeb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aeb4:	f7ff ff77 	bl	800ada6 <__hexdig_fun>
 800aeb8:	f100 3cff 	add.w	ip, r0, #4294967295
 800aebc:	fa5f fc8c 	uxtb.w	ip, ip
 800aec0:	f1bc 0f18 	cmp.w	ip, #24
 800aec4:	d91d      	bls.n	800af02 <__gethex+0x132>
 800aec6:	f1bb 0f00 	cmp.w	fp, #0
 800aeca:	d000      	beq.n	800aece <__gethex+0xfe>
 800aecc:	4252      	negs	r2, r2
 800aece:	4416      	add	r6, r2
 800aed0:	f8ca 1000 	str.w	r1, [sl]
 800aed4:	b1dc      	cbz	r4, 800af0e <__gethex+0x13e>
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bf14      	ite	ne
 800aedc:	f04f 0800 	movne.w	r8, #0
 800aee0:	f04f 0806 	moveq.w	r8, #6
 800aee4:	4640      	mov	r0, r8
 800aee6:	b005      	add	sp, #20
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	4645      	mov	r5, r8
 800aeee:	4626      	mov	r6, r4
 800aef0:	2401      	movs	r4, #1
 800aef2:	e7c7      	b.n	800ae84 <__gethex+0xb4>
 800aef4:	f04f 0b00 	mov.w	fp, #0
 800aef8:	1ca9      	adds	r1, r5, #2
 800aefa:	e7d0      	b.n	800ae9e <__gethex+0xce>
 800aefc:	f04f 0b01 	mov.w	fp, #1
 800af00:	e7fa      	b.n	800aef8 <__gethex+0x128>
 800af02:	230a      	movs	r3, #10
 800af04:	fb03 0002 	mla	r0, r3, r2, r0
 800af08:	e7d0      	b.n	800aeac <__gethex+0xdc>
 800af0a:	4629      	mov	r1, r5
 800af0c:	e7e0      	b.n	800aed0 <__gethex+0x100>
 800af0e:	4621      	mov	r1, r4
 800af10:	eba5 0308 	sub.w	r3, r5, r8
 800af14:	3b01      	subs	r3, #1
 800af16:	2b07      	cmp	r3, #7
 800af18:	dc0a      	bgt.n	800af30 <__gethex+0x160>
 800af1a:	4648      	mov	r0, r9
 800af1c:	f7fe f950 	bl	80091c0 <_Balloc>
 800af20:	4604      	mov	r4, r0
 800af22:	b940      	cbnz	r0, 800af36 <__gethex+0x166>
 800af24:	4602      	mov	r2, r0
 800af26:	21e4      	movs	r1, #228	; 0xe4
 800af28:	4b61      	ldr	r3, [pc, #388]	; (800b0b0 <__gethex+0x2e0>)
 800af2a:	4862      	ldr	r0, [pc, #392]	; (800b0b4 <__gethex+0x2e4>)
 800af2c:	f7ff feb6 	bl	800ac9c <__assert_func>
 800af30:	3101      	adds	r1, #1
 800af32:	105b      	asrs	r3, r3, #1
 800af34:	e7ef      	b.n	800af16 <__gethex+0x146>
 800af36:	2300      	movs	r3, #0
 800af38:	469b      	mov	fp, r3
 800af3a:	f100 0a14 	add.w	sl, r0, #20
 800af3e:	f8cd a004 	str.w	sl, [sp, #4]
 800af42:	45a8      	cmp	r8, r5
 800af44:	d344      	bcc.n	800afd0 <__gethex+0x200>
 800af46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af4a:	4658      	mov	r0, fp
 800af4c:	f848 bb04 	str.w	fp, [r8], #4
 800af50:	eba8 080a 	sub.w	r8, r8, sl
 800af54:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800af58:	6122      	str	r2, [r4, #16]
 800af5a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800af5e:	f7fe fa21 	bl	80093a4 <__hi0bits>
 800af62:	683d      	ldr	r5, [r7, #0]
 800af64:	eba8 0800 	sub.w	r8, r8, r0
 800af68:	45a8      	cmp	r8, r5
 800af6a:	dd59      	ble.n	800b020 <__gethex+0x250>
 800af6c:	eba8 0805 	sub.w	r8, r8, r5
 800af70:	4641      	mov	r1, r8
 800af72:	4620      	mov	r0, r4
 800af74:	f7fe fd9f 	bl	8009ab6 <__any_on>
 800af78:	4683      	mov	fp, r0
 800af7a:	b1b8      	cbz	r0, 800afac <__gethex+0x1dc>
 800af7c:	f04f 0b01 	mov.w	fp, #1
 800af80:	f108 33ff 	add.w	r3, r8, #4294967295
 800af84:	1159      	asrs	r1, r3, #5
 800af86:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800af8a:	f003 021f 	and.w	r2, r3, #31
 800af8e:	fa0b f202 	lsl.w	r2, fp, r2
 800af92:	420a      	tst	r2, r1
 800af94:	d00a      	beq.n	800afac <__gethex+0x1dc>
 800af96:	455b      	cmp	r3, fp
 800af98:	dd06      	ble.n	800afa8 <__gethex+0x1d8>
 800af9a:	4620      	mov	r0, r4
 800af9c:	f1a8 0102 	sub.w	r1, r8, #2
 800afa0:	f7fe fd89 	bl	8009ab6 <__any_on>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d138      	bne.n	800b01a <__gethex+0x24a>
 800afa8:	f04f 0b02 	mov.w	fp, #2
 800afac:	4641      	mov	r1, r8
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff fea6 	bl	800ad00 <rshift>
 800afb4:	4446      	add	r6, r8
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	42b3      	cmp	r3, r6
 800afba:	da41      	bge.n	800b040 <__gethex+0x270>
 800afbc:	4621      	mov	r1, r4
 800afbe:	4648      	mov	r0, r9
 800afc0:	f7fe f93e 	bl	8009240 <_Bfree>
 800afc4:	2300      	movs	r3, #0
 800afc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afc8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	e789      	b.n	800aee4 <__gethex+0x114>
 800afd0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800afd4:	2a2e      	cmp	r2, #46	; 0x2e
 800afd6:	d014      	beq.n	800b002 <__gethex+0x232>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	d106      	bne.n	800afea <__gethex+0x21a>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	f843 bb04 	str.w	fp, [r3], #4
 800afe2:	f04f 0b00 	mov.w	fp, #0
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	465b      	mov	r3, fp
 800afea:	7828      	ldrb	r0, [r5, #0]
 800afec:	9303      	str	r3, [sp, #12]
 800afee:	f7ff feda 	bl	800ada6 <__hexdig_fun>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	f000 000f 	and.w	r0, r0, #15
 800aff8:	4098      	lsls	r0, r3
 800affa:	ea4b 0b00 	orr.w	fp, fp, r0
 800affe:	3304      	adds	r3, #4
 800b000:	e79f      	b.n	800af42 <__gethex+0x172>
 800b002:	45a8      	cmp	r8, r5
 800b004:	d8e8      	bhi.n	800afd8 <__gethex+0x208>
 800b006:	2201      	movs	r2, #1
 800b008:	4628      	mov	r0, r5
 800b00a:	4928      	ldr	r1, [pc, #160]	; (800b0ac <__gethex+0x2dc>)
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	f7ff fe2d 	bl	800ac6c <strncmp>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	2800      	cmp	r0, #0
 800b016:	d1df      	bne.n	800afd8 <__gethex+0x208>
 800b018:	e793      	b.n	800af42 <__gethex+0x172>
 800b01a:	f04f 0b03 	mov.w	fp, #3
 800b01e:	e7c5      	b.n	800afac <__gethex+0x1dc>
 800b020:	da0b      	bge.n	800b03a <__gethex+0x26a>
 800b022:	eba5 0808 	sub.w	r8, r5, r8
 800b026:	4621      	mov	r1, r4
 800b028:	4642      	mov	r2, r8
 800b02a:	4648      	mov	r0, r9
 800b02c:	f7fe fb20 	bl	8009670 <__lshift>
 800b030:	4604      	mov	r4, r0
 800b032:	eba6 0608 	sub.w	r6, r6, r8
 800b036:	f100 0a14 	add.w	sl, r0, #20
 800b03a:	f04f 0b00 	mov.w	fp, #0
 800b03e:	e7ba      	b.n	800afb6 <__gethex+0x1e6>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	42b3      	cmp	r3, r6
 800b044:	dd74      	ble.n	800b130 <__gethex+0x360>
 800b046:	1b9e      	subs	r6, r3, r6
 800b048:	42b5      	cmp	r5, r6
 800b04a:	dc35      	bgt.n	800b0b8 <__gethex+0x2e8>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d023      	beq.n	800b09a <__gethex+0x2ca>
 800b052:	2b03      	cmp	r3, #3
 800b054:	d025      	beq.n	800b0a2 <__gethex+0x2d2>
 800b056:	2b01      	cmp	r3, #1
 800b058:	d115      	bne.n	800b086 <__gethex+0x2b6>
 800b05a:	42b5      	cmp	r5, r6
 800b05c:	d113      	bne.n	800b086 <__gethex+0x2b6>
 800b05e:	2d01      	cmp	r5, #1
 800b060:	d10b      	bne.n	800b07a <__gethex+0x2aa>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	9a02      	ldr	r2, [sp, #8]
 800b066:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	2301      	movs	r3, #1
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	f8ca 3000 	str.w	r3, [sl]
 800b074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b076:	601c      	str	r4, [r3, #0]
 800b078:	e734      	b.n	800aee4 <__gethex+0x114>
 800b07a:	4620      	mov	r0, r4
 800b07c:	1e69      	subs	r1, r5, #1
 800b07e:	f7fe fd1a 	bl	8009ab6 <__any_on>
 800b082:	2800      	cmp	r0, #0
 800b084:	d1ed      	bne.n	800b062 <__gethex+0x292>
 800b086:	4621      	mov	r1, r4
 800b088:	4648      	mov	r0, r9
 800b08a:	f7fe f8d9 	bl	8009240 <_Bfree>
 800b08e:	2300      	movs	r3, #0
 800b090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b092:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	e724      	b.n	800aee4 <__gethex+0x114>
 800b09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1f2      	bne.n	800b086 <__gethex+0x2b6>
 800b0a0:	e7df      	b.n	800b062 <__gethex+0x292>
 800b0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1dc      	bne.n	800b062 <__gethex+0x292>
 800b0a8:	e7ed      	b.n	800b086 <__gethex+0x2b6>
 800b0aa:	bf00      	nop
 800b0ac:	0800bc34 	.word	0x0800bc34
 800b0b0:	0800bac7 	.word	0x0800bac7
 800b0b4:	0800bdde 	.word	0x0800bdde
 800b0b8:	f106 38ff 	add.w	r8, r6, #4294967295
 800b0bc:	f1bb 0f00 	cmp.w	fp, #0
 800b0c0:	d133      	bne.n	800b12a <__gethex+0x35a>
 800b0c2:	f1b8 0f00 	cmp.w	r8, #0
 800b0c6:	d004      	beq.n	800b0d2 <__gethex+0x302>
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fe fcf3 	bl	8009ab6 <__any_on>
 800b0d0:	4683      	mov	fp, r0
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b0d8:	f008 081f 	and.w	r8, r8, #31
 800b0dc:	fa03 f308 	lsl.w	r3, r3, r8
 800b0e0:	f04f 0802 	mov.w	r8, #2
 800b0e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4213      	tst	r3, r2
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	bf18      	it	ne
 800b0f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800b0f4:	1bad      	subs	r5, r5, r6
 800b0f6:	f7ff fe03 	bl	800ad00 <rshift>
 800b0fa:	687e      	ldr	r6, [r7, #4]
 800b0fc:	f1bb 0f00 	cmp.w	fp, #0
 800b100:	d04a      	beq.n	800b198 <__gethex+0x3c8>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d016      	beq.n	800b136 <__gethex+0x366>
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d018      	beq.n	800b13e <__gethex+0x36e>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d109      	bne.n	800b124 <__gethex+0x354>
 800b110:	f01b 0f02 	tst.w	fp, #2
 800b114:	d006      	beq.n	800b124 <__gethex+0x354>
 800b116:	f8da 3000 	ldr.w	r3, [sl]
 800b11a:	ea4b 0b03 	orr.w	fp, fp, r3
 800b11e:	f01b 0f01 	tst.w	fp, #1
 800b122:	d10f      	bne.n	800b144 <__gethex+0x374>
 800b124:	f048 0810 	orr.w	r8, r8, #16
 800b128:	e036      	b.n	800b198 <__gethex+0x3c8>
 800b12a:	f04f 0b01 	mov.w	fp, #1
 800b12e:	e7d0      	b.n	800b0d2 <__gethex+0x302>
 800b130:	f04f 0801 	mov.w	r8, #1
 800b134:	e7e2      	b.n	800b0fc <__gethex+0x32c>
 800b136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b138:	f1c3 0301 	rsb	r3, r3, #1
 800b13c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0ef      	beq.n	800b124 <__gethex+0x354>
 800b144:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b148:	f104 0214 	add.w	r2, r4, #20
 800b14c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	2300      	movs	r3, #0
 800b154:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b158:	4694      	mov	ip, r2
 800b15a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b15e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b162:	d01e      	beq.n	800b1a2 <__gethex+0x3d2>
 800b164:	3101      	adds	r1, #1
 800b166:	f8cc 1000 	str.w	r1, [ip]
 800b16a:	f1b8 0f02 	cmp.w	r8, #2
 800b16e:	f104 0214 	add.w	r2, r4, #20
 800b172:	d13d      	bne.n	800b1f0 <__gethex+0x420>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	42ab      	cmp	r3, r5
 800b17a:	d10b      	bne.n	800b194 <__gethex+0x3c4>
 800b17c:	2301      	movs	r3, #1
 800b17e:	1169      	asrs	r1, r5, #5
 800b180:	f005 051f 	and.w	r5, r5, #31
 800b184:	fa03 f505 	lsl.w	r5, r3, r5
 800b188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b18c:	421d      	tst	r5, r3
 800b18e:	bf18      	it	ne
 800b190:	f04f 0801 	movne.w	r8, #1
 800b194:	f048 0820 	orr.w	r8, r8, #32
 800b198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b19a:	601c      	str	r4, [r3, #0]
 800b19c:	9b02      	ldr	r3, [sp, #8]
 800b19e:	601e      	str	r6, [r3, #0]
 800b1a0:	e6a0      	b.n	800aee4 <__gethex+0x114>
 800b1a2:	4290      	cmp	r0, r2
 800b1a4:	f842 3c04 	str.w	r3, [r2, #-4]
 800b1a8:	d8d6      	bhi.n	800b158 <__gethex+0x388>
 800b1aa:	68a2      	ldr	r2, [r4, #8]
 800b1ac:	4593      	cmp	fp, r2
 800b1ae:	db17      	blt.n	800b1e0 <__gethex+0x410>
 800b1b0:	6861      	ldr	r1, [r4, #4]
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	3101      	adds	r1, #1
 800b1b6:	f7fe f803 	bl	80091c0 <_Balloc>
 800b1ba:	4682      	mov	sl, r0
 800b1bc:	b918      	cbnz	r0, 800b1c6 <__gethex+0x3f6>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	2184      	movs	r1, #132	; 0x84
 800b1c2:	4b1a      	ldr	r3, [pc, #104]	; (800b22c <__gethex+0x45c>)
 800b1c4:	e6b1      	b.n	800af2a <__gethex+0x15a>
 800b1c6:	6922      	ldr	r2, [r4, #16]
 800b1c8:	f104 010c 	add.w	r1, r4, #12
 800b1cc:	3202      	adds	r2, #2
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	300c      	adds	r0, #12
 800b1d2:	f7fd f92c 	bl	800842e <memcpy>
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4648      	mov	r0, r9
 800b1da:	f7fe f831 	bl	8009240 <_Bfree>
 800b1de:	4654      	mov	r4, sl
 800b1e0:	6922      	ldr	r2, [r4, #16]
 800b1e2:	1c51      	adds	r1, r2, #1
 800b1e4:	6121      	str	r1, [r4, #16]
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b1ec:	6151      	str	r1, [r2, #20]
 800b1ee:	e7bc      	b.n	800b16a <__gethex+0x39a>
 800b1f0:	6921      	ldr	r1, [r4, #16]
 800b1f2:	4559      	cmp	r1, fp
 800b1f4:	dd0b      	ble.n	800b20e <__gethex+0x43e>
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7ff fd81 	bl	800ad00 <rshift>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	3601      	adds	r6, #1
 800b202:	42b3      	cmp	r3, r6
 800b204:	f6ff aeda 	blt.w	800afbc <__gethex+0x1ec>
 800b208:	f04f 0801 	mov.w	r8, #1
 800b20c:	e7c2      	b.n	800b194 <__gethex+0x3c4>
 800b20e:	f015 051f 	ands.w	r5, r5, #31
 800b212:	d0f9      	beq.n	800b208 <__gethex+0x438>
 800b214:	9b01      	ldr	r3, [sp, #4]
 800b216:	f1c5 0520 	rsb	r5, r5, #32
 800b21a:	441a      	add	r2, r3
 800b21c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b220:	f7fe f8c0 	bl	80093a4 <__hi0bits>
 800b224:	42a8      	cmp	r0, r5
 800b226:	dbe6      	blt.n	800b1f6 <__gethex+0x426>
 800b228:	e7ee      	b.n	800b208 <__gethex+0x438>
 800b22a:	bf00      	nop
 800b22c:	0800bac7 	.word	0x0800bac7

0800b230 <L_shift>:
 800b230:	f1c2 0208 	rsb	r2, r2, #8
 800b234:	0092      	lsls	r2, r2, #2
 800b236:	b570      	push	{r4, r5, r6, lr}
 800b238:	f1c2 0620 	rsb	r6, r2, #32
 800b23c:	6843      	ldr	r3, [r0, #4]
 800b23e:	6804      	ldr	r4, [r0, #0]
 800b240:	fa03 f506 	lsl.w	r5, r3, r6
 800b244:	432c      	orrs	r4, r5
 800b246:	40d3      	lsrs	r3, r2
 800b248:	6004      	str	r4, [r0, #0]
 800b24a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b24e:	4288      	cmp	r0, r1
 800b250:	d3f4      	bcc.n	800b23c <L_shift+0xc>
 800b252:	bd70      	pop	{r4, r5, r6, pc}

0800b254 <__match>:
 800b254:	b530      	push	{r4, r5, lr}
 800b256:	6803      	ldr	r3, [r0, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b25e:	b914      	cbnz	r4, 800b266 <__match+0x12>
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	2001      	movs	r0, #1
 800b264:	bd30      	pop	{r4, r5, pc}
 800b266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b26a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b26e:	2d19      	cmp	r5, #25
 800b270:	bf98      	it	ls
 800b272:	3220      	addls	r2, #32
 800b274:	42a2      	cmp	r2, r4
 800b276:	d0f0      	beq.n	800b25a <__match+0x6>
 800b278:	2000      	movs	r0, #0
 800b27a:	e7f3      	b.n	800b264 <__match+0x10>

0800b27c <__hexnan>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	2500      	movs	r5, #0
 800b282:	680b      	ldr	r3, [r1, #0]
 800b284:	4682      	mov	sl, r0
 800b286:	115e      	asrs	r6, r3, #5
 800b288:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b28c:	f013 031f 	ands.w	r3, r3, #31
 800b290:	bf18      	it	ne
 800b292:	3604      	addne	r6, #4
 800b294:	1f37      	subs	r7, r6, #4
 800b296:	4690      	mov	r8, r2
 800b298:	46b9      	mov	r9, r7
 800b29a:	463c      	mov	r4, r7
 800b29c:	46ab      	mov	fp, r5
 800b29e:	b087      	sub	sp, #28
 800b2a0:	6801      	ldr	r1, [r0, #0]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2a8:	9502      	str	r5, [sp, #8]
 800b2aa:	784a      	ldrb	r2, [r1, #1]
 800b2ac:	1c4b      	adds	r3, r1, #1
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	b342      	cbz	r2, 800b304 <__hexnan+0x88>
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	9105      	str	r1, [sp, #20]
 800b2b6:	9204      	str	r2, [sp, #16]
 800b2b8:	f7ff fd75 	bl	800ada6 <__hexdig_fun>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d14f      	bne.n	800b360 <__hexnan+0xe4>
 800b2c0:	9a04      	ldr	r2, [sp, #16]
 800b2c2:	9905      	ldr	r1, [sp, #20]
 800b2c4:	2a20      	cmp	r2, #32
 800b2c6:	d818      	bhi.n	800b2fa <__hexnan+0x7e>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	459b      	cmp	fp, r3
 800b2cc:	dd13      	ble.n	800b2f6 <__hexnan+0x7a>
 800b2ce:	454c      	cmp	r4, r9
 800b2d0:	d206      	bcs.n	800b2e0 <__hexnan+0x64>
 800b2d2:	2d07      	cmp	r5, #7
 800b2d4:	dc04      	bgt.n	800b2e0 <__hexnan+0x64>
 800b2d6:	462a      	mov	r2, r5
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7ff ffa8 	bl	800b230 <L_shift>
 800b2e0:	4544      	cmp	r4, r8
 800b2e2:	d950      	bls.n	800b386 <__hexnan+0x10a>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f1a4 0904 	sub.w	r9, r4, #4
 800b2ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	464c      	mov	r4, r9
 800b2f2:	f8cd b008 	str.w	fp, [sp, #8]
 800b2f6:	9903      	ldr	r1, [sp, #12]
 800b2f8:	e7d7      	b.n	800b2aa <__hexnan+0x2e>
 800b2fa:	2a29      	cmp	r2, #41	; 0x29
 800b2fc:	d155      	bne.n	800b3aa <__hexnan+0x12e>
 800b2fe:	3102      	adds	r1, #2
 800b300:	f8ca 1000 	str.w	r1, [sl]
 800b304:	f1bb 0f00 	cmp.w	fp, #0
 800b308:	d04f      	beq.n	800b3aa <__hexnan+0x12e>
 800b30a:	454c      	cmp	r4, r9
 800b30c:	d206      	bcs.n	800b31c <__hexnan+0xa0>
 800b30e:	2d07      	cmp	r5, #7
 800b310:	dc04      	bgt.n	800b31c <__hexnan+0xa0>
 800b312:	462a      	mov	r2, r5
 800b314:	4649      	mov	r1, r9
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff ff8a 	bl	800b230 <L_shift>
 800b31c:	4544      	cmp	r4, r8
 800b31e:	d934      	bls.n	800b38a <__hexnan+0x10e>
 800b320:	4623      	mov	r3, r4
 800b322:	f1a8 0204 	sub.w	r2, r8, #4
 800b326:	f853 1b04 	ldr.w	r1, [r3], #4
 800b32a:	429f      	cmp	r7, r3
 800b32c:	f842 1f04 	str.w	r1, [r2, #4]!
 800b330:	d2f9      	bcs.n	800b326 <__hexnan+0xaa>
 800b332:	1b3b      	subs	r3, r7, r4
 800b334:	f023 0303 	bic.w	r3, r3, #3
 800b338:	3304      	adds	r3, #4
 800b33a:	3e03      	subs	r6, #3
 800b33c:	3401      	adds	r4, #1
 800b33e:	42a6      	cmp	r6, r4
 800b340:	bf38      	it	cc
 800b342:	2304      	movcc	r3, #4
 800b344:	2200      	movs	r2, #0
 800b346:	4443      	add	r3, r8
 800b348:	f843 2b04 	str.w	r2, [r3], #4
 800b34c:	429f      	cmp	r7, r3
 800b34e:	d2fb      	bcs.n	800b348 <__hexnan+0xcc>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	b91b      	cbnz	r3, 800b35c <__hexnan+0xe0>
 800b354:	4547      	cmp	r7, r8
 800b356:	d126      	bne.n	800b3a6 <__hexnan+0x12a>
 800b358:	2301      	movs	r3, #1
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	2005      	movs	r0, #5
 800b35e:	e025      	b.n	800b3ac <__hexnan+0x130>
 800b360:	3501      	adds	r5, #1
 800b362:	2d08      	cmp	r5, #8
 800b364:	f10b 0b01 	add.w	fp, fp, #1
 800b368:	dd06      	ble.n	800b378 <__hexnan+0xfc>
 800b36a:	4544      	cmp	r4, r8
 800b36c:	d9c3      	bls.n	800b2f6 <__hexnan+0x7a>
 800b36e:	2300      	movs	r3, #0
 800b370:	2501      	movs	r5, #1
 800b372:	f844 3c04 	str.w	r3, [r4, #-4]
 800b376:	3c04      	subs	r4, #4
 800b378:	6822      	ldr	r2, [r4, #0]
 800b37a:	f000 000f 	and.w	r0, r0, #15
 800b37e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	e7b7      	b.n	800b2f6 <__hexnan+0x7a>
 800b386:	2508      	movs	r5, #8
 800b388:	e7b5      	b.n	800b2f6 <__hexnan+0x7a>
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0df      	beq.n	800b350 <__hexnan+0xd4>
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	f1c3 0320 	rsb	r3, r3, #32
 800b398:	40da      	lsrs	r2, r3
 800b39a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b39e:	4013      	ands	r3, r2
 800b3a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b3a4:	e7d4      	b.n	800b350 <__hexnan+0xd4>
 800b3a6:	3f04      	subs	r7, #4
 800b3a8:	e7d2      	b.n	800b350 <__hexnan+0xd4>
 800b3aa:	2004      	movs	r0, #4
 800b3ac:	b007      	add	sp, #28
 800b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3b2 <__ascii_mbtowc>:
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	b901      	cbnz	r1, 800b3b8 <__ascii_mbtowc+0x6>
 800b3b6:	a901      	add	r1, sp, #4
 800b3b8:	b142      	cbz	r2, 800b3cc <__ascii_mbtowc+0x1a>
 800b3ba:	b14b      	cbz	r3, 800b3d0 <__ascii_mbtowc+0x1e>
 800b3bc:	7813      	ldrb	r3, [r2, #0]
 800b3be:	600b      	str	r3, [r1, #0]
 800b3c0:	7812      	ldrb	r2, [r2, #0]
 800b3c2:	1e10      	subs	r0, r2, #0
 800b3c4:	bf18      	it	ne
 800b3c6:	2001      	movne	r0, #1
 800b3c8:	b002      	add	sp, #8
 800b3ca:	4770      	bx	lr
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	e7fb      	b.n	800b3c8 <__ascii_mbtowc+0x16>
 800b3d0:	f06f 0001 	mvn.w	r0, #1
 800b3d4:	e7f8      	b.n	800b3c8 <__ascii_mbtowc+0x16>

0800b3d6 <_realloc_r>:
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	4680      	mov	r8, r0
 800b3dc:	4614      	mov	r4, r2
 800b3de:	460e      	mov	r6, r1
 800b3e0:	b921      	cbnz	r1, 800b3ec <_realloc_r+0x16>
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e8:	f7fb bf66 	b.w	80072b8 <_malloc_r>
 800b3ec:	b92a      	cbnz	r2, 800b3fa <_realloc_r+0x24>
 800b3ee:	f7fd fe9f 	bl	8009130 <_free_r>
 800b3f2:	4625      	mov	r5, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fa:	f000 f842 	bl	800b482 <_malloc_usable_size_r>
 800b3fe:	4284      	cmp	r4, r0
 800b400:	4607      	mov	r7, r0
 800b402:	d802      	bhi.n	800b40a <_realloc_r+0x34>
 800b404:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b408:	d812      	bhi.n	800b430 <_realloc_r+0x5a>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4640      	mov	r0, r8
 800b40e:	f7fb ff53 	bl	80072b8 <_malloc_r>
 800b412:	4605      	mov	r5, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	d0ed      	beq.n	800b3f4 <_realloc_r+0x1e>
 800b418:	42bc      	cmp	r4, r7
 800b41a:	4622      	mov	r2, r4
 800b41c:	4631      	mov	r1, r6
 800b41e:	bf28      	it	cs
 800b420:	463a      	movcs	r2, r7
 800b422:	f7fd f804 	bl	800842e <memcpy>
 800b426:	4631      	mov	r1, r6
 800b428:	4640      	mov	r0, r8
 800b42a:	f7fd fe81 	bl	8009130 <_free_r>
 800b42e:	e7e1      	b.n	800b3f4 <_realloc_r+0x1e>
 800b430:	4635      	mov	r5, r6
 800b432:	e7df      	b.n	800b3f4 <_realloc_r+0x1e>

0800b434 <__ascii_wctomb>:
 800b434:	4603      	mov	r3, r0
 800b436:	4608      	mov	r0, r1
 800b438:	b141      	cbz	r1, 800b44c <__ascii_wctomb+0x18>
 800b43a:	2aff      	cmp	r2, #255	; 0xff
 800b43c:	d904      	bls.n	800b448 <__ascii_wctomb+0x14>
 800b43e:	228a      	movs	r2, #138	; 0x8a
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	4770      	bx	lr
 800b448:	2001      	movs	r0, #1
 800b44a:	700a      	strb	r2, [r1, #0]
 800b44c:	4770      	bx	lr
	...

0800b450 <fiprintf>:
 800b450:	b40e      	push	{r1, r2, r3}
 800b452:	b503      	push	{r0, r1, lr}
 800b454:	4601      	mov	r1, r0
 800b456:	ab03      	add	r3, sp, #12
 800b458:	4805      	ldr	r0, [pc, #20]	; (800b470 <fiprintf+0x20>)
 800b45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b45e:	6800      	ldr	r0, [r0, #0]
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	f000 f83d 	bl	800b4e0 <_vfiprintf_r>
 800b466:	b002      	add	sp, #8
 800b468:	f85d eb04 	ldr.w	lr, [sp], #4
 800b46c:	b003      	add	sp, #12
 800b46e:	4770      	bx	lr
 800b470:	20000064 	.word	0x20000064

0800b474 <abort>:
 800b474:	2006      	movs	r0, #6
 800b476:	b508      	push	{r3, lr}
 800b478:	f000 fa0a 	bl	800b890 <raise>
 800b47c:	2001      	movs	r0, #1
 800b47e:	f7f8 fa96 	bl	80039ae <_exit>

0800b482 <_malloc_usable_size_r>:
 800b482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b486:	1f18      	subs	r0, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfbc      	itt	lt
 800b48c:	580b      	ldrlt	r3, [r1, r0]
 800b48e:	18c0      	addlt	r0, r0, r3
 800b490:	4770      	bx	lr

0800b492 <__sfputc_r>:
 800b492:	6893      	ldr	r3, [r2, #8]
 800b494:	b410      	push	{r4}
 800b496:	3b01      	subs	r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	6093      	str	r3, [r2, #8]
 800b49c:	da07      	bge.n	800b4ae <__sfputc_r+0x1c>
 800b49e:	6994      	ldr	r4, [r2, #24]
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	db01      	blt.n	800b4a8 <__sfputc_r+0x16>
 800b4a4:	290a      	cmp	r1, #10
 800b4a6:	d102      	bne.n	800b4ae <__sfputc_r+0x1c>
 800b4a8:	bc10      	pop	{r4}
 800b4aa:	f000 b933 	b.w	800b714 <__swbuf_r>
 800b4ae:	6813      	ldr	r3, [r2, #0]
 800b4b0:	1c58      	adds	r0, r3, #1
 800b4b2:	6010      	str	r0, [r2, #0]
 800b4b4:	7019      	strb	r1, [r3, #0]
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	bc10      	pop	{r4}
 800b4ba:	4770      	bx	lr

0800b4bc <__sfputs_r>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	4606      	mov	r6, r0
 800b4c0:	460f      	mov	r7, r1
 800b4c2:	4614      	mov	r4, r2
 800b4c4:	18d5      	adds	r5, r2, r3
 800b4c6:	42ac      	cmp	r4, r5
 800b4c8:	d101      	bne.n	800b4ce <__sfputs_r+0x12>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	e007      	b.n	800b4de <__sfputs_r+0x22>
 800b4ce:	463a      	mov	r2, r7
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d6:	f7ff ffdc 	bl	800b492 <__sfputc_r>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	d1f3      	bne.n	800b4c6 <__sfputs_r+0xa>
 800b4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4e0 <_vfiprintf_r>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	4614      	mov	r4, r2
 800b4e8:	4698      	mov	r8, r3
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	b09d      	sub	sp, #116	; 0x74
 800b4ee:	b118      	cbz	r0, 800b4f8 <_vfiprintf_r+0x18>
 800b4f0:	6a03      	ldr	r3, [r0, #32]
 800b4f2:	b90b      	cbnz	r3, 800b4f8 <_vfiprintf_r+0x18>
 800b4f4:	f7fc fe64 	bl	80081c0 <__sinit>
 800b4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_vfiprintf_r+0x2a>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	059a      	lsls	r2, r3, #22
 800b502:	d402      	bmi.n	800b50a <_vfiprintf_r+0x2a>
 800b504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b506:	f7fc ff82 	bl	800840e <__retarget_lock_acquire_recursive>
 800b50a:	89ab      	ldrh	r3, [r5, #12]
 800b50c:	071b      	lsls	r3, r3, #28
 800b50e:	d501      	bpl.n	800b514 <_vfiprintf_r+0x34>
 800b510:	692b      	ldr	r3, [r5, #16]
 800b512:	b99b      	cbnz	r3, 800b53c <_vfiprintf_r+0x5c>
 800b514:	4629      	mov	r1, r5
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f93a 	bl	800b790 <__swsetup_r>
 800b51c:	b170      	cbz	r0, 800b53c <_vfiprintf_r+0x5c>
 800b51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b520:	07dc      	lsls	r4, r3, #31
 800b522:	d504      	bpl.n	800b52e <_vfiprintf_r+0x4e>
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	b01d      	add	sp, #116	; 0x74
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	0598      	lsls	r0, r3, #22
 800b532:	d4f7      	bmi.n	800b524 <_vfiprintf_r+0x44>
 800b534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b536:	f7fc ff6b 	bl	8008410 <__retarget_lock_release_recursive>
 800b53a:	e7f3      	b.n	800b524 <_vfiprintf_r+0x44>
 800b53c:	2300      	movs	r3, #0
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	2320      	movs	r3, #32
 800b542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b546:	2330      	movs	r3, #48	; 0x30
 800b548:	f04f 0901 	mov.w	r9, #1
 800b54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b550:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b700 <_vfiprintf_r+0x220>
 800b554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b558:	4623      	mov	r3, r4
 800b55a:	469a      	mov	sl, r3
 800b55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b560:	b10a      	cbz	r2, 800b566 <_vfiprintf_r+0x86>
 800b562:	2a25      	cmp	r2, #37	; 0x25
 800b564:	d1f9      	bne.n	800b55a <_vfiprintf_r+0x7a>
 800b566:	ebba 0b04 	subs.w	fp, sl, r4
 800b56a:	d00b      	beq.n	800b584 <_vfiprintf_r+0xa4>
 800b56c:	465b      	mov	r3, fp
 800b56e:	4622      	mov	r2, r4
 800b570:	4629      	mov	r1, r5
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff ffa2 	bl	800b4bc <__sfputs_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	f000 80a9 	beq.w	800b6d0 <_vfiprintf_r+0x1f0>
 800b57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b580:	445a      	add	r2, fp
 800b582:	9209      	str	r2, [sp, #36]	; 0x24
 800b584:	f89a 3000 	ldrb.w	r3, [sl]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 80a1 	beq.w	800b6d0 <_vfiprintf_r+0x1f0>
 800b58e:	2300      	movs	r3, #0
 800b590:	f04f 32ff 	mov.w	r2, #4294967295
 800b594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b598:	f10a 0a01 	add.w	sl, sl, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	9307      	str	r3, [sp, #28]
 800b5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5a6:	4654      	mov	r4, sl
 800b5a8:	2205      	movs	r2, #5
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	4854      	ldr	r0, [pc, #336]	; (800b700 <_vfiprintf_r+0x220>)
 800b5b0:	f7fc ff2f 	bl	8008412 <memchr>
 800b5b4:	9a04      	ldr	r2, [sp, #16]
 800b5b6:	b9d8      	cbnz	r0, 800b5f0 <_vfiprintf_r+0x110>
 800b5b8:	06d1      	lsls	r1, r2, #27
 800b5ba:	bf44      	itt	mi
 800b5bc:	2320      	movmi	r3, #32
 800b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c2:	0713      	lsls	r3, r2, #28
 800b5c4:	bf44      	itt	mi
 800b5c6:	232b      	movmi	r3, #43	; 0x2b
 800b5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d2:	d015      	beq.n	800b600 <_vfiprintf_r+0x120>
 800b5d4:	4654      	mov	r4, sl
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e4:	3b30      	subs	r3, #48	; 0x30
 800b5e6:	2b09      	cmp	r3, #9
 800b5e8:	d94d      	bls.n	800b686 <_vfiprintf_r+0x1a6>
 800b5ea:	b1b0      	cbz	r0, 800b61a <_vfiprintf_r+0x13a>
 800b5ec:	9207      	str	r2, [sp, #28]
 800b5ee:	e014      	b.n	800b61a <_vfiprintf_r+0x13a>
 800b5f0:	eba0 0308 	sub.w	r3, r0, r8
 800b5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	46a2      	mov	sl, r4
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	e7d2      	b.n	800b5a6 <_vfiprintf_r+0xc6>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	1d19      	adds	r1, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	9103      	str	r1, [sp, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	bfbb      	ittet	lt
 800b60c:	425b      	neglt	r3, r3
 800b60e:	f042 0202 	orrlt.w	r2, r2, #2
 800b612:	9307      	strge	r3, [sp, #28]
 800b614:	9307      	strlt	r3, [sp, #28]
 800b616:	bfb8      	it	lt
 800b618:	9204      	strlt	r2, [sp, #16]
 800b61a:	7823      	ldrb	r3, [r4, #0]
 800b61c:	2b2e      	cmp	r3, #46	; 0x2e
 800b61e:	d10c      	bne.n	800b63a <_vfiprintf_r+0x15a>
 800b620:	7863      	ldrb	r3, [r4, #1]
 800b622:	2b2a      	cmp	r3, #42	; 0x2a
 800b624:	d134      	bne.n	800b690 <_vfiprintf_r+0x1b0>
 800b626:	9b03      	ldr	r3, [sp, #12]
 800b628:	3402      	adds	r4, #2
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	9203      	str	r2, [sp, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	bfb8      	it	lt
 800b634:	f04f 33ff 	movlt.w	r3, #4294967295
 800b638:	9305      	str	r3, [sp, #20]
 800b63a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b704 <_vfiprintf_r+0x224>
 800b63e:	2203      	movs	r2, #3
 800b640:	4650      	mov	r0, sl
 800b642:	7821      	ldrb	r1, [r4, #0]
 800b644:	f7fc fee5 	bl	8008412 <memchr>
 800b648:	b138      	cbz	r0, 800b65a <_vfiprintf_r+0x17a>
 800b64a:	2240      	movs	r2, #64	; 0x40
 800b64c:	9b04      	ldr	r3, [sp, #16]
 800b64e:	eba0 000a 	sub.w	r0, r0, sl
 800b652:	4082      	lsls	r2, r0
 800b654:	4313      	orrs	r3, r2
 800b656:	3401      	adds	r4, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	2206      	movs	r2, #6
 800b660:	4829      	ldr	r0, [pc, #164]	; (800b708 <_vfiprintf_r+0x228>)
 800b662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b666:	f7fc fed4 	bl	8008412 <memchr>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d03f      	beq.n	800b6ee <_vfiprintf_r+0x20e>
 800b66e:	4b27      	ldr	r3, [pc, #156]	; (800b70c <_vfiprintf_r+0x22c>)
 800b670:	bb1b      	cbnz	r3, 800b6ba <_vfiprintf_r+0x1da>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	3307      	adds	r3, #7
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	3308      	adds	r3, #8
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	443b      	add	r3, r7
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
 800b684:	e768      	b.n	800b558 <_vfiprintf_r+0x78>
 800b686:	460c      	mov	r4, r1
 800b688:	2001      	movs	r0, #1
 800b68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b68e:	e7a6      	b.n	800b5de <_vfiprintf_r+0xfe>
 800b690:	2300      	movs	r3, #0
 800b692:	f04f 0c0a 	mov.w	ip, #10
 800b696:	4619      	mov	r1, r3
 800b698:	3401      	adds	r4, #1
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	4620      	mov	r0, r4
 800b69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a2:	3a30      	subs	r2, #48	; 0x30
 800b6a4:	2a09      	cmp	r2, #9
 800b6a6:	d903      	bls.n	800b6b0 <_vfiprintf_r+0x1d0>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0c6      	beq.n	800b63a <_vfiprintf_r+0x15a>
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	e7c4      	b.n	800b63a <_vfiprintf_r+0x15a>
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b8:	e7f0      	b.n	800b69c <_vfiprintf_r+0x1bc>
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <_vfiprintf_r+0x230>)
 800b6c4:	a904      	add	r1, sp, #16
 800b6c6:	f7fb ff1f 	bl	8007508 <_printf_float>
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	1c78      	adds	r0, r7, #1
 800b6ce:	d1d6      	bne.n	800b67e <_vfiprintf_r+0x19e>
 800b6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	d405      	bmi.n	800b6e2 <_vfiprintf_r+0x202>
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_vfiprintf_r+0x202>
 800b6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6de:	f7fc fe97 	bl	8008410 <__retarget_lock_release_recursive>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	065b      	lsls	r3, r3, #25
 800b6e6:	f53f af1d 	bmi.w	800b524 <_vfiprintf_r+0x44>
 800b6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ec:	e71c      	b.n	800b528 <_vfiprintf_r+0x48>
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <_vfiprintf_r+0x230>)
 800b6f8:	a904      	add	r1, sp, #16
 800b6fa:	f7fc f9a5 	bl	8007a48 <_printf_i>
 800b6fe:	e7e4      	b.n	800b6ca <_vfiprintf_r+0x1ea>
 800b700:	0800bd89 	.word	0x0800bd89
 800b704:	0800bd8f 	.word	0x0800bd8f
 800b708:	0800bd93 	.word	0x0800bd93
 800b70c:	08007509 	.word	0x08007509
 800b710:	0800b4bd 	.word	0x0800b4bd

0800b714 <__swbuf_r>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	460e      	mov	r6, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	4605      	mov	r5, r0
 800b71c:	b118      	cbz	r0, 800b726 <__swbuf_r+0x12>
 800b71e:	6a03      	ldr	r3, [r0, #32]
 800b720:	b90b      	cbnz	r3, 800b726 <__swbuf_r+0x12>
 800b722:	f7fc fd4d 	bl	80081c0 <__sinit>
 800b726:	69a3      	ldr	r3, [r4, #24]
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	071a      	lsls	r2, r3, #28
 800b72e:	d525      	bpl.n	800b77c <__swbuf_r+0x68>
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	b31b      	cbz	r3, 800b77c <__swbuf_r+0x68>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	6922      	ldr	r2, [r4, #16]
 800b738:	b2f6      	uxtb	r6, r6
 800b73a:	1a98      	subs	r0, r3, r2
 800b73c:	6963      	ldr	r3, [r4, #20]
 800b73e:	4637      	mov	r7, r6
 800b740:	4283      	cmp	r3, r0
 800b742:	dc04      	bgt.n	800b74e <__swbuf_r+0x3a>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f7ff fa4e 	bl	800abe8 <_fflush_r>
 800b74c:	b9e0      	cbnz	r0, 800b788 <__swbuf_r+0x74>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	701e      	strb	r6, [r3, #0]
 800b75c:	6962      	ldr	r2, [r4, #20]
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	d004      	beq.n	800b76e <__swbuf_r+0x5a>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d506      	bpl.n	800b778 <__swbuf_r+0x64>
 800b76a:	2e0a      	cmp	r6, #10
 800b76c:	d104      	bne.n	800b778 <__swbuf_r+0x64>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff fa39 	bl	800abe8 <_fflush_r>
 800b776:	b938      	cbnz	r0, 800b788 <__swbuf_r+0x74>
 800b778:	4638      	mov	r0, r7
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77c:	4621      	mov	r1, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f806 	bl	800b790 <__swsetup_r>
 800b784:	2800      	cmp	r0, #0
 800b786:	d0d5      	beq.n	800b734 <__swbuf_r+0x20>
 800b788:	f04f 37ff 	mov.w	r7, #4294967295
 800b78c:	e7f4      	b.n	800b778 <__swbuf_r+0x64>
	...

0800b790 <__swsetup_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <__swsetup_r+0xac>)
 800b794:	4605      	mov	r5, r0
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	460c      	mov	r4, r1
 800b79a:	b118      	cbz	r0, 800b7a4 <__swsetup_r+0x14>
 800b79c:	6a03      	ldr	r3, [r0, #32]
 800b79e:	b90b      	cbnz	r3, 800b7a4 <__swsetup_r+0x14>
 800b7a0:	f7fc fd0e 	bl	80081c0 <__sinit>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7aa:	0718      	lsls	r0, r3, #28
 800b7ac:	d422      	bmi.n	800b7f4 <__swsetup_r+0x64>
 800b7ae:	06d9      	lsls	r1, r3, #27
 800b7b0:	d407      	bmi.n	800b7c2 <__swsetup_r+0x32>
 800b7b2:	2309      	movs	r3, #9
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	e034      	b.n	800b82c <__swsetup_r+0x9c>
 800b7c2:	0758      	lsls	r0, r3, #29
 800b7c4:	d512      	bpl.n	800b7ec <__swsetup_r+0x5c>
 800b7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7c8:	b141      	cbz	r1, 800b7dc <__swsetup_r+0x4c>
 800b7ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	d002      	beq.n	800b7d8 <__swsetup_r+0x48>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7fd fcac 	bl	8009130 <_free_r>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	6363      	str	r3, [r4, #52]	; 0x34
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	6063      	str	r3, [r4, #4]
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	6023      	str	r3, [r4, #0]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0308 	orr.w	r3, r3, #8
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	b94b      	cbnz	r3, 800b80c <__swsetup_r+0x7c>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b802:	d003      	beq.n	800b80c <__swsetup_r+0x7c>
 800b804:	4621      	mov	r1, r4
 800b806:	4628      	mov	r0, r5
 800b808:	f000 f883 	bl	800b912 <__smakebuf_r>
 800b80c:	89a0      	ldrh	r0, [r4, #12]
 800b80e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b812:	f010 0301 	ands.w	r3, r0, #1
 800b816:	d00a      	beq.n	800b82e <__swsetup_r+0x9e>
 800b818:	2300      	movs	r3, #0
 800b81a:	60a3      	str	r3, [r4, #8]
 800b81c:	6963      	ldr	r3, [r4, #20]
 800b81e:	425b      	negs	r3, r3
 800b820:	61a3      	str	r3, [r4, #24]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	b943      	cbnz	r3, 800b838 <__swsetup_r+0xa8>
 800b826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b82a:	d1c4      	bne.n	800b7b6 <__swsetup_r+0x26>
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	0781      	lsls	r1, r0, #30
 800b830:	bf58      	it	pl
 800b832:	6963      	ldrpl	r3, [r4, #20]
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	e7f4      	b.n	800b822 <__swsetup_r+0x92>
 800b838:	2000      	movs	r0, #0
 800b83a:	e7f7      	b.n	800b82c <__swsetup_r+0x9c>
 800b83c:	20000064 	.word	0x20000064

0800b840 <_raise_r>:
 800b840:	291f      	cmp	r1, #31
 800b842:	b538      	push	{r3, r4, r5, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	d904      	bls.n	800b854 <_raise_r+0x14>
 800b84a:	2316      	movs	r3, #22
 800b84c:	6003      	str	r3, [r0, #0]
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b856:	b112      	cbz	r2, 800b85e <_raise_r+0x1e>
 800b858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b85c:	b94b      	cbnz	r3, 800b872 <_raise_r+0x32>
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f830 	bl	800b8c4 <_getpid_r>
 800b864:	462a      	mov	r2, r5
 800b866:	4601      	mov	r1, r0
 800b868:	4620      	mov	r0, r4
 800b86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86e:	f000 b817 	b.w	800b8a0 <_kill_r>
 800b872:	2b01      	cmp	r3, #1
 800b874:	d00a      	beq.n	800b88c <_raise_r+0x4c>
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	d103      	bne.n	800b882 <_raise_r+0x42>
 800b87a:	2316      	movs	r3, #22
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	e7e7      	b.n	800b852 <_raise_r+0x12>
 800b882:	2400      	movs	r4, #0
 800b884:	4628      	mov	r0, r5
 800b886:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b88a:	4798      	blx	r3
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7e0      	b.n	800b852 <_raise_r+0x12>

0800b890 <raise>:
 800b890:	4b02      	ldr	r3, [pc, #8]	; (800b89c <raise+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f7ff bfd3 	b.w	800b840 <_raise_r>
 800b89a:	bf00      	nop
 800b89c:	20000064 	.word	0x20000064

0800b8a0 <_kill_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_kill_r+0x20>)
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7f8 f86e 	bl	800398e <_kill>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_kill_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_kill_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000a6c 	.word	0x20000a6c

0800b8c4 <_getpid_r>:
 800b8c4:	f7f8 b85c 	b.w	8003980 <_getpid>

0800b8c8 <__swhatbuf_r>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d0:	4615      	mov	r5, r2
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	461e      	mov	r6, r3
 800b8d6:	b096      	sub	sp, #88	; 0x58
 800b8d8:	da0c      	bge.n	800b8f4 <__swhatbuf_r+0x2c>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8e2:	bf0c      	ite	eq
 800b8e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8e8:	2340      	movne	r3, #64	; 0x40
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	6031      	str	r1, [r6, #0]
 800b8ee:	602b      	str	r3, [r5, #0]
 800b8f0:	b016      	add	sp, #88	; 0x58
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	466a      	mov	r2, sp
 800b8f6:	f000 f849 	bl	800b98c <_fstat_r>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	dbed      	blt.n	800b8da <__swhatbuf_r+0x12>
 800b8fe:	9901      	ldr	r1, [sp, #4]
 800b900:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b904:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b908:	4259      	negs	r1, r3
 800b90a:	4159      	adcs	r1, r3
 800b90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b910:	e7eb      	b.n	800b8ea <__swhatbuf_r+0x22>

0800b912 <__smakebuf_r>:
 800b912:	898b      	ldrh	r3, [r1, #12]
 800b914:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b916:	079d      	lsls	r5, r3, #30
 800b918:	4606      	mov	r6, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	d507      	bpl.n	800b92e <__smakebuf_r+0x1c>
 800b91e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	6123      	str	r3, [r4, #16]
 800b926:	2301      	movs	r3, #1
 800b928:	6163      	str	r3, [r4, #20]
 800b92a:	b002      	add	sp, #8
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
 800b92e:	466a      	mov	r2, sp
 800b930:	ab01      	add	r3, sp, #4
 800b932:	f7ff ffc9 	bl	800b8c8 <__swhatbuf_r>
 800b936:	9900      	ldr	r1, [sp, #0]
 800b938:	4605      	mov	r5, r0
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7fb fcbc 	bl	80072b8 <_malloc_r>
 800b940:	b948      	cbnz	r0, 800b956 <__smakebuf_r+0x44>
 800b942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b946:	059a      	lsls	r2, r3, #22
 800b948:	d4ef      	bmi.n	800b92a <__smakebuf_r+0x18>
 800b94a:	f023 0303 	bic.w	r3, r3, #3
 800b94e:	f043 0302 	orr.w	r3, r3, #2
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	e7e3      	b.n	800b91e <__smakebuf_r+0xc>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	6020      	str	r0, [r4, #0]
 800b95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	9b00      	ldr	r3, [sp, #0]
 800b962:	6120      	str	r0, [r4, #16]
 800b964:	6163      	str	r3, [r4, #20]
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	b15b      	cbz	r3, 800b982 <__smakebuf_r+0x70>
 800b96a:	4630      	mov	r0, r6
 800b96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b970:	f000 f81e 	bl	800b9b0 <_isatty_r>
 800b974:	b128      	cbz	r0, 800b982 <__smakebuf_r+0x70>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	f023 0303 	bic.w	r3, r3, #3
 800b97c:	f043 0301 	orr.w	r3, r3, #1
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	431d      	orrs	r5, r3
 800b986:	81a5      	strh	r5, [r4, #12]
 800b988:	e7cf      	b.n	800b92a <__smakebuf_r+0x18>
	...

0800b98c <_fstat_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	2300      	movs	r3, #0
 800b990:	4d06      	ldr	r5, [pc, #24]	; (800b9ac <_fstat_r+0x20>)
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	f7f8 f83a 	bl	8003a12 <_fstat>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	d102      	bne.n	800b9a8 <_fstat_r+0x1c>
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	b103      	cbz	r3, 800b9a8 <_fstat_r+0x1c>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20000a6c 	.word	0x20000a6c

0800b9b0 <_isatty_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4d05      	ldr	r5, [pc, #20]	; (800b9cc <_isatty_r+0x1c>)
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f8 f838 	bl	8003a30 <_isatty>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_isatty_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_isatty_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	20000a6c 	.word	0x20000a6c

0800b9d0 <_init>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr

0800b9dc <_fini>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr
